// Autogenerated by HotRod -- Do not edit.

package hr3.springboot.poc.hotrod.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import hr3.springboot.poc.hotrod.ArticuloImpl;
import hr3.springboot.poc.hotrod.RequestItemImpl;
import hr3.springboot.poc.hotrod.primitives.RequestItemDAO.RequestItemOrderBy;
import hr3.springboot.poc.hotrod.primitives.RequestItemDAO;

import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.TypeHandler;
import org.hotrod.runtime.converter.TypeConverter;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class ArticuloDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private RequestItemDAO requestItemDAO;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public hr3.springboot.poc.hotrod.ArticuloImpl selectByPK(final java.lang.Long artId) {
    if (artId == null)
      return null;
    hr3.springboot.poc.hotrod.ArticuloImpl vo = new hr3.springboot.poc.hotrod.ArticuloImpl();
    vo.setArtId(artId);
    return this.sqlSession.selectOne("hr3.springboot.poc.hotrod.primitives.articulo.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<hr3.springboot.poc.hotrod.ArticuloImpl> selectByExample(final hr3.springboot.poc.hotrod.ArticuloImpl example, final ArticuloOrderBy... orderBies)
      {
    DaoWithOrder<hr3.springboot.poc.hotrod.ArticuloImpl, ArticuloOrderBy> dwo = //
        new DaoWithOrder<hr3.springboot.poc.hotrod.ArticuloImpl, ArticuloOrderBy>(example, orderBies);
    return this.sqlSession.selectList("hr3.springboot.poc.hotrod.primitives.articulo.selectByExample", dwo);
  }

  public Cursor<hr3.springboot.poc.hotrod.ArticuloImpl> selectByExampleCursor(final hr3.springboot.poc.hotrod.ArticuloImpl example, final ArticuloOrderBy... orderBies)
      {
    DaoWithOrder<hr3.springboot.poc.hotrod.ArticuloImpl, ArticuloOrderBy> dwo = //
        new DaoWithOrder<hr3.springboot.poc.hotrod.ArticuloImpl, ArticuloOrderBy>(example, orderBies);
    return new MyBatisCursor<hr3.springboot.poc.hotrod.ArticuloImpl>(this.sqlSession.selectCursor("hr3.springboot.poc.hotrod.primitives.articulo.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<hr3.springboot.poc.hotrod.ArticuloImpl> selectByCriteria(final ArticuloDAO.ArticuloTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<hr3.springboot.poc.hotrod.ArticuloImpl>(from, this.sqlDialect, this.sqlSession,
        predicate, "hr3.springboot.poc.hotrod.primitives.articulo.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs

  public SelectChildrenRequestItemPhase selectChildrenRequestItemOf(final ArticuloImpl vo) {
    return new SelectChildrenRequestItemPhase(vo);
  }

  public class SelectChildrenRequestItemPhase {

    private ArticuloImpl vo;

    SelectChildrenRequestItemPhase(final ArticuloImpl vo) {
      this.vo = vo;
    }

    public SelectChildrenRequestItemFromArtIdPhase fromArtId() {
      return new SelectChildrenRequestItemFromArtIdPhase(this.vo);
    }

  }

  public class SelectChildrenRequestItemFromArtIdPhase {

    private ArticuloImpl vo;

    SelectChildrenRequestItemFromArtIdPhase(final ArticuloImpl vo) {
      this.vo = vo;
    }

    public List<RequestItemImpl> toIdArticulo(final RequestItemOrderBy... orderBies) {
      RequestItemImpl example = new RequestItemImpl();
      example.setIdArticulo(this.vo.getArtId());
      return requestItemDAO.selectByExample(example, orderBies);
    }

    public Cursor<RequestItemImpl> cursorToIdArticulo(final RequestItemOrderBy... orderBies) {
      RequestItemImpl example = new RequestItemImpl();
      example.setIdArticulo(this.vo.getArtId());
      return requestItemDAO.selectByExampleCursor(example, orderBies);
    }

  }

  // insert

  public int insert(final hr3.springboot.poc.hotrod.ArticuloImpl vo) {
    String id = "hr3.springboot.poc.hotrod.primitives.articulo.insert";
    int rows = this.sqlSession.insert(id, vo);
    return rows;
  }

  // update by PK

  public int update(final hr3.springboot.poc.hotrod.ArticuloImpl vo) {
    if (vo.artId == null) return 0;
    return this.sqlSession.update("hr3.springboot.poc.hotrod.primitives.articulo.updateByPK", vo);
  }

  // delete by PK

  public int delete(final hr3.springboot.poc.hotrod.ArticuloImpl vo) {
    if (vo.artId == null) return 0;
    return this.sqlSession.delete("hr3.springboot.poc.hotrod.primitives.articulo.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final hr3.springboot.poc.hotrod.ArticuloImpl example, final hr3.springboot.poc.hotrod.ArticuloImpl updateValues) {
    UpdateByExampleDao<hr3.springboot.poc.hotrod.ArticuloImpl> fvd = //
      new UpdateByExampleDao<hr3.springboot.poc.hotrod.ArticuloImpl>(example, updateValues);
    return this.sqlSession.update("hr3.springboot.poc.hotrod.primitives.articulo.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final hr3.springboot.poc.hotrod.ArticuloImpl example) {
    return this.sqlSession.delete("hr3.springboot.poc.hotrod.primitives.articulo.deleteByExample", example);
  }

  // TypeHandler for column ART_TYPE using Converter hr3.springboot.poc.etc.ArticuloTypeConverter.

  public static class TipoTypeHandler implements TypeHandler<hr3.springboot.poc.model.EnumArticuloType> {

    private static TypeConverter<java.lang.String, hr3.springboot.poc.model.EnumArticuloType> CONVERTER = new hr3.springboot.poc.etc.ArticuloTypeConverter();

    @Override
    public hr3.springboot.poc.model.EnumArticuloType getResult(final ResultSet rs, final String columnName) throws SQLException {
      java.lang.String value = rs.getString(columnName);
      if (rs.wasNull()) {
        value = null;
      }
      return CONVERTER.decode(value);
    }

    @Override
    public hr3.springboot.poc.model.EnumArticuloType getResult(final ResultSet rs, final int columnIndex) throws SQLException {
      java.lang.String value = rs.getString(columnIndex);
      if (rs.wasNull()) {
        value = null;
      }
      return CONVERTER.decode(value);
    }

    @Override
    public hr3.springboot.poc.model.EnumArticuloType getResult(final CallableStatement cs, final int columnIndex) throws SQLException {
      java.lang.String value = cs.getString(columnIndex);
      if (cs.wasNull()) {
        value = null;
      }
      return CONVERTER.decode(value);
    }

    @Override
    public void setParameter(final PreparedStatement ps, final int columnIndex, final hr3.springboot.poc.model.EnumArticuloType v, final JdbcType jdbcType)
        throws SQLException {
      java.lang.String value = CONVERTER.encode(v);
      if (value == null) {
        ps.setNull(columnIndex, jdbcType.TYPE_CODE);
      } else {
        ps.setString(columnIndex, value);
      }
    }

  }

  // DAO ordering

  public enum ArticuloOrderBy implements OrderBy {

    ART_ID("stock_articulo", "art_id", true), //
    ART_ID$DESC("stock_articulo", "art_id", false), //
    ART_DESC("stock_articulo", "art_desc", true), //
    ART_DESC$DESC("stock_articulo", "art_desc", false), //
    ART_DESC$CASEINSENSITIVE("stock_articulo", "lower(art_desc)", true), //
    ART_DESC$CASEINSENSITIVE_STABLE_FORWARD("stock_articulo", "lower(art_desc), art_desc", true), //
    ART_DESC$CASEINSENSITIVE_STABLE_REVERSE("stock_articulo", "lower(art_desc), art_desc", false), //
    ART_DESC$DESC_CASEINSENSITIVE("stock_articulo", "lower(art_desc)", false), //
    ART_DESC$DESC_CASEINSENSITIVE_STABLE_FORWARD("stock_articulo", "lower(art_desc), art_desc", false), //
    ART_DESC$DESC_CASEINSENSITIVE_STABLE_REVERSE("stock_articulo", "lower(art_desc), art_desc", true), //
    TIPO("stock_articulo", "art_type", true), //
    TIPO$DESC("stock_articulo", "art_type", false), //
    TIPO$CASEINSENSITIVE("stock_articulo", "lower(art_type)", true), //
    TIPO$CASEINSENSITIVE_STABLE_FORWARD("stock_articulo", "lower(art_type), art_type", true), //
    TIPO$CASEINSENSITIVE_STABLE_REVERSE("stock_articulo", "lower(art_type), art_type", false), //
    TIPO$DESC_CASEINSENSITIVE("stock_articulo", "lower(art_type)", false), //
    TIPO$DESC_CASEINSENSITIVE_STABLE_FORWARD("stock_articulo", "lower(art_type), art_type", false), //
    TIPO$DESC_CASEINSENSITIVE_STABLE_REVERSE("stock_articulo", "lower(art_type), art_type", true);

    private ArticuloOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static ArticuloTable newTable() {
    return new ArticuloTable();
  }

  public static ArticuloTable newTable(final String alias) {
    return new ArticuloTable(alias);
  }

  public static class ArticuloTable extends Table {

    // Properties

    public NumberColumn artId;
    public StringColumn artDesc;
    public ObjectColumn tipo;

    // Constructors

    ArticuloTable() {
      super(null, null, "STOCK_ARTICULO", "Table", null);
      initialize();
    }

    ArticuloTable(final String alias) {
      super(null, null, "STOCK_ARTICULO", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.artId = new NumberColumn(this, "ART_ID", "artId");
      this.artDesc = new StringColumn(this, "ART_DESC", "artDesc");
      this.tipo = new ObjectColumn(this, "ART_TYPE", "tipo");
    }

  }

}
