// Autogenerated by HotRod -- Do not edit.

package hr3.springboot.poc.hotrod.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import hr3.springboot.poc.hotrod.PedidoImpl;
import hr3.springboot.poc.hotrod.PersonaImpl;
import hr3.springboot.poc.hotrod.primitives.PersonaDAO;
import hr3.springboot.poc.hotrod.RequestItemImpl;
import hr3.springboot.poc.hotrod.primitives.RequestItemDAO.RequestItemOrderBy;
import hr3.springboot.poc.hotrod.primitives.RequestItemDAO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class PedidoDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private RequestItemDAO requestItemDAO;

  @Autowired
  private PersonaDAO personaDAO;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public hr3.springboot.poc.hotrod.PedidoImpl selectByPK(final java.lang.Long id) {
    if (id == null)
      return null;
    hr3.springboot.poc.hotrod.PedidoImpl vo = new hr3.springboot.poc.hotrod.PedidoImpl();
    vo.setId(id);
    return this.sqlSession.selectOne("hr3.springboot.poc.hotrod.primitives.pedido.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<hr3.springboot.poc.hotrod.PedidoImpl> selectByExample(final hr3.springboot.poc.hotrod.PedidoImpl example, final PedidoOrderBy... orderBies)
      {
    DaoWithOrder<hr3.springboot.poc.hotrod.PedidoImpl, PedidoOrderBy> dwo = //
        new DaoWithOrder<hr3.springboot.poc.hotrod.PedidoImpl, PedidoOrderBy>(example, orderBies);
    return this.sqlSession.selectList("hr3.springboot.poc.hotrod.primitives.pedido.selectByExample", dwo);
  }

  public Cursor<hr3.springboot.poc.hotrod.PedidoImpl> selectByExampleCursor(final hr3.springboot.poc.hotrod.PedidoImpl example, final PedidoOrderBy... orderBies)
      {
    DaoWithOrder<hr3.springboot.poc.hotrod.PedidoImpl, PedidoOrderBy> dwo = //
        new DaoWithOrder<hr3.springboot.poc.hotrod.PedidoImpl, PedidoOrderBy>(example, orderBies);
    return new MyBatisCursor<hr3.springboot.poc.hotrod.PedidoImpl>(this.sqlSession.selectCursor("hr3.springboot.poc.hotrod.primitives.pedido.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<hr3.springboot.poc.hotrod.PedidoImpl> selectByCriteria(final PedidoDAO.PedidoTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<hr3.springboot.poc.hotrod.PedidoImpl>(from, this.sqlDialect, this.sqlSession,
        predicate, "hr3.springboot.poc.hotrod.primitives.pedido.selectByCriteria");
  }

  // select parent(s) by FKs

  public SelectParentPersonaPhase selectParentPersonaOf(final PedidoImpl vo) {
    return new SelectParentPersonaPhase(vo);
  }

  public class SelectParentPersonaPhase {

    private PedidoImpl vo;

    SelectParentPersonaPhase(final PedidoImpl vo) {
      this.vo = vo;
    }

    public SelectParentPersonaFromIdPersonaPhase fromIdPersona() {
      return new SelectParentPersonaFromIdPersonaPhase(this.vo);
    }

  }

  public class SelectParentPersonaFromIdPersonaPhase {

    private PedidoImpl vo;

    SelectParentPersonaFromIdPersonaPhase(final PedidoImpl vo) {
      this.vo = vo;
    }

    public PersonaImpl toId() {
      return personaDAO.selectByPK(this.vo.idPersona);
    }

  }

  // select children by FKs

  public SelectChildrenRequestItemPhase selectChildrenRequestItemOf(final PedidoImpl vo) {
    return new SelectChildrenRequestItemPhase(vo);
  }

  public class SelectChildrenRequestItemPhase {

    private PedidoImpl vo;

    SelectChildrenRequestItemPhase(final PedidoImpl vo) {
      this.vo = vo;
    }

    public SelectChildrenRequestItemFromIdPhase fromId() {
      return new SelectChildrenRequestItemFromIdPhase(this.vo);
    }

  }

  public class SelectChildrenRequestItemFromIdPhase {

    private PedidoImpl vo;

    SelectChildrenRequestItemFromIdPhase(final PedidoImpl vo) {
      this.vo = vo;
    }

    public List<RequestItemImpl> toIdPedido(final RequestItemOrderBy... orderBies) {
      RequestItemImpl example = new RequestItemImpl();
      example.setIdPedido(this.vo.getId());
      return requestItemDAO.selectByExample(example, orderBies);
    }

    public Cursor<RequestItemImpl> cursorToIdPedido(final RequestItemOrderBy... orderBies) {
      RequestItemImpl example = new RequestItemImpl();
      example.setIdPedido(this.vo.getId());
      return requestItemDAO.selectByExampleCursor(example, orderBies);
    }

  }

  // insert

  public int insert(final hr3.springboot.poc.hotrod.PedidoImpl vo) {
    String id = "hr3.springboot.poc.hotrod.primitives.pedido.insert";
    int rows = this.sqlSession.insert(id, vo);
    return rows;
  }

  // update by PK

  public int update(final hr3.springboot.poc.hotrod.PedidoImpl vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("hr3.springboot.poc.hotrod.primitives.pedido.updateByPK", vo);
  }

  // delete by PK

  public int delete(final hr3.springboot.poc.hotrod.PedidoImpl vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.delete("hr3.springboot.poc.hotrod.primitives.pedido.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final hr3.springboot.poc.hotrod.PedidoImpl example, final hr3.springboot.poc.hotrod.PedidoImpl updateValues) {
    UpdateByExampleDao<hr3.springboot.poc.hotrod.PedidoImpl> fvd = //
      new UpdateByExampleDao<hr3.springboot.poc.hotrod.PedidoImpl>(example, updateValues);
    return this.sqlSession.update("hr3.springboot.poc.hotrod.primitives.pedido.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final hr3.springboot.poc.hotrod.PedidoImpl example) {
    return this.sqlSession.delete("hr3.springboot.poc.hotrod.primitives.pedido.deleteByExample", example);
  }

  // DAO ordering

  public enum PedidoOrderBy implements OrderBy {

    ID("trx_request", "req_id", true), //
    ID$DESC("trx_request", "req_id", false), //
    TIMESTAMP("trx_request", "req_timestamp", true), //
    TIMESTAMP$DESC("trx_request", "req_timestamp", false), //
    DESCRIPCION("trx_request", "req_desc", true), //
    DESCRIPCION$DESC("trx_request", "req_desc", false), //
    DESCRIPCION$CASEINSENSITIVE("trx_request", "lower(req_desc)", true), //
    DESCRIPCION$CASEINSENSITIVE_STABLE_FORWARD("trx_request", "lower(req_desc), req_desc", true), //
    DESCRIPCION$CASEINSENSITIVE_STABLE_REVERSE("trx_request", "lower(req_desc), req_desc", false), //
    DESCRIPCION$DESC_CASEINSENSITIVE("trx_request", "lower(req_desc)", false), //
    DESCRIPCION$DESC_CASEINSENSITIVE_STABLE_FORWARD("trx_request", "lower(req_desc), req_desc", false), //
    DESCRIPCION$DESC_CASEINSENSITIVE_STABLE_REVERSE("trx_request", "lower(req_desc), req_desc", true), //
    ID_PERSONA("trx_request", "per_id", true), //
    ID_PERSONA$DESC("trx_request", "per_id", false);

    private PedidoOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static PedidoTable newTable() {
    return new PedidoTable();
  }

  public static PedidoTable newTable(final String alias) {
    return new PedidoTable(alias);
  }

  public static class PedidoTable extends Table {

    // Properties

    public NumberColumn id;
    public DateTimeColumn timestamp;
    public StringColumn descripcion;
    public NumberColumn idPersona;

    // Constructors

    PedidoTable() {
      super(null, null, "TRX_REQUEST", "Table", null);
      initialize();
    }

    PedidoTable(final String alias) {
      super(null, null, "TRX_REQUEST", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "REQ_ID", "id");
      this.timestamp = new DateTimeColumn(this, "REQ_TIMESTAMP", "timestamp");
      this.descripcion = new StringColumn(this, "REQ_DESC", "descripcion");
      this.idPersona = new NumberColumn(this, "PER_ID", "idPersona");
    }

  }

}
