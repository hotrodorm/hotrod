// Autogenerated by HotRod -- Do not edit.

package app5.persistence.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app5.persistence.TransactionVO;
import app5.persistence.AccountVO;
import app5.persistence.primitives.AccountDAO;
import app5.persistence.FederalBranchVO;
import app5.persistence.primitives.FederalBranchDAO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class TransactionDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private FederalBranchDAO federalBranchDAO;

  @Autowired
  private AccountDAO accountDAO;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public app5.persistence.TransactionVO selectByPK(final java.lang.Integer seqId) {
    if (seqId == null)
      return null;
    app5.persistence.TransactionVO vo = new app5.persistence.TransactionVO();
    vo.setSeqId(seqId);
    return this.sqlSession.selectOne("app5.persistence.primitives.transaction.selectByPK", vo);
  }

  // select by unique indexes

  public app5.persistence.TransactionVO selectByUIAccountIdTime(final java.lang.Integer accountId, final java.lang.String time) {
    if (accountId == null)
      return null;
    if (time == null)
      return null;
    app5.persistence.TransactionVO vo = new app5.persistence.TransactionVO();
    vo.setAccountId(accountId);
    vo.setTime(time);
    return this.sqlSession.selectOne("app5.persistence.primitives.transaction.selectByUIAccountIdTime", vo);
  }

  // select by example

  public List<app5.persistence.TransactionVO> selectByExample(final app5.persistence.TransactionVO example, final TransactionOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.TransactionVO, TransactionOrderBy> dwo = //
        new DaoWithOrder<app5.persistence.TransactionVO, TransactionOrderBy>(example, orderBies);
    return this.sqlSession.selectList("app5.persistence.primitives.transaction.selectByExample", dwo);
  }

  public Cursor<app5.persistence.TransactionVO> selectByExampleCursor(final app5.persistence.TransactionVO example, final TransactionOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.TransactionVO, TransactionOrderBy> dwo = //
        new DaoWithOrder<app5.persistence.TransactionVO, TransactionOrderBy>(example, orderBies);
    return new MyBatisCursor<app5.persistence.TransactionVO>(this.sqlSession.selectCursor("app5.persistence.primitives.transaction.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app5.persistence.TransactionVO> selectByCriteria(final TransactionDAO.TransactionTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app5.persistence.TransactionVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "app5.persistence.primitives.transaction.selectByCriteria");
  }

  // select parent(s) by FKs

  public SelectParentAccountPhase selectParentAccountOf(final TransactionVO vo) {
    return new SelectParentAccountPhase(vo);
  }

  public class SelectParentAccountPhase {

    private TransactionVO vo;

    SelectParentAccountPhase(final TransactionVO vo) {
      this.vo = vo;
    }

    public SelectParentAccountFromAccountIdPhase fromAccountId() {
      return new SelectParentAccountFromAccountIdPhase(this.vo);
    }

  }

  public class SelectParentAccountFromAccountIdPhase {

    private TransactionVO vo;

    SelectParentAccountFromAccountIdPhase(final TransactionVO vo) {
      this.vo = vo;
    }

    public AccountVO toId() {
      return accountDAO.selectByPK(this.vo.accountId);
    }

  }

  public SelectParentFederalBranchPhase selectParentFederalBranchOf(final TransactionVO vo) {
    return new SelectParentFederalBranchPhase(vo);
  }

  public class SelectParentFederalBranchPhase {

    private TransactionVO vo;

    SelectParentFederalBranchPhase(final TransactionVO vo) {
      this.vo = vo;
    }

    public SelectParentFederalBranchFromFedBranchIdPhase fromFedBranchId() {
      return new SelectParentFederalBranchFromFedBranchIdPhase(this.vo);
    }

  }

  public class SelectParentFederalBranchFromFedBranchIdPhase {

    private TransactionVO vo;

    SelectParentFederalBranchFromFedBranchIdPhase(final TransactionVO vo) {
      this.vo = vo;
    }

    public FederalBranchVO toId() {
      return federalBranchDAO.selectByPK(this.vo.fedBranchId);
    }

  }

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public int insert(final app5.persistence.TransactionVO vo) {
    return insert(vo, false);
  }

  public int insert(final app5.persistence.TransactionVO vo, final boolean retrieveDefaults) {
    String id = retrieveDefaults ? "app5.persistence.primitives.transaction.insertRetrievingDefaults" : "app5.persistence.primitives.transaction.insert";
    int rows = this.sqlSession.insert(id, vo);
    return rows;
  }

  // update by PK

  public int update(final app5.persistence.TransactionVO vo) {
    if (vo.seqId == null) return 0;
    return this.sqlSession.update("app5.persistence.primitives.transaction.updateByPK", vo);
  }

  // delete by PK

  public int delete(final app5.persistence.TransactionVO vo) {
    if (vo.seqId == null) return 0;
    return this.sqlSession.delete("app5.persistence.primitives.transaction.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final app5.persistence.TransactionVO example, final app5.persistence.TransactionVO updateValues) {
    UpdateByExampleDao<app5.persistence.TransactionVO> fvd = //
      new UpdateByExampleDao<app5.persistence.TransactionVO>(example, updateValues);
    return this.sqlSession.update("app5.persistence.primitives.transaction.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final app5.persistence.TransactionVO example) {
    return this.sqlSession.delete("app5.persistence.primitives.transaction.deleteByExample", example);
  }

  // DAO ordering

  public enum TransactionOrderBy implements OrderBy {

    ACCOUNT_ID("transaction", "account_id", true), //
    ACCOUNT_ID$DESC("transaction", "account_id", false), //
    SEQ_ID("transaction", "seq_id", true), //
    SEQ_ID$DESC("transaction", "seq_id", false), //
    TIME("transaction", "time", true), //
    TIME$DESC("transaction", "time", false), //
    TIME$CASEINSENSITIVE("transaction", "lower(time)", true), //
    TIME$CASEINSENSITIVE_STABLE_FORWARD("transaction", "lower(time), time", true), //
    TIME$CASEINSENSITIVE_STABLE_REVERSE("transaction", "lower(time), time", false), //
    TIME$DESC_CASEINSENSITIVE("transaction", "lower(time)", false), //
    TIME$DESC_CASEINSENSITIVE_STABLE_FORWARD("transaction", "lower(time), time", false), //
    TIME$DESC_CASEINSENSITIVE_STABLE_REVERSE("transaction", "lower(time), time", true), //
    AMOUNT("transaction", "amount", true), //
    AMOUNT$DESC("transaction", "amount", false), //
    FED_BRANCH_ID("transaction", "fed_branch_id", true), //
    FED_BRANCH_ID$DESC("transaction", "fed_branch_id", false);

    private TransactionOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static TransactionTable newTable() {
    return new TransactionTable();
  }

  public static TransactionTable newTable(final String alias) {
    return new TransactionTable(alias);
  }

  public static class TransactionTable extends Table {

    // Properties

    public NumberColumn accountId;
    public NumberColumn seqId;
    public StringColumn time;
    public NumberColumn amount;
    public NumberColumn fedBranchId;

    // Constructors

    TransactionTable() {
      super(null, null, "transaction", "Table", null);
      initialize();
    }

    TransactionTable(final String alias) {
      super(null, null, "transaction", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.accountId = new NumberColumn(this, "account_id", "accountId");
      this.seqId = new NumberColumn(this, "seq_id", "seqId");
      this.time = new StringColumn(this, "time", "time");
      this.amount = new NumberColumn(this, "amount", "amount");
      this.fedBranchId = new NumberColumn(this, "fed_branch_id", "fedBranchId");
    }

  }

}
