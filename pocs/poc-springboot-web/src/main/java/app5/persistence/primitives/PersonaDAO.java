// Autogenerated by HotRod -- Do not edit.

package app5.persistence.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app5.persistence.PersonaVO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class PersonaDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public app5.persistence.PersonaVO selectByPK(final java.lang.Long id) {
    if (id == null)
      return null;
    app5.persistence.PersonaVO vo = new app5.persistence.PersonaVO();
    vo.setId(id);
    return this.sqlSession.selectOne("app5.persistence.primitives.persona.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app5.persistence.PersonaVO> selectByExample(final app5.persistence.PersonaVO example, final PersonaOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.PersonaVO, PersonaOrderBy> dwo = //
        new DaoWithOrder<app5.persistence.PersonaVO, PersonaOrderBy>(example, orderBies);
    return this.sqlSession.selectList("app5.persistence.primitives.persona.selectByExample", dwo);
  }

  public Cursor<app5.persistence.PersonaVO> selectByExampleCursor(final app5.persistence.PersonaVO example, final PersonaOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.PersonaVO, PersonaOrderBy> dwo = //
        new DaoWithOrder<app5.persistence.PersonaVO, PersonaOrderBy>(example, orderBies);
    return new MyBatisCursor<app5.persistence.PersonaVO>(this.sqlSession.selectCursor("app5.persistence.primitives.persona.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app5.persistence.PersonaVO> selectByCriteria(final PersonaDAO.PersonaTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app5.persistence.PersonaVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "app5.persistence.primitives.persona.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public int insert(final app5.persistence.PersonaVO vo) {
    String id = "app5.persistence.primitives.persona.insert";
    int rows = this.sqlSession.insert(id, vo);
    return rows;
  }

  // update by PK

  public int update(final app5.persistence.PersonaVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("app5.persistence.primitives.persona.updateByPK", vo);
  }

  // delete by PK

  public int delete(final app5.persistence.PersonaVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.delete("app5.persistence.primitives.persona.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final app5.persistence.PersonaVO example, final app5.persistence.PersonaVO updateValues) {
    UpdateByExampleDao<app5.persistence.PersonaVO> fvd = //
      new UpdateByExampleDao<app5.persistence.PersonaVO>(example, updateValues);
    return this.sqlSession.update("app5.persistence.primitives.persona.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final app5.persistence.PersonaVO example) {
    return this.sqlSession.delete("app5.persistence.primitives.persona.deleteByExample", example);
  }

  // DAO ordering

  public enum PersonaOrderBy implements OrderBy {

    ID("pty_persona", "id", true), //
    ID$DESC("pty_persona", "id", false), //
    NOMBRE("pty_persona", "nombre", true), //
    NOMBRE$DESC("pty_persona", "nombre", false), //
    NOMBRE$CASEINSENSITIVE("pty_persona", "lower(nombre)", true), //
    NOMBRE$CASEINSENSITIVE_STABLE_FORWARD("pty_persona", "lower(nombre), nombre", true), //
    NOMBRE$CASEINSENSITIVE_STABLE_REVERSE("pty_persona", "lower(nombre), nombre", false), //
    NOMBRE$DESC_CASEINSENSITIVE("pty_persona", "lower(nombre)", false), //
    NOMBRE$DESC_CASEINSENSITIVE_STABLE_FORWARD("pty_persona", "lower(nombre), nombre", false), //
    NOMBRE$DESC_CASEINSENSITIVE_STABLE_REVERSE("pty_persona", "lower(nombre), nombre", true), //
    APELLIDO("pty_persona", "apellido", true), //
    APELLIDO$DESC("pty_persona", "apellido", false), //
    APELLIDO$CASEINSENSITIVE("pty_persona", "lower(apellido)", true), //
    APELLIDO$CASEINSENSITIVE_STABLE_FORWARD("pty_persona", "lower(apellido), apellido", true), //
    APELLIDO$CASEINSENSITIVE_STABLE_REVERSE("pty_persona", "lower(apellido), apellido", false), //
    APELLIDO$DESC_CASEINSENSITIVE("pty_persona", "lower(apellido)", false), //
    APELLIDO$DESC_CASEINSENSITIVE_STABLE_FORWARD("pty_persona", "lower(apellido), apellido", false), //
    APELLIDO$DESC_CASEINSENSITIVE_STABLE_REVERSE("pty_persona", "lower(apellido), apellido", true), //
    FECHA_NACIMIENTO("pty_persona", "per_fecha_nac", true), //
    FECHA_NACIMIENTO$DESC("pty_persona", "per_fecha_nac", false);

    private PersonaOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static PersonaTable newTable() {
    return new PersonaTable();
  }

  public static PersonaTable newTable(final String alias) {
    return new PersonaTable(alias);
  }

  public static class PersonaTable extends Table {

    // Properties

    public NumberColumn id;
    public StringColumn nombre;
    public StringColumn apellido;
    public DateTimeColumn fechaNacimiento;

    // Constructors

    PersonaTable() {
      super(null, null, "PTY_PERSONA", "Table", null);
      initialize();
    }

    PersonaTable(final String alias) {
      super(null, null, "PTY_PERSONA", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "ID", "id");
      this.nombre = new StringColumn(this, "NOMBRE", "nombre");
      this.apellido = new StringColumn(this, "APELLIDO", "apellido");
      this.fechaNacimiento = new DateTimeColumn(this, "PER_FECHA_NAC", "fechaNacimiento");
    }

  }

}
