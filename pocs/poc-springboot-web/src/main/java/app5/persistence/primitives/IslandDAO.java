// Autogenerated by HotRod -- Do not edit.

package app5.persistence.primitives;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app5.persistence.primitives.AbstractIslandVO;
import app5.persistence.IslandVO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class IslandDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // Row Parser

  public static app5.persistence.IslandVO parseRow(Map<String, Object> m) {
    app5.persistence.IslandVO mo = new app5.persistence.IslandVO();
    mo.setId((java.lang.Integer) m.get("id"));
    mo.setSegment((java.lang.Integer) m.get("segment"));
    mo.setXStart((java.lang.Integer) m.get("xStart"));
    mo.setXEnd((java.lang.Integer) m.get("xEnd"));
    mo.setHeight((java.lang.Integer) m.get("height"));
    return mo;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<app5.persistence.IslandVO> selectByExample(final app5.persistence.primitives.AbstractIslandVO example, final IslandOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.primitives.AbstractIslandVO, IslandOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("app5.persistence.primitives.island.selectByExample", dwo);
  }

  public Cursor<app5.persistence.IslandVO> selectByExampleCursor(final app5.persistence.primitives.AbstractIslandVO example, final IslandOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.primitives.AbstractIslandVO, IslandOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app5.persistence.IslandVO>(this.sqlSession.selectCursor("app5.persistence.primitives.island.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app5.persistence.IslandVO> selectByCriteria(final IslandDAO.IslandTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app5.persistence.IslandVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "app5.persistence.primitives.island.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app5.persistence.IslandVO insert(final app5.persistence.primitives.AbstractIslandVO vo) {
    String id = "app5.persistence.primitives.island.insert";
    this.sqlSession.insert(id, vo);
    app5.persistence.IslandVO mo = new app5.persistence.IslandVO();
    mo.setId(vo.getId());
    mo.setSegment(vo.getSegment());
    mo.setXStart(vo.getXStart());
    mo.setXEnd(vo.getXEnd());
    mo.setHeight(vo.getHeight());
    return mo;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int updateByExample(final app5.persistence.primitives.AbstractIslandVO example, final app5.persistence.primitives.AbstractIslandVO updateValues) {
    UpdateByExampleDao<app5.persistence.primitives.AbstractIslandVO> fvd = //
      new UpdateByExampleDao<app5.persistence.primitives.AbstractIslandVO>(example, updateValues);
    return this.sqlSession.update("app5.persistence.primitives.island.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final app5.persistence.primitives.AbstractIslandVO example) {
    return this.sqlSession.delete("app5.persistence.primitives.island.deleteByExample", example);
  }

  // DAO ordering

  public enum IslandOrderBy implements OrderBy {

    ID("island", "id", true), //
    ID$DESC("island", "id", false), //
    SEGMENT("island", "segment", true), //
    SEGMENT$DESC("island", "segment", false), //
    X_START("island", "x_start", true), //
    X_START$DESC("island", "x_start", false), //
    X_END("island", "x_end", true), //
    X_END$DESC("island", "x_end", false), //
    HEIGHT("island", "height", true), //
    HEIGHT$DESC("island", "height", false);

    private IslandOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static IslandTable newTable() {
    return new IslandTable();
  }

  public static IslandTable newTable(final String alias) {
    return new IslandTable(alias);
  }

  public static class IslandTable extends Table {

    // Properties

    public NumberColumn id;
    public NumberColumn segment;
    public NumberColumn xStart;
    public NumberColumn xEnd;
    public NumberColumn height;

    // Constructors

    IslandTable() {
      super(null, null, "island", "Table", null);
      initialize();
    }

    IslandTable(final String alias) {
      super(null, null, "island", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id");
      this.segment = new NumberColumn(this, "segment", "segment");
      this.xStart = new NumberColumn(this, "x_start", "xStart");
      this.xEnd = new NumberColumn(this, "x_end", "xEnd");
      this.height = new NumberColumn(this, "height", "height");
    }

  }

}
