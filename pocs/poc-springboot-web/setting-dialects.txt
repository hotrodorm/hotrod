* In the application.properties file a dialect can be set. If I wanted to designate H2 as the dialect:

livesql.dialect.name=H2
livesql.dialect.databaseName=H2
livesql.dialect.versionString="1.4.197 (2018-03-18)"
livesql.dialect.majorVersion=1
livesql.dialect.minorVersion=4

* Then the application resolves the dialect as "designated as H2":

2020-10-20 08:08:31 INFO  [1] SQLDialectConfiguration(117): Dialect designated as H2Dialect [databaseName=H2, databaseVersion="1.4.197 (2018-03-18)", databaseMajorVersion=1, databaseMinorVersion=4]

* If the properties are not set (or commented out) the dialect is "discovered as PostgreSQL":

2020-10-20 08:10:19 INFO  [1] SQLDialectConfiguration(117): Dialect discovered as PostgreSQLDialect [databaseName=PostgreSQL, databaseVersion=12.4 (Debian 12.4-1.pgdg90+1), databaseMajorVersion=12, databaseMinorVersion=4]

* If the properties are incomplete (or incorrectly set) it automatically falls back to discovery mode, as shown below:

2020-10-20 10:19:09 WARN  [1] SQLDialectConfiguration(210): Could not designate the SQL dialect. The 'livesql.dialect.minorVersion' property is empty or unset -- falling back to dialect discovery mode.
2020-10-20 10:19:09 INFO  [1] SQLDialectConfiguration(212): A sample value for this property can be retrieved from the getDatabaseMinorVersion() method of the JDBC metadata. This property helps to identify the SQL subdialect: for example, the Oracle 12.1 SQL subdialect implements OFFSET differently compared to older versions.
2020-10-20 10:19:09 INFO  [1] SQLDialectConfiguration(117): Dialect discovered as PostgreSQLDialect [databaseName=PostgreSQL, databaseVersion=12.4 (Debian 12.4-1.pgdg90+1), databaseMajorVersion=12, databaseMinorVersion=4]
