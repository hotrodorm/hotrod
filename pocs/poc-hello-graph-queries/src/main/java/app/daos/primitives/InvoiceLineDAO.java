// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.InvoiceLine;
import app.daos.InvoiceLineVO;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.LiveSQLMapper;
import org.hotrod.runtime.livesql.util.CastUtil;
import javax.annotation.PostConstruct;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.hotrod.runtime.livesql.queries.LiveSQLContext;
import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class InvoiceLineDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private LiveSQLMapper liveSQLMapper;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  private LiveSQLContext context;

  @PostConstruct
  public void initializeContext() {
    this.context = new LiveSQLContext(this.liveSQLDialect, this.sqlSession, this.liveSQLMapper);
  }

  // Row Parser

  public app.daos.InvoiceLineVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.InvoiceLineVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.InvoiceLineVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.InvoiceLineVO mo = this.applicationContext.getBean(app.daos.InvoiceLineVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setInvoiceId(CastUtil.toInteger((Number) m.get(p + "invoiceId" + s)));
    mo.setProductId(CastUtil.toInteger((Number) m.get(p + "productId" + s)));
    mo.setQty(CastUtil.toInteger((Number) m.get(p + "qty" + s)));
    return mo;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<app.daos.InvoiceLineVO> select(final app.daos.primitives.InvoiceLine example, final InvoiceLineOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.InvoiceLine, InvoiceLineOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.invoiceLine.selectByExample", dwo);
  }

  public Cursor<app.daos.InvoiceLineVO> selectCursor(final app.daos.primitives.InvoiceLine example, final InvoiceLineOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.InvoiceLine, InvoiceLineOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.InvoiceLineVO>(this.sqlSession.selectCursor("mappers.invoiceLine.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.InvoiceLineVO> select(final InvoiceLineDAO.InvoiceLineTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.InvoiceLineVO>(this.context, "mappers.invoiceLine.selectByCriteria",
        from, predicate);
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.InvoiceLineVO insert(final app.daos.primitives.InvoiceLine vo) {
    String id = "mappers.invoiceLine.insert";
    this.sqlSession.insert(id, vo);
    app.daos.InvoiceLineVO mo = springBeanObjectFactory.create(app.daos.InvoiceLineVO.class);
    mo.setInvoiceId(vo.getInvoiceId());
    mo.setProductId(vo.getProductId());
    mo.setQty(vo.getQty());
    return mo;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int update(final app.daos.primitives.InvoiceLine example, final app.daos.primitives.InvoiceLine updateValues) {
    UpdateByExampleDao<app.daos.primitives.InvoiceLine> fvd = //
      new UpdateByExampleDao<app.daos.primitives.InvoiceLine>(example, updateValues);
    return this.sqlSession.update("mappers.invoiceLine.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.InvoiceLine updateValues, final InvoiceLineDAO.InvoiceLineTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getInvoiceId() != null) values.put("invoice_id", updateValues.getInvoiceId());
    if (updateValues.getProductId() != null) values.put("product_id", updateValues.getProductId());
    if (updateValues.getQty() != null) values.put("qty", updateValues.getQty());
    return new UpdateSetCompletePhase(this.context, "mappers.invoiceLine.updateByCriteria", tableOrView,  predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.InvoiceLine example) {
    return this.sqlSession.delete("mappers.invoiceLine.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final InvoiceLineDAO.InvoiceLineTable from, final Predicate predicate) {
    return new DeleteWherePhase(this.context, "mappers.invoiceLine.deleteByCriteria", from, predicate);
  }

  // DAO ordering

  public enum InvoiceLineOrderBy implements OrderBy {

    INVOICE_ID("invoice_line", "invoice_id", true), //
    INVOICE_ID$DESC("invoice_line", "invoice_id", false), //
    PRODUCT_ID("invoice_line", "product_id", true), //
    PRODUCT_ID$DESC("invoice_line", "product_id", false), //
    QTY("invoice_line", "qty", true), //
    QTY$DESC("invoice_line", "qty", false);

    private InvoiceLineOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static InvoiceLineTable newTable() {
    return new InvoiceLineTable();
  }

  public static InvoiceLineTable newTable(final String alias) {
    return new InvoiceLineTable(alias);
  }

  public static class InvoiceLineTable extends Table {

    // Properties

    public NumberColumn invoiceId;
    public NumberColumn productId;
    public NumberColumn qty;

    // Getters

    public AllColumns star() {
      return new AllColumns(this.invoiceId, this.productId, this.qty);
    }

    // Constructors

    InvoiceLineTable() {
      super(null, null, "INVOICE_LINE", "Table", null);
      initialize();
    }

    InvoiceLineTable(final String alias) {
      super(null, null, "INVOICE_LINE", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      this.invoiceId = new NumberColumn(this, "INVOICE_ID", "invoiceId", "INTEGER", 32, 0);
      super.columns.add(this.invoiceId);
      this.productId = new NumberColumn(this, "PRODUCT_ID", "productId", "INTEGER", 32, 0);
      super.columns.add(this.productId);
      this.qty = new NumberColumn(this, "QTY", "qty", "INTEGER", 32, 0);
      super.columns.add(this.qty);
    }

  }

}
