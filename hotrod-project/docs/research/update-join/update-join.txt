# Update with Join

The UPDATE statement can take three different forms:

1. Plain UPDATE

This can be a simple UPDATE from SQL-92 with or without subqueries. For example:

UPDATE t SET a = 1, b = 2 WHERE c > 10;

UPDATE t SET a = 1, b = (select d from u where u.id = t.id) WHERE c > 10;

2. UPDATE with Join

This is a form that joins one or more tables with the table being updated, and values can
be set from the joined tables to update the main one. For example:

UPDATE t
SET t.a = u.e + v.f, t.b = u.d
FROM u -- some dbs require the first joined table to use FROM
LEFT JOIN v on ...
WHERE u.id = t.id
  AND t.c > 10;

UPDATE t
SET t.a = u.e + v.f, t.b = u.d
JOIN u -- other dbs accept FROM or [LEFT|RIGHT] JOIN
LEFT JOIN v on ...
WHERE u.id = t.id
  AND t.c > 10;

3. UPDATE with subqueries

This is the most advanced form and can use complex subqueries to retrieve the related values. 
Unlike the second form, this form requires the subquery to have a max cardinalty of 1 for each
row of the table being updated (quite nice!). For example:

update invoice i
set (tax_rule_name, tax_law, tax_percent) = (
  select name, law, percent
  from tax_rule r
  where r.id = i.tax_rule_id
)
where branch_id = 10;


 
## Oracle - Form #3

Fiddle: https://dbfiddle.uk/qfRzqY5k

create table invoice (
  id number(6),
  amount number(6),
  branch_id number(6),
  tax_rule_id number(6),
  tax_rule_name varchar2(25),
  tax_law varchar2(15),
  tax_percent decimal(6, 2)
);

insert into invoice (id, amount, branch_id, tax_rule_id, tax_rule_name, tax_law, tax_percent) values
  (1, 100, 10, 201, -1, 'pending', -1);
insert into invoice (id, amount, branch_id, tax_rule_id, tax_rule_name, tax_law, tax_percent) values
  (2, 101, 20, 201, -1, 'pending', -1);
insert into invoice (id, amount, branch_id, tax_rule_id, tax_rule_name, tax_law, tax_percent) values
  (3, 102, 10, 202, -1, 'pending', -1);
insert into invoice (id, amount, branch_id, tax_rule_id, tax_rule_name, tax_law, tax_percent) values
  (4, 103, 10, 203, -1, 'pending', -1);
  
create table tax_rule (
  id number(6) primary key not null,
  name varchar2(25),
  law varchar2(15),
  percent decimal(6, 2)
);

insert into tax_rule (id, name, law, percent) values
  (201, 'Rule 201', 'Law #501', 5.25);
insert into tax_rule (id, name, law, percent) values
  (202, 'Rule 202', 'Law #502', 8.15);
  
update invoice i
set (tax_rule_name, tax_law, tax_percent) = (
  select name, law, percent
  from tax_rule r
  where r.id = i.tax_rule_id
)
where branch_id = 10;

-- Multiple matches are not allowed per updated row.
-- Updated rows with no matches are set to null.

## DB2 - Form #3

Fiddle: https://dbfiddle.uk/9lSqbhIS

create table invoice (
  id int,
  amount int,
  branch_id int,
  tax_rule_id int,
  tax_rule_name varchar(25),
  tax_law varchar(15),
  tax_percent decimal(6, 2)
);

insert into invoice (id, amount, branch_id, tax_rule_id, tax_rule_name, tax_law, tax_percent) values
  (1, 100, 10, 201, -1, 'pending', -1),
  (2, 101, 20, 201, -1, 'pending', -1),
  (3, 102, 10, 202, -1, 'pending', -1),
  (4, 103, 10, 203, -1, 'pending', -1);
  
create table tax_rule (
  id int primary key not null,
  name varchar(25),
  law varchar(15),
  percent decimal(6, 2)
);

insert into tax_rule (id, name, law, percent) values
  (201, 'Rule 201', 'Law #501', 5.25),
  (202, 'Rule 202', 'Law #502', 8.15);
  
update invoice i
set (tax_rule_name, tax_law, tax_percent) = (
  select name, law, percent
  from tax_rule r
  where r.id = i.tax_rule_id
)
where branch_id = 10;

-- Multiple matches are not allowed per updated row.
-- Updated rows with no matches are set to null.

## PostgreSQL - Form #3

Fiddle: https://dbfiddle.uk/PLiRRt3d

create table invoice (
  id int,
  amount int,
  branch_id int,
  tax_rule_id int,
  tax_rule_name varchar(25),
  tax_law varchar(15),
  tax_percent decimal(6, 2)
);

insert into invoice (id, amount, branch_id, tax_rule_id, tax_rule_name, tax_law, tax_percent) values
  (1, 100, 10, 201, -1, 'pending', -1),
  (2, 101, 20, 201, -1, 'pending', -1),
  (3, 102, 10, 202, -1, 'pending', -1),
  (4, 103, 10, 203, -1, 'pending', -1);
  
create table tax_rule (
  id int primary key not null,
  name varchar(25),
  law varchar(15),
  percent decimal(6, 2)
);

insert into tax_rule (id, name, law, percent) values
  (201, 'Rule 201', 'Law #501', 5.25),
  (202, 'Rule 202', 'Law #502', 8.15);
  
update invoice i
set (tax_rule_name, tax_law, tax_percent) = (
  select name, law, percent
  from tax_rule r
  where r.id = i.tax_rule_id
)
where branch_id = 10;
  
-- Multiple matches are not allowed per updated row.
-- Updated rows with no matches are set to null.

