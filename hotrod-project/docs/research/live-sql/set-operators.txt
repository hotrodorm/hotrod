
 - Implement UNION, UNION ALL, INTERSECT, EXCEPT.
      y SELECT columns
      y FROM/JOIN
      y WHERE
      y GROUP BY
      y HAVING
      x ORDER BY
      x OFFSET
      x LIMIT
 :: Partially implemented. Pending:
      - Support ORDER BY in combined queries. ORDER BY can only probably use column aliases (see PostgreSQL). Need to research other databases.
      - Enclosing SELECTs is not working.
      - Allow ORDER BY in inner queries. Does MySQL supports this?
      

1. Same level
   ‾‾‾‾‾‾‾‾‾‾
  sql.select(a.col1, a.col2)
     .from(a)
     .union() // produces a "CombiningSelectPhase" object
     .select(b.col3, b.col4)
     .from(b)
     .orderBy(a.col1)
     .execute()

2. Parenthesis are easy to write on the second query expression and subsequent ones.
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  sql.select(a.col1, a.col2)
     .from(a)
     .union(
         sql.select(b.col3, b.col4)
            .from(b)
            .except()
            .select(c.col5, c.col6)
            .from(c)
     )
     .orderBy(a.col1)
     .execute()

3. Parenthesis that include the first query expression.
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   
  sql.enclose(
      sql.select(a.col1, a.col2)
         .from(a)
         .union()
         .select(b.col3, b.col4)
         .from(b)
      )
      .intersect()
      .select(c.col5, c.col6)
      .from(c)
      .orderBy(a.col1)
   
_____________________________________________________________

  SELECT --- "Select", named
  FROM
  WHERE
  GROUP BY
  HAVING

    <set-operator> --- "Combinable Select", named or unnamed
    SELECT
    FROM
    WHERE
    GROUP BY
    HAVING

  ORDER
  OFFSET
  LIMIT   

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
