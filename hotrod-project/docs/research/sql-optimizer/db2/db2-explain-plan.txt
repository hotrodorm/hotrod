Prepare the explain plan functionality on your user. You'll need to do this only the first time 
this specific user performs the explain plan funcitonality. SSH to the database server. Then:

* Connect to the database:
 db2 connect to empusa
 
* Initialize DB2's explain tables:
 db2 -tf sqllib/misc/EXPLAIN.DDL

* [UNTESTED] Alternative way to create the tables (untested) through JDBC:
 CALL SYSPROC.SYSINSTALLOBJECTS('EXPLAIN', 'C', CAST (NULL AS VARCHAR(128)), CAST (NULL AS VARCHAR(128)))

Now, through JDBC (or SQL) run the explain command on your SQL. For example:

Recording the execution cost:
-----------------------------

* First, choose a unique name to identify the query. For example 'myapp.query001'. Use this name in the queries. 

delete from explain_statement where querytag='myapp.query001';

explain plan set querytag='myapp.query001' for     
 select t.*, a.current_balance, a.name as account_name, b.name as branch_name
   from transaction t
   join account a on t.account_id = a.id
   join federal_branch b on t.fed_branch_id = b.id
   where a.current_balance >= 200 
     and t.amount < 100

Showing the execution cost tree using SQL:
------------------------------------------

The join order is read by higher depth first; at same depth, use the latter first.


with statement as (
  select * from explain_statement where querytag='myapp.query001'
),
node_cost as (
select s.stream_id,
    case when s.source_type = 'D' then '[' || s.object_name || ']' else trim(so.operator_type) end as source,
    case when s.target_type = 'D' then '[' || s.object_name || ']' else trim(to.operator_type) end as target,
    s.source_type, s.source_id, s.target_type, s.target_id, s.object_name,
    so.operator_id as source_op_id, so.operator_type as source_op_type, so.total_cost as source_op_cost, so.io_cost as source_op_io_cost, so.cpu_cost as source_op_cpu_cost,
    to.operator_id as target_op_id, to.operator_type as target_op_type, to.total_cost as target_op_cost, to.io_cost as target_op_io_cost, to.cpu_cost as target_op_cpu_cost
  from statement st
  join explain_stream s on 
    (st.explain_requester, st.explain_time, st.source_name, st.source_schema, st.source_version, st.explain_level, st.stmtno, st.sectno) = 
    (s.explain_requester, s.explain_time, s.source_name, s.source_schema, s.source_version, s.explain_level, s.stmtno, s.sectno )
  left outer join explain_operator so on
    (so.operator_id, so.explain_requester, so.explain_time, so.source_name, so.source_schema, so.source_version, so.explain_level, so.stmtno, so.sectno) = 
    (s.source_id, s.explain_requester, s.explain_time, s.source_name, s.source_schema, s.source_version, s.explain_level, s.stmtno, s.sectno )
  left outer join explain_operator to on
    (to.operator_id, to.explain_requester, to.explain_time, to.source_name, to.source_schema, to.source_version, to.explain_level, to.stmtno, to.sectno) = 
    (s.target_id, s.explain_requester, s.explain_time, s.source_name, s.source_schema, s.source_version, s.explain_level, s.stmtno, s.sectno )
union
select 0, 'RETURN', null, 'O', so.operator_id, null, null, null, so.operator_id, 'RETURN', so.total_cost, so.io_cost, so.cpu_cost, null, null, null, null, null
  from statement st
  join explain_operator so on
    (so.explain_requester, so.explain_time, so.source_name, so.source_schema, so.source_version, so.explain_level, so.stmtno, so.sectno) = 
    (st.explain_requester, st.explain_time, st.source_name, st.source_schema, st.source_version, st.explain_level, st.stmtno, st.sectno )
  where so.operator_type = 'RETURN'
)
select
    -- level,
    repeat('.  ', stream_id + level - 1 - stream_id ) || 
    case when source_op_cost is null then '' else '$' || cast(source_op_cost as bigint) || ' ' end ||
    source ||
    case when source_op_io_cost is null then '' else ' (' || cast(source_op_io_cost as bigint) || ' io)' end ||
    case when source_op_cpu_cost is null then '' else ' (' || cast(source_op_cpu_cost as bigint) || ' cpu)' end
    as path,
    -- sys_connect_by_path(source, ' > ') as path2,
    -- level,
    n.*
  from node_cost n
  start with source_op_type = 'RETURN'
  connect by prior source_id = target_id

Returns:
--------

  $20 RETURN (3 io) (176250 cpu)
  .  $20 NLJOIN (3 io) (176250 cpu)
  .  .  $13 NLJOIN (2 io) (119100 cpu)
  .  .  .  $6 TBSCAN (1 io) (58816 cpu)
  .  .  .  .  [ACCOUNT]
  .  .  .  $6 FETCH (1 io) (60284 cpu)
  .  .  .  .  $0 IXSCAN (0 io) (44116 cpu)
  .  .  .  .  .  [TX_ACCOUNT_ID_TIME]
  .  .  .  .  [TRANSACTION]
  .  .  $6 FETCH (1 io) (57150 cpu)
  .  .  .  $0 IXSCAN (0 io) (42330 cpu)
  .  .  .  .  [SQL170826101531560]
  .  .  .  [FEDERAL_BRANCH]


Where (* means I somewhat understand them):
------
  [object-name]
  DELETE  Delete
  EISCAN  Extended Index Scan
* FETCH   Fetch
  FILTER  Filter rows
  GENROW  Generate Row
  GRPBY   Group By
* HSJOIN  Hash Join
  INSERT  Insert
* IXAND   Dynamic Bitmap Index ANDing
* IXSCAN  Relational index scan
* MSJOIN  Merge Scan Join
* NLJOIN  Nested loop Join
* RETURN  Result
* RIDSCN  Row Identifier (RID) Scan
  RPD     Remote PushDown
  SHIP    Ship query to remote system
* SORT    Sort
* TBSCAN  Table Scan
  TEMP    Temporary Table Construction
  TQ      Table Queue
  UNION   Union
  UNIQUE  Duplicate Elimination
  UPDATE  Update
  XISCAN  Index scan over XML data
  XSCAN   XML document navigation scan
  XANDOR  Index ANDing and ORing over XML data
  
Simpler explain plan:
---------------------

select
    o.operator_id, s2.target_id, o.operator_type,
    s.object_name, cast(o.total_cost as integer) cost
  from
    explain_operator o
    left outer join explain_stream s2 on o.operator_id=s2.source_id
    left outer join explain_stream s on
      o.operator_id = s.target_id
      and o.explain_time = s.explain_time
      and s.object_name is not null
  order by o.explain_time asc, operator_id asc;

  
New variation (includes detail of index columns):
-------------------------------------------------

with statement as (
  select * from explain_statement where querytag='full'
),
node_cost as (
select s.stream_id,
    case when s.source_type = 'D' then '[' || s.object_name || ']' else trim(so.operator_type) end as source,
    case when s.target_type = 'D' then '[' || s.object_name || ']' else trim(to.operator_type) end as target,
    s.source_type, s.source_id, s.target_type, s.target_id, s.object_name,
    so.operator_id as source_op_id, so.operator_type as source_op_type, so.total_cost as source_op_cost, so.io_cost as source_op_io_cost, so.cpu_cost as source_op_cpu_cost,
    to.operator_id as target_op_id, to.operator_type as target_op_type, to.total_cost as target_op_cost, to.io_cost as target_op_io_cost, to.cpu_cost as target_op_cpu_cost
    , idx.tbname as idx_table, idx.colnames as idx_cols
  from statement st
  join explain_stream s on 
    (st.explain_requester, st.explain_time, st.source_name, st.source_schema, st.source_version, st.explain_level, st.stmtno, st.sectno) = 
    (s.explain_requester, s.explain_time, s.source_name, s.source_schema, s.source_version, s.explain_level, s.stmtno, s.sectno )
  left outer join explain_operator so on
    (so.operator_id, so.explain_requester, so.explain_time, so.source_name, so.source_schema, so.source_version, so.explain_level, so.stmtno, so.sectno) = 
    (s.source_id, s.explain_requester, s.explain_time, s.source_name, s.source_schema, s.source_version, s.explain_level, s.stmtno, s.sectno )
  left outer join explain_operator to on
    (to.operator_id, to.explain_requester, to.explain_time, to.source_name, to.source_schema, to.source_version, to.explain_level, to.stmtno, to.sectno) = 
    (s.target_id, s.explain_requester, s.explain_time, s.source_name, s.source_schema, s.source_version, s.explain_level, s.stmtno, s.sectno )
  left outer join sysibm.sysindexes idx on idx.name = s.object_name
union
select 0, 'RETURN', null, 'O', so.operator_id, null, null, null, so.operator_id, 'RETURN', so.total_cost, so.io_cost, so.cpu_cost, null, null, null, null, null, null, null
  from statement st
  join explain_operator so on
    (so.explain_requester, so.explain_time, so.source_name, so.source_schema, so.source_version, so.explain_level, so.stmtno, so.sectno) = 
    (st.explain_requester, st.explain_time, st.source_name, st.source_schema, st.source_version, st.explain_level, st.stmtno, st.sectno )
  where so.operator_type = 'RETURN'
)
select
    -- level,
    repeat('.  ', stream_id + level - 1 - stream_id ) || 
    --case when source_id <> -1 then '(' || source_id || ') ' else '' end ||
    --source_id || ' > ' || target_id || ' ' ||
    case when source_op_cost is null then '' else '$' || cast(source_op_cost as bigint) || ' ' end ||
    source ||
    case when idx_cols is null then '' else ' ' || idx_table || ' (' || idx_cols || ')' end ||
    case when source_op_io_cost is null then '' else ' (' || cast(source_op_io_cost as bigint) || ' io)' end ||
    case when source_op_cpu_cost is null then '' else ' (' || cast(source_op_cpu_cost as bigint) || ' cpu)' end
    as path,
    -- sys_connect_by_path(source, ' > ') as path2,
    -- level,
    n.*
  from node_cost n
  start with source_op_type = 'RETURN'
  connect by prior source_id = target_id

====================================================
Markus Winand Variation
====================================================

Usage:
  select * from last_explained

After the "last_explained" view is created. Assumes the explain tables are in the user's schema. Add SYSTOOLS schema if the explain tables are set up there.

CREATE OR REPLACE VIEW last_explained AS
WITH tree(operator_ID, level, path, explain_time, cycle)
AS
(
SELECT 1 operator_id 
     , 0 level
     , CAST('001' AS VARCHAR(1000)) path
     , max(explain_time) explain_time
     , 0
  FROM EXPLAIN_OPERATOR O
 WHERE O.EXPLAIN_REQUESTER = SESSION_USER
UNION ALL
SELECT s.source_id
     , level + 1
     , tree.path || '/' || LPAD(CAST(s.source_id AS VARCHAR(3)), 3, '0')  path
     , tree.explain_time
     , POSITION('/' || LPAD(CAST(s.source_id AS VARCHAR(3)), 3, '0')  || '/' IN path USING OCTETS)
  FROM tree
     , EXPLAIN_STREAM S
 WHERE s.target_id    = tree.operator_id
   AND s.explain_time = tree.explain_time
   AND S.Object_Name IS NULL
   AND S.explain_requester = SESSION_USER
   AND tree.cycle = 0
   AND level < 100
)
SELECT *
  FROM (
SELECT "Explain Plan"
  FROM (
SELECT CAST(   LPAD(id,        MAX(LENGTH(id))        OVER(), ' ')
            || ' | ' 
            || RPAD(operation, MAX(LENGTH(operation)) OVER(), ' ')
            || ' | ' 
            || LPAD(rows,      MAX(LENGTH(rows))      OVER(), ' ')
            || ' | ' 
            -- Don't show ActualRows columns if there are no actuals available at all 
            || CASE WHEN COUNT(ActualRows) OVER () > 1 -- the heading 'ActualRows' is always present, so "1" means no OTHER values
                    THEN LPAD(ActualRows, MAX(LENGTH(ActualRows)) OVER(), ' ') || ' | ' 
                    ELSE ''
               END
            || LPAD(cost,      MAX(LENGTH(cost))      OVER(), ' ')
         AS VARCHAR(100)) "Explain Plan"
     , path
  FROM (
SELECT 'ID' ID
     , 'Operation' Operation
     , 'Rows' Rows
     , 'ActualRows' ActualRows
     , 'Cost' Cost
     , '0' Path
  FROM SYSIBM.SYSDUMMY1
-- TODO: UNION ALL yields duplicate. where do they come from?
UNION
SELECT CAST(tree.operator_id as VARCHAR(254)) ID
     , CAST(LPAD(' ', tree.level, ' ')
       || CASE WHEN tree.cycle = 1
               THEN '(cycle) '
               ELSE ''
          END     
       || COALESCE (
             TRIM(O.Operator_Type)
          || COALESCE(' (' || argument || ')', '') 
          || ' '
          || COALESCE(S.Object_Name,'')
          , ''
          )
       AS VARCHAR(254)) AS OPERATION
     , COALESCE(CAST(rows AS VARCHAR(254)), '') Rows
     , CAST(ActualRows as VARCHAR(254)) ActualRows -- note: no coalesce
     , COALESCE(CAST(CAST(O.Total_Cost AS BIGINT) AS VARCHAR(254)), '') Cost
     , path
  FROM tree
  LEFT JOIN ( SELECT i.source_id
              , i.target_id
              , CAST(CAST(ROUND(o.stream_count) AS BIGINT) AS VARCHAR(12))
                || ' of '
                || CAST (total_rows AS VARCHAR(12))
                || CASE WHEN total_rows > 0
                         AND ROUND(o.stream_count) <= total_rows THEN
                   ' ('
                   || LPAD(CAST (ROUND(ROUND(o.stream_count)/total_rows*100,2)
                          AS NUMERIC(5,2)), 6, ' ')
                   || '%)'
                   ELSE ''
                   END rows
              , CASE WHEN act.actual_value is not null then
                CAST(CAST(ROUND(act.actual_value) AS BIGINT) AS VARCHAR(12))
                || ' of '
                || CAST (total_rows AS VARCHAR(12))
                || CASE WHEN total_rows > 0 THEN
                   ' ('
                   || LPAD(CAST (ROUND(ROUND(act.actual_value)/total_rows*100,2)
                          AS NUMERIC(5,2)), 6, ' ')
                   || '%)'
                   ELSE NULL
                   END END ActualRows
              , i.object_name
              , i.explain_time
         FROM (SELECT MAX(source_id) source_id
                    , target_id
                    , MIN(CAST(ROUND(stream_count,0) AS BIGINT)) total_rows
                    , CAST(LISTAGG(object_name) AS VARCHAR(50)) object_name
                    , explain_time
                 FROM EXPLAIN_STREAM
                WHERE explain_time = (SELECT MAX(explain_time)
                                        FROM EXPLAIN_OPERATOR
                                       WHERE EXPLAIN_REQUESTER = SESSION_USER
                                     )
                GROUP BY target_id, explain_time
              ) I
         LEFT JOIN EXPLAIN_STREAM O
           ON (    I.target_id=o.source_id
               AND I.explain_time = o.explain_time
               AND O.EXPLAIN_REQUESTER = SESSION_USER
              )
         LEFT JOIN EXPLAIN_ACTUALS act
           ON (    act.operator_id  = i.target_id
               AND act.explain_time = i.explain_time
               AND act.explain_requester = SESSION_USER
               AND act.ACTUAL_TYPE  like 'CARDINALITY%'
              )
       ) s
    ON (    s.target_id    = tree.operator_id
        AND s.explain_time = tree.explain_time
       )
  LEFT JOIN EXPLAIN_OPERATOR O
    ON (    o.operator_id  = tree.operator_id
        AND o.explain_time = tree.explain_time
        AND o.explain_requester = SESSION_USER
       ) 
  LEFT JOIN (SELECT LISTAGG (CASE argument_type
                             WHEN 'UNIQUE' THEN
                                  CASE WHEN argument_value = 'TRUE'
                                       THEN 'UNIQUE'
                                  ELSE NULL
                                  END
                             WHEN 'TRUNCSRT' THEN
                                  CASE WHEN argument_value = 'TRUE'
                                       THEN 'TOP-N'
                                  ELSE NULL
                                  END   
                             WHEN 'SCANDIR' THEN
                                  CASE WHEN argument_value != 'FORWARD'
                                       THEN argument_value
                                  ELSE NULL
                                  END                     
                             ELSE argument_value     
                             END
                           , ' ') argument
                  , operator_id
                  , explain_time
               FROM EXPLAIN_ARGUMENT EA
              WHERE argument_type IN ('AGGMODE'   -- GRPBY
                                     , 'UNIQUE', 'TRUNCSRT' -- SORT
                                     , 'SCANDIR' -- IXSCAN, TBSCAN
                                     , 'OUTERJN' -- JOINs
                                     )
                AND explain_requester = SESSION_USER
              GROUP BY explain_time, operator_id
            ) A
    ON (    a.operator_id  = tree.operator_id
        AND a.explain_time = tree.explain_time
       )
     ) O
UNION ALL
VALUES ('', 'A')
    ,  ('Predicate Information', 'AA')
UNION ALL
SELECT CAST (LPAD(CASE WHEN operator_id = LAG  (operator_id)
                                          OVER (PARTITION BY operator_id
                                                    ORDER BY pred_order
                                               )
                       THEN ''
                       ELSE operator_id || ' - '
                  END
                , MAX(LENGTH(operator_id )+4) OVER()
                , ' ')
             || how_applied
             || ' ' 
             || predicate_text
          AS VARCHAR(100)) "Predicate Information"
     , 'P' || LPAD(id_order, 5, '0') || pred_order path
  FROM (SELECT CAST(operator_id AS VARCHAR(254)) operator_id
             , LPAD(trim(how_applied)
                  ,  MAX (LENGTH(TRIM(how_applied)))
                    OVER (PARTITION BY operator_id)
                  , ' '
               ) how_applied
               -- next: capped to length 80 to avoid
               -- SQL0445W  Value "..." has been truncated.  SQLSTATE=01004
               -- error when long literal values may appear (space padded!)
             , CAST(substr(predicate_text, 1, 80) AS VARCHAR(80)) predicate_text
             , CASE how_applied WHEN 'START' THEN '1'
                                WHEN 'STOP'  THEN '2'
                                WHEN 'SARG'  THEN '3'
                                ELSE '9'
               END pred_order
             , operator_id id_order
          FROM explain_predicate p
         WHERE explain_time = (SELECT MAX(explain_time)
                                 FROM explain_operator)
       )
)
ORDER BY path
);


