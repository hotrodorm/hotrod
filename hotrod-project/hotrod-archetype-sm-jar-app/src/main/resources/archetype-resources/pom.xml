<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>${groupId}</groupId>
  <artifactId>${artifactId}</artifactId>
  <version>${version}</version>
  <packaging>jar</packaging>

  <name>${artifactId}</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <spring.boot.version>2.3.4.RELEASE</spring.boot.version>
    <hotrod.version>3.4.5-SNAPSHOT</hotrod.version>
    <mybatis.spring.version>2.1.3</mybatis.spring.version>
    <database.builder.version>1.2.2</database.builder.version>
    <sentinel.version>1.1.8</sentinel.version>
  </properties>

  <dependencies>

    <!-- Spring Boot -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <version>${spring.boot.version}</version>
    </dependency>

    <!-- Spring AOP -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
      <version>${spring.boot.version}</version>
    </dependency>
 
    <!-- MyBatis Spring -->

    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
      <version>${mybatis.spring.version}</version>
    </dependency>

    <!-- HotRod -->

    <dependency>
      <groupId>org.hotrodorm.hotrod</groupId>
      <artifactId>hotrod</artifactId>
      <version>${hotrod.version}</version>
    </dependency>

    <dependency>
      <groupId>org.hotrodorm.hotrod</groupId>
      <artifactId>hotrod-livesql</artifactId>
      <version>${hotrod.version}</version>
    </dependency>

    <!-- JDBC Driver -->

    <dependency>
      <groupId>${jdbcdrivergroupid}</groupId>
      <artifactId>${jdbcdriverartifactid}</artifactId>
      <version>${jdbcdriverversion}</version>
#if( ${jdbcdrivertype} != "@@NO@@VALUE@@" )
      <type>${jdbcdrivertype}</type>
#end
    </dependency>

    <!-- Sentinel -->

    <dependency>
      <groupId>org.nocrala.tools.database.sentinel</groupId>
      <artifactId>sentinel</artifactId>
      <version>${sentinel.version}</version>
    </dependency>    

    <!-- Integrating springdoc-openapi With Spring WebFlux -->

    <!-- Enable as needed 
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-webflux-ui</artifactId>
      <version>1.2.32</version>
    </dependency>
    -->

  </dependencies>

  <build>
    <plugins>

      <!-- Spring Boot Plugin -->

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring.boot.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Database Builder -->

      <plugin>
        <groupId>org.nocrala.tools.database.builder</groupId>
        <artifactId>database-builder-maven-plugin</artifactId>
        <version>${database.builder.version}</version>
        <configuration>
          <sourcedir>src/main/database</sourcedir>
          <targetversion>1.0.0</targetversion>
          <localproperties>src/main/database/sandbox.properties</localproperties>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>${jdbcdrivergroupid}</groupId>
            <artifactId>${jdbcdriverartifactid}</artifactId>
            <version>${jdbcdriverversion}</version>
#if( ${jdbcdrivertype} != "@@NO@@VALUE@@" )
            <type>${jdbcdrivertype}</type>
#end
          </dependency>
        </dependencies>
      </plugin>

      <!-- HotRod ORM Generator -->

      <plugin>
        <groupId>org.hotrodorm.hotrod</groupId>
        <artifactId>hotrod-maven-plugin</artifactId>
        <version>${hotrod.version}</version>
        <configuration>
          <configfile>src/main/hotrod/hotrod.xml</configfile>
          <generator>MyBatis-Spring</generator>
          <localproperties>src/main/hotrod/hotrod-local.properties</localproperties>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>${jdbcdrivergroupid}</groupId>
            <artifactId>${jdbcdriverartifactid}</artifactId>
            <version>${jdbcdriverversion}</version>
#if( ${jdbcdrivertype} != "@@NO@@VALUE@@" )
            <type>${jdbcdrivertype}</type>
#end
          </dependency>
        </dependencies>
      </plugin>

    </plugins>
  </build>

  <profiles>

    <profile>
      <id>genopenapi</id>
  
      <!-- Run as: mvn -P genopenapi clean verify -->
      <!-- Generates: target/openapi.yaml -->
          
      <!-- Open API service -->

      <dependencies>
        <dependency>
          <groupId>org.springdoc</groupId>
          <artifactId>springdoc-openapi-ui</artifactId>
          <version>1.2.32</version>
        </dependency>
      </dependencies>

      <build>
        <plugins>

          <!-- Spring Boot plugin - starts/stops the OpenAPI server -->

          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <version>${spring.boot.version}</version>
            <executions>
              <execution>
                <id>pre-integration-test</id>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>post-integration-test</id>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <!-- Generating OpenAPI docs -->

          <plugin>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-maven-plugin</artifactId>
            <version>0.2</version>
            <executions>
              <execution>
                <phase>integration-test</phase>
                <goals>
                  <goal>generate</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <!-- To get the API in YAML format -->
              <apiDocsUrl>http://localhost:8080/v3/api-docs.yaml</apiDocsUrl>
              <outputFileName>openapi.yaml</outputFileName>
              <outputDir>${project.build.directory}</outputDir>
              <!-- To get the API in JSON format -->
              <!--
              <apiDocsUrl>http://localhost:8080/v3/api-docs</apiDocsUrl>
              <outputFileName>openapi.json</outputFileName>
              <outputDir>${project.build.directory}</outputDir>
              -->
            </configuration>
          </plugin>

        </plugins>

      </build>

    </profile>

  </profiles>

</project>
