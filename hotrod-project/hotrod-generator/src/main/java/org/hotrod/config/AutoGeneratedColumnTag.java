package org.hotrod.config;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hotrod.exceptions.InvalidConfigurationFileException;
import org.hotrod.generator.HotRodGenerator;
import org.hotrod.utils.Compare;
import org.hotrodorm.hotrod.utils.SUtil;
import org.nocrala.tools.database.tartarus.core.JdbcColumn;
import org.nocrala.tools.database.tartarus.core.JdbcColumn.AutogenerationType;
import org.nocrala.tools.database.tartarus.core.JdbcTable;

@XmlRootElement(name = "auto-generated-column")
public class AutoGeneratedColumnTag extends AbstractConfigurationTag {

  private static final long serialVersionUID = 1L;

  private static final Logger log = LogManager.getLogger(AutoGeneratedColumnTag.class);
  // Constants

  private static final String ALWAYS_TRUE = "true";
  private static final String ALWAYS_FALSE = "false";

  // Properties

  private String name = null;
  private String sequence = null;
  private String always = null;

  private JdbcTable jdbcTable = null;
  private JdbcColumn jdbcColumn = null;
  private AutogenerationType autogenerationType = null;

  // Constructor

  public AutoGeneratedColumnTag() {
    super("auto-generated-column");
  }

  // JAXB Setters

  @XmlAttribute
  public void setSequence(final String sequence) {
    this.sequence = sequence;
  }

  @XmlAttribute
  public void setName(final String column) {
    this.name = column;
  }

  @XmlAttribute
  public void setAlways(final String always) {
    this.always = always;
  }

  // Setters (non-JAXB)

  void setJdbcTable(final JdbcTable jdbcTable) {
    this.jdbcTable = jdbcTable;
  }

  void setJdbcColumn(final JdbcColumn jdbcColumn) {
    if (jdbcColumn == null) {
      throw new IllegalArgumentException("Cannot set null to auto-generated JDBC column.");
    }
    this.jdbcColumn = jdbcColumn;
  }

  void setAutogenerationType(final AutogenerationType autogenerationType) {
    this.autogenerationType = autogenerationType;
  }

  // Behavior

  public void validate() throws InvalidConfigurationFileException {

    // column

    if (SUtil.isEmpty(this.name)) {
      throw new InvalidConfigurationFileException(this, //
          "Attribute 'name' cannot be empty: must specify the auto-generated column name", //
          "Attribute 'name' of tag <" + super.getTagName() + "> cannot be empty. "
              + "Must specify the auto-generated column name.");
    }

    if (this.sequence == null) { // identity

      // always

      if (this.always == null) {
        this.autogenerationType = AutogenerationType.IDENTITY_ALWAYS;
      } else if (ALWAYS_TRUE.equals(this.always) || ALWAYS_FALSE.equals(this.always)) {
        this.autogenerationType = ALWAYS_TRUE.equals(this.always) ? AutogenerationType.IDENTITY_ALWAYS
            : AutogenerationType.IDENTITY_BY_DEFAULT;
      } else {
        throw new InvalidConfigurationFileException(this, //
            "Invalid attribute 'always': valid values are '" + ALWAYS_TRUE + "' or '" + ALWAYS_FALSE
                + "' (defaults to '" + ALWAYS_TRUE + "')", //
            "Invalid attribute 'always' of the tag <" + super.getTagName() + ">: valid values are '" + ALWAYS_TRUE
                + "' or '" + ALWAYS_FALSE + "' (defaults to '" + ALWAYS_TRUE + "')");
      }

    } else { // sequence

      this.autogenerationType = null;

      // sequence

      if (SUtil.isEmpty(this.sequence)) {
        throw new InvalidConfigurationFileException(this, //
            "Invalid attribute 'sequence'; when specified is cannot be empty", //
            "When specified, the attribute 'sequence' of the tag <" + super.getTagName() + "> cannot be empty. "
                + "If the  auto-generated key comes from a sequence, " + "specify here the sequence name. "
                + "If not specified, " + Constants.TOOL_NAME + " considers the column is an identity column.");
      }

      // allows-specified-value

      if (this.always != null) {
        throw new InvalidConfigurationFileException(this, //
            "Invalid attribute 'always': this attribute can only be used for identity columns, "
                + "and is mutually exclusive with the 'sequence' attribute", //
            "Invalid attribute 'always' of the tag <" + super.getTagName()
                + ">: this attribute can only be used for identity columns, "
                + "and is mutually exclusive with the 'sequence' attribute.");
      }

    }

  }

  public void validateAgainstDatabase(final HotRodGenerator generator, final JdbcTable t)
      throws InvalidConfigurationFileException {

    this.jdbcTable = t;
    this.jdbcColumn = generator.findJdbcColumn(this.jdbcTable, this.name);
    log.info("validating jdcbColumn: this.jdbcColumn=" + this.jdbcColumn);
    if (this.jdbcColumn == null) {
      throw new InvalidConfigurationFileException(this, //
          "Could not find database column '" + this.name + "'", //
          "Could not find database column '" + this.name + "' on table '" + name
              + "' as specified in the attribute 'name' of the tag <" + super.getTagName() + ">.");
    }

  }

  // Getters

  public String getSequence() {
    return sequence;
  }

  public String getName() {
    return name;
  }

  public AutogenerationType getAutogenerationType() {
    return this.autogenerationType;
  }

  public JdbcTable getJdbcTable() {
    return jdbcTable;
  }

  public JdbcColumn getJdbcColumn() {
    return jdbcColumn;
  }

  // Merging logic

  @Override
  public boolean sameKey(final AbstractConfigurationTag fresh) {
    try {
      AutoGeneratedColumnTag f = (AutoGeneratedColumnTag) fresh;
      return this.name.equals(f.name);
    } catch (ClassCastException e) {
      return false;
    }
  }

  @Override
  public boolean copyNonKeyProperties(final AbstractConfigurationTag fresh) {
    log.info("setting");
    try {
      AutoGeneratedColumnTag f = (AutoGeneratedColumnTag) fresh;
      boolean different = !same(fresh);
      this.sequence = f.sequence;
      this.always = f.always;
      this.jdbcTable = f.jdbcTable;
      this.jdbcColumn = f.jdbcColumn;
      this.autogenerationType = f.autogenerationType;
      return different;
    } catch (ClassCastException e) {
      return false;
    }
  }

  @Override
  public boolean same(final AbstractConfigurationTag fresh) {
    try {
      AutoGeneratedColumnTag f = (AutoGeneratedColumnTag) fresh;
      return //
      Compare.same(this.name, f.name) && //
          Compare.same(this.sequence, f.sequence) && //
          Compare.same(this.always, f.always) //
      ;
    } catch (ClassCastException e) {
      return false;
    }
  }

  // Simple Caption

  @Override
  public String getInternalCaption() {
    return this.getTagName();
  }

}
