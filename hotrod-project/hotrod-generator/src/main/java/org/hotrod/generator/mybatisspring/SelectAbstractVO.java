package org.hotrod.generator.mybatisspring;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hotrod.config.Constants;
import org.hotrod.exceptions.ControlledException;
import org.hotrod.exceptions.UncontrolledException;
import org.hotrod.exceptions.UnresolvableDataTypeException;
import org.hotrod.generator.FileGenerator;
import org.hotrod.generator.FileGenerator.TextWriter;
import org.hotrod.generator.NamePackageResolver;
import org.hotrod.metadata.ColumnMetadata;
import org.hotrod.metadata.VOMetadata;
import org.hotrod.metadata.VOMetadata.VOMember;
import org.hotrod.metadata.VORegistry.SelectVOClass;
import org.hotrod.runtime.json.JSONArray;
import org.hotrod.utils.ClassPackage;
import org.hotrod.utils.ImportsRenderer;
import org.nocrala.tools.lang.collector.listcollector.ListWriter;

public class SelectAbstractVO {

  // Constants

  private static final Logger log = LogManager.getLogger(SelectAbstractVO.class);

  // Properties

  private DataSetLayout layout;

  private String name;
  private ClassPackage classPackage;

  private List<ColumnMetadata> columns;
  private List<VOMember> associationMembers;
  private List<VOMember> collectionMembers;

  private String superClassName;
  private ClassPackage superClassPackage;

  private TextWriter w;

  // Constructors

  // From a solo VO
  public SelectAbstractVO(final SelectVOClass abstractSoloVO, final DataSetLayout layout,
      final NamePackageResolver npResolver) {
    log.debug("init");
    this.layout = layout;

    this.name = abstractSoloVO.getName();
    this.classPackage = npResolver.getPrimitivesVOPackage(abstractSoloVO.getClassPackage());

    this.columns = new ArrayList<ColumnMetadata>(abstractSoloVO.getColumnsByName().values());
    log.debug("Name: " + this.name + " this.columns.size()=" + this.columns.size());

    this.associationMembers = abstractSoloVO.getAssociations();
    this.collectionMembers = new ArrayList<VOMember>();

    this.superClassPackage = null;
    this.superClassName = null;
  }

  // From a connected VO
  public SelectAbstractVO(final VOMetadata vo, final DataSetLayout layout, final NamePackageResolver npResolver) {
    this.layout = layout;
    this.name = vo.getAbstractName();
    this.classPackage = npResolver.getPrimitivesVOPackage(vo.getClassPackage());
    this.columns = new ArrayList<ColumnMetadata>();
    log.debug("vo.getDeclaredColumns().size()=" + vo.getDeclaredColumns().size());
    for (ColumnMetadata cm : vo.getDeclaredColumns()) {
      this.columns.add(cm);
    }
    this.associationMembers = vo.getAssociationMembers();
    this.collectionMembers = vo.getCollectionMembers();

    this.superClassPackage = vo.getSuperClass().getClassPackage();
    this.superClassName = vo.getSuperClass().getName();
  }

  // Getters

  public void generate(final FileGenerator fileGenerator) throws UncontrolledException, ControlledException {

    String className = this.name + ".java";

    File dir = this.layout.getVOPackageDir(this.classPackage);
    File f = new File(dir, className);
    this.w = null;

    try {
      this.w = fileGenerator.createWriter(f);

      writeClassHeader();

      writeProperties();

      writeGettersAndSetters();

      writeToString();

      writeToJSON();

      writeClassFooter();

    } catch (IOException e) {
      throw new UncontrolledException(
          "Could not generate DAO primitives class: could not write to file '" + f.getName() + "'.", e);
    } catch (UnresolvableDataTypeException e) {
      throw new ControlledException("Could not generate DAO primitives for table '" + e.getTableName()
          + "'. Could not handle columns '" + e.getColumnName() + "' type: " + e.getTypeName());
    } finally {
      if (this.w != null) {
        try {
          this.w.close();
        } catch (IOException e) {
          throw new UncontrolledException(
              "Could not generate DAO primitives class: could not close file '" + f.getName() + "'.", e);
        }
      }
    }

  }

  private void writeClassHeader() throws IOException {

    // Comment

    println("// Autogenerated by " + Constants.TOOL_NAME + " -- Do not edit.");
    println();

    // Package

    println("package " + this.classPackage.getPackage() + ";");
    println();

    // Imports

    ImportsRenderer imports = new ImportsRenderer();
    if (this.superClassName == null) {
      imports.add("java.io.Serializable");
    } else {
      imports.add(this.superClassPackage.getFullClassName(this.superClassName));
    }
    if (!this.collectionMembers.isEmpty()) {
      imports.add("java.util.List");
    }
    imports.newLine();

    for (VOMember a : this.associationMembers) {
      imports.add(a.renderFullClassName());
    }
    for (VOMember c : this.collectionMembers) {
      imports.add(c.renderFullClassName());
    }
    if (!this.associationMembers.isEmpty() || !this.collectionMembers.isEmpty()) {
      imports.newLine();
    }
    imports.add("org.hotrod.runtime.json.*;");

    this.w.write(imports.render());

    // Signature

    String hierarchy = this.superClassName == null ? " implements Serializable" : " extends " + this.superClassName;

    println("public class " + this.getName() + hierarchy + " {");
    println();

    // Serial Version UID

    println("  private static final long serialVersionUID = 1L;");
    println();

  }

  private void writeProperties() throws IOException {

    log.debug("class=" + this.getName() + " this.columns.size()=" + this.columns.size());

    if (!this.columns.isEmpty()) {
      println("  // Expression properties");
      println();
      for (ColumnMetadata cm : this.columns) {
        if (!cm.reusesMemberFromSuperClass()) {
          String javaType = cm.getType().getJavaClassName();
          println("  protected " + javaType + " " + cm.getId().getJavaMemberName() + " = null;"
              + (cm.getType().isLOB() ? " // it's a LOB type" : ""));
        }
      }
      println();
    }

    if (!this.associationMembers.isEmpty()) {
      println("  // Association properties");
      println();
      for (VOMember a : this.associationMembers) {
        println("  protected " + a.getName() + " " + a.getProperty() + " = null;");
      }
      println();
    }

    if (!this.collectionMembers.isEmpty()) {
      println("  // Collection properties");
      println();
      for (VOMember c : this.collectionMembers) {
        println("  protected List<" + c.getName() + "> " + c.getProperty() + " = null;");
      }
      println();
    }

  }

  private void writeGettersAndSetters() throws IOException, UnresolvableDataTypeException {
    println("  // getters & setters");
    println();

    for (ColumnMetadata cm : this.columns) {
      if (!cm.reusesMemberFromSuperClass()) {
        String javaType = cm.getType().getJavaClassName();
        String property = cm.getId().getJavaMemberName();

        println("  public final " + javaType + " " + cm.getId().getJavaGetter() + "() {");
        println("    return this." + property + ";");
        println("  }");
        println();

        String setter = cm.getId().getJavaSetter();
        writeSetter(property, javaType, setter);
      }
    }

    for (VOMember a : this.associationMembers) {
      String javaType = a.getFullClassName();
      String property = a.getProperty();

      println("  public final " + javaType + " " + a.getId().getJavaGetter() + "() {");
      println("    return this." + property + ";");
      println("  }");
      println();

      String setter = a.getId().getJavaSetter();
      writeSetter(property, javaType, setter);
    }

    for (VOMember c : this.collectionMembers) {
      String javaType = c.getFullClassName();
      String property = c.getProperty();

      println("  public final List<" + javaType + "> " + c.getId().getJavaGetter() + "() {");
      println("    return this." + property + ";");
      println("  }");
      println();

      String setter = c.getId().getJavaSetter();
      writeSetter(property, "List<" + javaType + ">", setter);
    }

  }

  private void writeSetter(final String property, final String javaType, final String setter) throws IOException {
    println("  public final void " + setter + "(final " + javaType + " " + property + ") {");
    println("    this." + property + " = " + property + ";");
    String name = property + "WasSet";
    println("  }");
    println();
  }

  private void writeToString() throws IOException, UnresolvableDataTypeException {
    println("  // to string");
    println();

    println("  public String toString() {");
    println("    java.lang.StringBuilder sb = new java.lang.StringBuilder();");

    println("    sb.append(super.toString() + \"\\n\");");
    if (!this.columns.isEmpty()) {
      String prefix = "";
      String elemPrefix = "    sb.append(";
      String elemSuffix = "";
      String separator = " + \"\\n\");\n";
      String lastSeparator = separator;
      String suffix = ");";
      ListWriter lw = new ListWriter(prefix, elemPrefix, elemSuffix, separator, lastSeparator, suffix);
      for (ColumnMetadata cm : this.columns) {
        String prop = cm.getId().getJavaMemberName();
        lw.add("\"- " + prop + "=\" + this." + prop);
      }
      println(lw.toString());
    }

    println("    return sb.toString();");
    println("  }");
    println();

  }

  private void writeToJSON() throws IOException, UnresolvableDataTypeException {
    println("  // to JSON Object");
    println();
    println("  public JSONObject toJSONObject() {");

    // Entity Properties

    println("    JSONObject obj = new JSONObject();");

    // Expressions

    for (ColumnMetadata cm : this.columns) {
      String prop = cm.getId().getJavaMemberName();
      println("    obj.addProperty(\"" + prop + "\", " + "this." + prop + ");");
    }

    // Associations

    for (VOMember a : this.associationMembers) {
      String prop = a.getProperty();
      println("    obj.addProperty(\"" + prop + "\", " + "this." + prop + ".toJSONObject());");
    }

    // Collections

    for (VOMember c : this.collectionMembers) {
      String prop = c.getProperty();
      println("    obj.addProperty(\"" + prop + "\", this." + prop
          + ".stream().map(e -> e.toJSONObject()).collect(JSONArray.toJSONArray()));");
    }

    println("    return obj;");
    println("  }");
    println();

    println("  // to JSON String");
    println();
    println("  public String toJSON() {");
    println("    return toJSONObject().render();");
    println("  }");
    println();
  }

  private void writeClassFooter() throws IOException {
    println("}");
  }

  // Identifiers & File Paths

  public ClassPackage getClassPackage() {
    return this.classPackage;
  }

  public String getFullClassName() {
    return this.classPackage.getFullClassName(getName());
  }

  public String getName() {
    return this.name;
  }

  // Helpers

  @SuppressWarnings("unused")
  private void print(final String txt) throws IOException {
    this.w.write(txt);
  }

  private void println(final String txt) throws IOException {
    this.w.write(txt);
    println();
  }

  private void println() throws IOException {
    this.w.write("\n");
  }

}
