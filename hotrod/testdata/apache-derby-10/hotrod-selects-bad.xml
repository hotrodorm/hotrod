<?xml version="1.0"?>
<!DOCTYPE hotrod-fragment>

<hotrod-fragment package="accounting.finances">

  <dao java-class-name="SelectsDAOBad">

    <!-- Case 1 - Flat Join -->

    <select method="case1" vo-class="AccountPersonFlatVO">

      <parameter name="clientId" java-type="java.lang.Integer" jdbc-type="NUMERIC" />

      <column name="type" converter="account_type" />
      <column name="person_type" converter="person_type" />
      <column name="active" converter="account_status" />

      select
      a.*,
      p.id "person_id", p.name, p.type "person_type"
      from account a
      join person p on (p.id) = (a.person_id)
      <complement>
        where a.id = #{clientId}
      </complement>

    </select>

    <!-- Case 2 - Select returns multiple VOs -->

    <select method="case2">

      <parameter name="clientId" java-type="java.lang.Integer" jdbc-type="NUMERIC" />

      select
      <columns vo-class="AccountPersonVO">
        <vo table="account" property="account"> a.* </vo>
        <vo table="person" property="person" alias="p"></vo>
      </columns>
      from account a
      join person p on (p.id) = (c.person_id)
      <complement>
        where a.id = #{clientId}
      </complement>

    </select>
    
    <!-- 3 - Select returns a single VO and no expressions -->

    <select method="case3">

      <parameter name="clientId" java-type="java.lang.Integer" jdbc-type="NUMERIC" />

      select
      <columns>
        <vo table="account"> a.* </vo>
      </columns>
      from account a
      <complement>
        where a.id = #{clientId}
        and (type = 1 and account_number like 'RET-%'
        or type = 3 and account_number like
        'IRA-%')
      </complement>

    </select>
    
    <!-- 4 - Extra columns -->

    <select method="case4">

      <parameter name="clientId" java-type="java.lang.Integer" jdbc-type="NUMERIC" />

      select
      <columns vo-class="ValuatedAccountVO">
        <vo table="account" property="account"> a.* </vo>
        <vo table="person" property="person" alias="p" />
        <expressions>
          (c.balance / decode(c.type, 1,15, 2,8, 3,100) as tier_score,
          (c.balance / decode(p.type, 1,3, 2,17, 3,5) as
          rank_score
        </expressions>
      </columns>
      from account a
      join person p on (p.id) = (a.person_id)
      <complement>
        where a.id = #{clientId}
      </complement>

    </select>

    <!-- 5 - Collections -->

    <select method="case5">

      <parameter name="clientId" java-type="java.lang.Integer" jdbc-type="NUMERIC" />

      select
      <columns>
        <vo table="cuenta" extended-vo-class="AccountWithTransactionsVO">
          a.*
          <collection table="transaccion" property="transacciones"> t.* </collection>
        </vo>
      </columns>
      from account a
      join transaction t on (t.account_id) = (a.id)
      <complement>
        where a.id = #{clientId}
      </complement>

    </select>

    <!-- 6 - Associations -->

    <select method="case6">

      <parameter name="type" java-type="java.lang.Integer" jdbc-type="NUMERIC" />
      <parameter name="minBalance" java-type="java.lang.Integer" jdbc-type="NUMERIC" />

      select
      <columns>
        <vo table="account" extended-vo-class="VIPAccountVO">
          a.*
          <association table="person" property="person"> p.* </association>
        </vo>
      </columns>
      from account a
      join person p on (p.id) = (c.person_id)
      <complement>
        where a.type = #{type} and p.balance >= #{minBalance}
      </complement>

    </select>

    <!-- 7 - Collections and associations combined -->

    <select method="case7">

      <parameter name="clientId" java-type="java.lang.Integer" jdbc-type="NUMERIC" />

      select
      <columns>
        <vo table="person" extended-vo-class="ExtendedPersonVO">
          p.*
          <collection table="account" property="accounts" extended-vo-class="AccountWithTransactionsVO">
            a.*
            <collection table="transaction" property="transactions" alias="t" />
          </collection>
          <association table="category" property="category" alias="c" />
        </vo>
      </columns>
      from person p
      join account a on (a.person_id) = (c.id)
      join transaction t on (t.account_id) = (a.id)
      join category c on
      a.category_id = c.id
      <complement>
        where a.id = #{clientId}
      </complement>

    </select>

    <!-- Case 8 - Associations & collections without PKs -->

    <select method="case8" multiple-rows="false">

      <parameter name="clientId" java-type="java.lang.Integer" jdbc-type="NUMERIC" />

      select
      <columns>
        <vo table="log" id="recorded_by, recorded_at" extended-vo-class="LogWithOfficeVO">
          l.*
          <association view="view_office" id="office_id" property="office" alias="o" />
        </vo>
      </columns>
      from log l
      left join view_office o on l.office_id = o.id

    </select>

    <!-- Case 9 - Select returns a single row -->

    <select method="case9" multiple-rows="false">

      <parameter name="clientId" java-type="java.lang.Integer" jdbc-type="NUMERIC" />

      select
      <columns vo-class="ExpandedAccountVO">
        <vo table="account" property="account"> a.* </vo>
        <vo table="person" property="person" alias="p" />
      </columns>
      from account a
      left join person p on (p.id) = (c.person_id)
      <complement>
        where a.id = #{clientId}
      </complement>

    </select>

  </dao>

</hotrod-fragment>
