create table log (
  recorded_at timestamp,
  notes varchar(100)
);

create table parameters (
  system integer,
  level integer,
  name varchar(50),
  value varchar(100)
);

create index param_i1 on parameters (system, level) allow reverse scans;
create index param_i2 on parameters (name);

create table properties (
  application varchar(20),
  name varchar(50) not null,
  prop_value varchar(80),
  constraint props_name_uc unique (name)
);

create index properties_i1 on properties (application);

create table config_values (
  node integer not null,
  cell integer not null,
  name varchar(20) not null,
  verbatim varchar(50),
  constraint cfgval_uc1 unique (node, cell),
  constraint cfgval_uc2 unique (name)
);

create table account (
  id integer not null generated always as identity,
  name varchar(30) not null,
  created_on timestamp,
  current_balance integer,
  started_on date not null,
  primary key (id),
  constraint account_name_uc unique (name)
);

create table state_branch (
  id integer not null,
  name varchar(30) not null,
  primary key (id)
);

create table federal_branch (
  id integer not null,
  name varchar(30) not null,
  primary key (id)
);

create table transaction (
  account_id integer not null,
  seq_id integer not null generated by default as identity,
  time varchar(16) not null,
  amount integer not null,
  fed_branch_id bigint,
  primary key (seq_id),
  constraint tx_account_id_time unique (account_id, time),
  foreign key fk_tx_fed_branch (fed_branch_id)
    references federal_branch (id),
  foreign key fk_tx_account (account_id)
    references account (id)
);

create table client (
  id integer not null,
  national_id integer not null,
  name varchar(40) not null,
  prop_name varchar(20) not null,
  referrer_id integer,
  friend_id integer,
  group_account_id integer,
  branch_id integer,
  constraint client_nat_id unique (national_id),
  primary key (id),
  foreign key fk_client_properties (prop_name)  -- to other UI
    references properties (name),
  foreign key fk_client_referrer (referrer_id) -- to self PK
    references client (id),
  foreign key fk_client_friend (friend_id) -- to self UI
    references client (national_id),
  foreign key fk_client_gaccount (group_account_id) -- to other PK
    references account (id),
  foreign key fk_client_st_branch (branch_id) -- dual fk #1
    references state_branch (id),
  foreign key fk_client_fed_branch (branch_id) -- dual fk #2
    references federal_branch (id)
);

create sequence seq_agent;

create table agent (
  id integer not null,
  name varchar(40) not null,
  client_id bigint,
  primary key (id)
);

create table quadrant (
  region integer not null,
  area integer not null,
  caption varchar(20),
  primary key (region, area)
);

create table codes (
  id integer not null generated always as identity,
  account integer not null,
  version_name integer not null,
  account_version integer not null,
  name integer not null,
  foreign key fk_codes_q1 (account, version_name) 
    references quadrant (region, area),
  foreign key fk_codes_q2 (account_version, name) 
    references quadrant (region, area),
  constraint cd_q1 unique (account, version_name),
  constraint cd_q2 unique (account_version, name)
);

CREATE TABLE "APPLICATION_CONFIG"
(
   CONFIG_ID int NOT NULL,
   CONFIG_NAME varchar(150),
   CONFIG_VALUE varchar(250)
);
  
create table vehicle (
  id integer not null generated always as identity,
  name varchar(40) not null,
  mileage integer not null,
  version_number smallint not null,
  primary key (id)
);

create unique index vehicle_unique on vehicle (upper(name));

-- ======================
-- Auto-generated columns 
-- ======================

create table test_identity1 (
  id integer not null generated always as identity,
  name varchar(20) not null
);

create sequence gen_seq1;
create sequence gen_seq2;

create table test_mixed1 (
  id integer not null generated always as identity,
  name varchar(20) not null,
  extra_id1 integer not null,
  extra_id2 integer not null
);

-- ============
-- Column Types
-- ============

-- CHAR
-- VARCHAR
-- CLOB
-- GRAPHIC
-- VARGRAPHIC
-- DBCLOB
-- LONG VARCHAR
-- LONG VARGRAPHIC
-- LONG VARCHAR FOR BIT DATA
-- VARCHAR () FOR BIT DATA
-- CHAR () FOR BIT DATA

-- These types are not present in DB2 Linux.
-- cha14 binary(12),      -- 1 to 255 bytes. The default length is 1.
-- cha15 varbinary(14),   -- 1 to "page size of the table space".

create table types_char (
  cha1 character(10),     -- 1 to 255 chars. The default length is 1.
  cha2 char(20),          -- 1 to 255 chars.
  cha3 varchar(30),       -- 1 to "page size of the table space" (32672?).
  cha3b character varying(31),
  cha4 clob (40),         -- 1 to 2147483647 chars. The default length is 1M.
  cha5 graphic(50),       -- 1 to 127 "double-byte" chars. The default length is 1.
  cha6 nchar(50),         -- synonym of GRAPHIC
  cha7 vargraphic(60),    -- 1 to "page size  of the table space" (16336?)
  cha8 nvarchar(60),      -- synonym of VARGRAPHIC
  cha9 dbclob(70),        -- 1 to 1073741823(4) double byte chars. The default length is 1M.
  cha10 nclob(70),        -- synonym of DBCLOB
  cha11 long varchar,     -- deprecated: 1 to (?). Cannot specify size.
                          -- max size = (max row size) - (size of all other cols)
  cha12 long vargraphic,  -- deprecated: 1 to (?). Cannot specify size.
  cha13 long varchar for bit data,
  cha14 varchar(55) for bit data,
  cha15 char(56) for bit data
);

-- SMALLINT
-- INTEGER
-- BIGINT
-- DECIMAL
-- DECFLOAT
-- REAL
-- DOUBLE

create table types_numeric (
  num1 smallint,      -- -32768 to +32767.
  num2 int,           -- -2147483648 to +2147483647.
  num3 integer,       -- -2147483648 to +2147483647.
  num4 bigint,        -- -9223372036854775808 to +9223372036854775807.
  num5 dec(8),        -- Precision 1 to 31; scale 0 to 31.
  num6 numeric(8),
  num7 num(8),
  num8 numeric(10,2),
  num8a decimal(2),
  num8b decimal(4),
  num8c decimal(8),
  num8d decimal(18),
  num8e decimal(31),
  num9 decimal(10,2),  
  num10 decfloat,      -- IEEE 754r. Max precision is 34.
  num11 real,         -- Single-precision floating-point number (4-bytes)
  num12 float,        -- Double-precision floating-point number (8-bytes)
  num13 double        -- Double-precision floating-point number (8-bytes)
);

-- DATE
-- TIME
-- TIMESTAMP

create table types_date_time (
  dat1 date, -- only date, no time: 0001-01-01 to 9999-12-31.
  dat2 time, -- only time (with seconds precision), no date
  dat3 timestamp -- date, time, with nanosecond precision.
);

-- BLOB

create table types_binary (
  bin1 blob(100)        -- 1 to 2147483647 bytes. The default length is 1M.
);

-- XML

-- Not supported:
-- ROW
-- ARRAY

create table types_other (
  oth1 xml
-- oth2 int array[100]
);

-- BOOLEAN

create view types_pseudo1 as
  select
      case when config_id < 8 then 'TRUE' else 'FALSE' end as pse1
    from application_config;

-- DISTINCT

create view types_pseudo2 as
  select distinct(config_id) as pse2 from application_config;

-- =====
-- Views
-- =====
 
create view tx_branch (account_id, branch_id, branch_name, amount) as
  select t.account_id, b.id, b.name, t.amount from transaction t, federal_branch b 
    where t.fed_branch_id = b.id;

-- ====================
-- Special column names
-- ====================

create table special_columns (
  id integer not null,
--  "COLUMN" varchar(10),
--  "TABLE" varchar(10),
  "column" varchar(10),
  "table" varchar(10),
  "VALUE_id" varchar(10),
  "created_at" varchar(10),
--  "FROM" varchar(10),
  "from" varchar(10),
--  "12_รก" varchar(10),
--  "+$%()" varchar(10),
  primary key (id)
);

-- unsupported multi-reference FKs

create table house_type (
  local_code integer primary key not null,
  name varchar(40) not null,
  federal_code integer not null,
  long_description varchar(1000) not null,
  state_code integer not null,
  constraint ht_ordinal unique (federal_code),
  constraint ht_numeral unique (state_code)
);

create table house (
  house_id bigint primary key not null,
  address varchar(200) not null,
  type integer not null,
  constraint fk_house_t1 foreign key (type) references house_type (local_code),
  constraint fk_house_t2 foreign key (type) references house_type (federal_code),
  constraint fk_house_t3 foreign key (type) references house_type (state_code)
);











