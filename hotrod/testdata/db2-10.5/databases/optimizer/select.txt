DB2 Optimizer Results
=====================

DB2's optimizer seems to work like this:
 * The join order is based on cost (uses a Cost-based Optimizer).
 * For the optimizer to have better estimates on the join order cost, the statistics
   need to be up to date for each table. Run the following command on each table:
     call sysproc.admin_cmd('runstats on table <my_table> with distribution on all columns and detailed indexes all');
 * Of course, the existence of an index speeds up the execution.
 * However, DB2 does not always use the index. Sometimes it favors a Full Table Scan over 
   an Index Scan, as shown in case #2 below. It seems the optimizer expects a very low
   index selectivity in order to use the index. In this case it ignored the index when
   the selectivity was 0.041, but used it when the selectivity was 0.026.
 * The optimizer could be fooled and "pushed" to use a different join order using
   artificial join dependency, as explained in section "4.1.4 Preventing Join Orders You 
   Do Not Want", changing the join condition to:
     join order_item i on i.order_id = o.id + 0 * oc.id
 * DB2 chose a near-optimal execution plan; the only missing step was to delay a FETCH
   to filter the index result first, as described in the case #5 below. 

1. Optimizer use of index equality
----------------------------------

The optimizer DOES EXECUTE an "Index Range Scan" as shown below.

explain plan set querytag='full' for
select * from "order" o 
  where o.id between 22501 and 22704 -- selectivity = 204 / 50000 = 0.004

  $17 RETURN (2 io) (654045 cpu)
  .  $17 FETCH (2 io) (654045 cpu)
  .  .  $6 IXSCAN (1 io) (446993 cpu)
  .  .  .  [SQL180214131321950]
  .  .  [order]

explain plan set querytag='full' for
select * from "order" o 
  where o.id between ? and ? -- unknown selectivity when creating the SQL plan

  $13 RETURN (2 io) (424255 cpu)
  .  $13 NLJOIN (2 io) (424255 cpu)
  .  .  $0 TBSCAN (0 io) (565 cpu)
  .  .  .  [GENROW]
  .  .  $13 FETCH (2 io) (423690 cpu)
  .  .  .  $6 IXSCAN (1 io) (301265 cpu)
  .  .  .  .  [SQL180214131321950]
  .  .  .  [order]


2. Optimizer use of index range
-------------------------------

The optimizer DOES NOT EXECUTE an "Index Range Scan" as shown below. It seems
the optimizer considers the Table Scan is cheaper than an Index Scan due to the 
distribution.

explain plan set querytag='full' for
select * from "order" o 
  where o.placed > '2017-11-15' -- selectivity = 2038 / 50000 = 0.041

  $376 RETURN (388 io) (110793360 cpu)
  .  $376 TBSCAN (388 io) (110793360 cpu)
  .  .  [order]

If we change the filter condition, the optimizer now PERFORMS an Index Scan.

explain plan set querytag='full' for
select count(*) from "order" o 
  where o.placed > '2017-12-15' -- selectivity = 1279 / 50000 = 0.026

  $24 RETURN (3 io) (2677486 cpu)
  .  $24 GRPBY (3 io) (2676596 cpu)
  .  .  $24 IXSCAN (3 io) (2342418 cpu)
  .  .  .  [IX_ORDER_PLACED]

explain plan set querytag='full' for
select count(*) from "order" o
  where o.placed > ? -- unknown selectivity when creating the SQL plan

  $38 RETURN (5 io) (4135177 cpu)
  .  $38 GRPBY (5 io) (4134287 cpu)
  .  .  $38 IXSCAN (5 io) (3613407 cpu)
  .  .  .  [IX_ORDER_PLACED]


3. Dual index usage
-------------------

The optimizer PERFORMS two "Index Range Scan"s, followed by a "sort" and a 
"Row ID Scan". 

explain plan set querytag='full' for
select * from "order" o 
  where o.placed > '2018-02-01' -- selectivity =  82 / 50000 = 0.0016
    or o.placed < '2012-10-21'  -- selectivity = 176 / 50000 = 0.0035
    -- total selectivity = 0.0016 + 0.0035 = 0.0051 

  $147 RETURN (148 io) (2303250 cpu)
  .  $147 FETCH (148 io) (2303250 cpu)
  .  .  $13 RIDSCN (2 io) (802089 cpu)
  .  .  .  $6 SORT (1 io) (258992 cpu)
  .  .  .  .  $6 IXSCAN (1 io) (213172 cpu)
  .  .  .  .  .  [IX_ORDER_PLACED]
  .  .  .  $6 SORT (1 io) (544510 cpu)
  .  .  .  .  $6 IXSCAN (1 io) (392456 cpu)
  .  .  .  .  .  [IX_ORDER_PLACED]
  .  .  [order]

explain plan set querytag='full' for
select * from "order" o 
  where o.placed > ? -- unknown selectivity when creating the SQL plan
    or o.placed < ? -- unknown selectivity when creating the SQL plan

  $387 RETURN (388 io) (149645376 cpu)
  .  $387 TBSCAN (388 io) (149645376 cpu)
  .  .  [order]


4. Use index for like operator
------------------------------

The optimizer PERFORMS two "Index Range Scan"s, followed by an "Index AND" (ANDing of the 
results of multiple index scans), followed by a "sort", and "Row ID Scan".

explain plan set querytag='full' for
select * from customer 
  where first_name like 'JO%' -- selectivity = 1589 / 30000 = 0.053
    and last_name like 'CO%'  -- selectivity = 1550 / 30000 = 0.052
    -- estimated selectivity = 0.053 * 0.052 = 0.0028
    -- real selectivity      = 84 / 3000 = 0.0028

  $53 RETURN (35 io) (3062792 cpu)
  .  $53 FETCH (35 io) (3062792 cpu)
  .  .  $24 RIDSCN (3 io) (2814097 cpu)
  .  .  .  $24 SORT (3 io) (2812810 cpu)
  .  .  .  .  $24 IXAND (3 io) (2802981 cpu)
  .  .  .  .  .  $7 IXSCAN (1 io) (835085 cpu)
  .  .  .  .  .  .  [IX_CUSTOMER_FIRST]
  .  .  .  .  .  $17 IXSCAN (2 io) (1755936 cpu)
  .  .  .  .  .  .  [IX_CUSTOMER_LAST]
  .  .  [CUSTOMER]

explain plan set querytag='full' for
select * from customer 
  where first_name like ? -- unknown selectivity when creating the SQL plan
    and last_name like ? -- unknown selectivity when creating the SQL plan

  $122 RETURN (73 io) (9761299 cpu)
  .  $122 FETCH (73 io) (9761299 cpu)
  .  .  $58 RIDSCN (8 io) (8931802 cpu)
  .  .  .  $58 SORT (8 io) (8930515 cpu)
  .  .  .  .  $58 IXAND (8 io) (8858055 cpu)
  .  .  .  .  .  $21 IXSCAN (2 io) (3446663 cpu)
  .  .  .  .  .  .  [IX_CUSTOMER_FIRST]
  .  .  .  .  .  $37 IXSCAN (5 io) (4868732 cpu)
  .  .  .  .  .  .  [IX_CUSTOMER_LAST]
  .  .  [CUSTOMER]


5. Full Test of the Join order
------------------------------

The optimizer did not choose the best join order.

 * The chosen join order seems to be optimal or close to optimal. It uses:
      -> customer -> order -> code(oc) -> order_item -> code(ic) -> product -> shipment -> address
   Cost: ... 
   
   Note: Even though the plan seems optimal, there's still one improvement DB2 does not produce. Right after
         reading the code(oc) table, the optimizer reads the order_item index using an IXSCAN (22) and 
         performs a FETCH (21) over order_item. However, it seems it could be better to delay this FETCH (22)
         for later since the NLJOIN (7) could potentially filter out many index entries. If this is the case
         the FETCH on the order_item table (with the highest cardinality) could potentially be reduced quite 
         a bit.
   
 * The best join path appears to be:
      -> customer -> order -> code(oc) -> order_item -> code(ic) -> product -> shipment -> address
   Cost: 84        + 3      + 9         + 10          + 10        + 6        + 6         + 6 = 134 rows read.

explain plan set querytag='full' for
select
    c.phone_number, c.first_name, c.last_name, c.address_id,
    a.id, a.line1, a.line2, a.city, a.state, a.zip_code,
    i.deferred_shipment_date, i.quantity, ic.caption, oc.caption,
    p.description, s.shipped_on
  from
    "order" o
    join order_item i on i.order_id = o.id
    left join product p on i.product_id = p.id
    join customer c on c.id = o.customer_id
    left join shipment s on s.id = o.shipment_id
    left join address a on a.id = s.address_id
    join code oc on oc.id = o.status_code
    join code ic on ic.id = i.status_code
  where
        c.first_name like 'JO%' -- selectivity = 1589 / 30000 = 0.053
    and c.last_name like 'CO%'  -- selectivity = 1550 / 30000 = 0.052
    and oc.type = 'CLOSED'      -- selectivity = 4 / 8 = 0.5
    and ic.type = 'CLOSED'      -- selectivity = 4 / 8 = 0.5
    and o.placed > '2017-11-15' -- selectivity = 2038 / 50000 = 0.041
  order by
    c.id, o.id desc, s.id, i.id

The join order is read by higher depth first; at same depth, use the latter first.

  $247 RETURN (63 io) (3808627 cpu)
  .  $247 NLJOIN (63 io) (3808627 cpu)
  .  .  $233 TBSCAN (61 io) (3736377 cpu)
  .  .  .  $233 SORT (61 io) (3734724 cpu)
  .  .  .  .  $233 NLJOIN (61 io) (3731596 cpu)
  .  .  .  .  .  $219 NLJOIN (59 io) (3645506 cpu)
  .  .  .  .  .  .  $206 NLJOIN (57 io) (3571323 cpu)
  .  .  .  .  .  .  .  $199 NLJOIN (56 io) (3513439 cpu)
  .  .  .  .  .  .  .  .  $186 NLJOIN (54 io) (3422890 cpu)
  .  .  .  .  .  .  .  .  .  $179 NLJOIN (53 io) (3365801 cpu)
  .  .  .  .  .  .  .  .  .  .  $53 FETCH (35 io) (3062792 cpu)
  .  .  .  .  .  .  .  .  .  .  .  $24 RIDSCN (3 io) (2814097 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  $24 SORT (3 io) (2812810 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  .  $24 IXAND (3 io) (2802981 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  $7 IXSCAN (1 io) (835085 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [IX_CUSTOMER_FIRST]
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  $17 IXSCAN (2 io) (1755936 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [IX_CUSTOMER_LAST]
  .  .  .  .  .  .  .  .  .  .  .  [CUSTOMER]
  .  .  .  .  .  .  .  .  .  .  $14 FETCH (2 io) (73682 cpu)
  .  .  .  .  .  .  .  .  .  .  .  $13 IXSCAN (2 io) (71819 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  [IX_ORDER_CUSTOMER_PLACED]
  .  .  .  .  .  .  .  .  .  .  .  [order]
  .  .  .  .  .  .  .  .  .  $6 FETCH (1 io) (57089 cpu)
  .  .  .  .  .  .  .  .  .  .  $0 IXSCAN (0 io) (41824 cpu)
  .  .  .  .  .  .  .  .  .  .  .  [SQL180214131320440]
  .  .  .  .  .  .  .  .  .  .  [CODE]
  .  .  .  .  .  .  .  .  $20 FETCH (3 io) (93948 cpu)
  .  .  .  .  .  .  .  .  .  $13 IXSCAN (2 io) (77317 cpu)
  .  .  .  .  .  .  .  .  .  .  [IX_ORDER_ID_STATUS]
  .  .  .  .  .  .  .  .  .  [ORDER_ITEM]
  .  .  .  .  .  .  .  $6 FETCH (1 io) (57884 cpu)
  .  .  .  .  .  .  .  .  $0 IXSCAN (0 io) (41824 cpu)
  .  .  .  .  .  .  .  .  .  [SQL180214131320440]
  .  .  .  .  .  .  .  .  [CODE]
  .  .  .  .  .  .  $13 FETCH (1 io) (74183 cpu)
  .  .  .  .  .  .  .  $6 IXSCAN (1 io) (59366 cpu)
  .  .  .  .  .  .  .  .  [SQL180214131321360]
  .  .  .  .  .  .  .  [PRODUCT]
  .  .  .  .  .  $13 FETCH (2 io) (86089 cpu)
  .  .  .  .  .  .  $6 IXSCAN (1 io) (71269 cpu)
  .  .  .  .  .  .  .  [SQL180214131321080]
  .  .  .  .  .  .  [SHIPMENT]
  .  .  $13 FETCH (2 io) (72250 cpu)
  .  .  .  $6 IXSCAN (1 io) (57430 cpu)
  .  .  .  .  [SQL180214131320750]
  .  .  .  [ADDRESS]

Or, in "db2exfmt" format:

                                                                                                                                                                                              Rows 
                                                                                                                                                                                             RETURN
                                                                                                                                                                                             (   1)
                                                                                                                                                                                              Cost 
                                                                                                                                                                                               I/O 
                                                                                                                                                                                               |
                                                                                                                                                                                            0.455387 
                                                                                                                                                                                            >^NLJOIN
                                                                                                                                                                                            (   2)
                                                                                                                                                                                             246.993 
                                                                                                                                                                                             63.7837 
                                                                                                                                                                                       /-------+--------\
                                                                                                                                                                                  0.455387                 1 
                                                                                                                                                                                   TBSCAN               FETCH 
                                                                                                                                                                                   (   3)               (  29)
                                                                                                                                                                                   233.442              13.5505 
                                                                                                                                                                                   61.7837                 2 
                                                                                                                                                                                     |                /---+----\
                                                                                                                                                                                  0.455387           1          1800 
                                                                                                                                                                                   SORT           IXSCAN   TABLE: USER1   
                                                                                                                                                                                   (   4)         (  30)       ADDRESS
                                                                                                                                                                                   233.442        6.78128        Q11
                                                                                                                                                                                   61.7837           1 
                                                                                                                                                                                     |              |
                                                                                                                                                                                  0.455387         1800 
                                                                                                                                                                                  >^NLJOIN    INDEX: SYSIBM  
                                                                                                                                                                                  (   5)    SQL180209140442490
                                                                                                                                                                                   233.441          Q11
                                                                                                                                                                                   61.7837 
                                                                                                                                                       /-----------------------------+-----------------------------\
                                                                                                                                                  0.455387                                                            1 
                                                                                                                                                  >^NLJOIN                                                         FETCH 
                                                                                                                                                  (   6)                                                           (  27)
                                                                                                                                                   219.887                                                         13.5544 
                                                                                                                                                   59.7837                                                            2 
                                                                                                                        /----------------------------+-----------------------------\                             /---+---\
                                                                                                                   0.455387                                                           1                         1         19000 
                                                                                                                    ^NLJOIN                                                        FETCH                     IXSCAN  TABLE: USER1   
                                                                                                                    (   7)                                                         (  25)                    (  28)     SHIPMENT
                                                                                                                    206.336                                                        13.551                    6.7852        Q9
                                                                                                                    57.7837                                                           2                         1 
                                                                                          /---------------------------+----------------------------\                             /---+----\                    |
                                                                                     0.910774                                                        0.5                        1          4300               19000 
                                                                                      NLJOIN                                                       FETCH                     IXSCAN   TABLE: USER1       INDEX: SYSIBM  
                                                                                      (   8)                                                       (  23)                    (  26)       PRODUCT      SQL180209140443030
                                                                                      199.554                                                      6.7814                    6.78183        Q7                 Q9
                                                                                      56.7837                                                         1                         1 
                                                              /-------------------------+-------------------------\                             /----+----\                    |
                                                         0.303814                                                 2.9978                       1             8                4300 
                                                          ^NLJOIN                                                 FETCH                     IXSCAN    TABLE: USER1       INDEX: SYSIBM  
                                                          (   9)                                                  (  21)                    (  24)         CODE        SQL180209140443620
                                                          185.999                                                 20.3216                  0.0118532        Q5                 Q7
                                                          54.7837                                                    3                         0 
                                       /--------------------+---------------------\                             /---+----\                    |
                                  0.607628                                          0.5                     2.9978       149890                8 
                                   NLJOIN                                         FETCH                     IXSCAN   TABLE: USER1       INDEX: SYSIBM  
                                   (  10)                                         (  19)                    (  22)     ORDER_ITEM     SQL180209140441890
                                   179.217                                        6.78118                   13.5519        Q3                 Q5
                                   53.7837                                           1                         2 
                         /-----------+-----------\                             /----+----\                    |
                     9.0123                     0.0674221                     1             8               149890 
                     FETCH                       FETCH                     IXSCAN    TABLE: USER1       INDEX: USER1   
                     (  11)                      (  17)                    (  20)         CODE        IX_ORDER_ID_STATUS
                     53.0846                     14.007                   0.0118532        Q2                 Q3
                     35.1515                     2.06742                      0 
                   /---+----\                 /----+----\                    |
               9.0123        30000       0.0674221       50000                8 
               RIDSCN   TABLE: USER1      IXSCAN    TABLE: USER1       INDEX: SYSIBM  
               (  12)      CUSTOMER       (  18)         order       SQL180209140441890
               24.8503        Q4          13.5503         Q1                 Q2
               3.55547                       2 
                 |                          |
               9.0123                      50000 
               SORT                   INDEX: USER1   
               (  13)            IX_ORDER_CUSTOMER_PLACED
               24.8499                      Q1
               3.55547 
                 |
               9.0123 
               IXAND 
               (  14)
               24.8471 
               3.55547 
          /------+-------\
      352.668            766.64 
      IXSCAN             IXSCAN
      (  15)             (  16)
      7.00167            17.7854 
         1               2.55547 
        |                  |
       30000              30000 
  INDEX: USER1       INDEX: USER1   
 IX_CUSTOMER_FIRST  IX_CUSTOMER_LAST
        Q4                 Q4

    

explain plan set querytag='full' for
select
    c.phone_number, c.first_name, c.last_name, c.address_id,
    a.id, a.line1, a.line2, a.city, a.state, a.zip_code,
    i.deferred_shipment_date, i.quantity, ic.caption, oc.caption,
    p.description, s.shipped_on
  from
    "order" o
    join order_item i on i.order_id = o.id
    left join product p on i.product_id = p.id
    join customer c on c.id = o.customer_id
    left join shipment s on s.id = o.shipment_id
    left join address a on a.id = s.address_id
    join code oc on oc.id = o.status_code
    join code ic on ic.id = i.status_code
  where
        c.first_name like ? -- unknown selectivity when creating the SQL plan
    and c.last_name like ? -- unknown selectivity when creating the SQL plan
    and oc.type = 'CLOSED'      -- selectivity = 4 / 8 = 0.5
    and ic.type = 'CLOSED'      -- selectivity = 4 / 8 = 0.5
    and o.placed > ? -- unknown selectivity when creating the SQL plan
  order by
    c.id, o.id desc, s.id, i.id
    
  $673 RETURN (521 io) (130014848 cpu)
  .  $673 NLJOIN (521 io) (130014848 cpu)
  .  .  $632 TBSCAN (515 io) (129867784 cpu)
  .  .  .  $632 SORT (515 io) (129865488 cpu)
  .  .  .  .  $632 NLJOIN (515 io) (129858032 cpu)
  .  .  .  .  .  $591 HSJOIN (509 io) (129668984 cpu)
  .  .  .  .  .  .  $37 TBSCAN (40 io) (7695165 cpu)
  .  .  .  .  .  .  .  [PRODUCT]
  .  .  .  .  .  .  $553 HSJOIN (469 io) (121223320 cpu)
  .  .  .  .  .  .  .  $546 NLJOIN (468 io) (121149856 cpu)
  .  .  .  .  .  .  .  .  $505 HSJOIN (462 io) (121005600 cpu)
  .  .  .  .  .  .  .  .  .  $498 HSJOIN (461 io) (120933880 cpu)
  .  .  .  .  .  .  .  .  .  .  $376 TBSCAN (388 io) (110793360 cpu)
  .  .  .  .  .  .  .  .  .  .  .  [order]
  .  .  .  .  .  .  .  .  .  .  $122 FETCH (73 io) (9761299 cpu)
  .  .  .  .  .  .  .  .  .  .  .  $58 RIDSCN (8 io) (8931802 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  $58 SORT (8 io) (8930515 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  .  $58 IXAND (8 io) (8858055 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  $21 IXSCAN (2 io) (3446663 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [IX_CUSTOMER_FIRST]
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  $37 IXSCAN (5 io) (4868732 cpu)
  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  [IX_CUSTOMER_LAST]
  .  .  .  .  .  .  .  .  .  .  .  [CUSTOMER]
  .  .  .  .  .  .  .  .  .  $6 TBSCAN (1 io) (69651 cpu)
  .  .  .  .  .  .  .  .  .  .  [CODE]
  .  .  .  .  .  .  .  .  $20 FETCH (3 io) (93948 cpu)
  .  .  .  .  .  .  .  .  .  $13 IXSCAN (2 io) (77317 cpu)
  .  .  .  .  .  .  .  .  .  .  [IX_ORDER_ID_STATUS]
  .  .  .  .  .  .  .  .  .  [ORDER_ITEM]
  .  .  .  .  .  .  .  $6 TBSCAN (1 io) (69651 cpu)
  .  .  .  .  .  .  .  .  [CODE]
  .  .  .  .  .  $13 FETCH (2 io) (86089 cpu)
  .  .  .  .  .  .  $6 IXSCAN (1 io) (71269 cpu)
  .  .  .  .  .  .  .  [SQL180214131321080]
  .  .  .  .  .  .  [SHIPMENT]
  .  .  $13 FETCH (2 io) (72250 cpu)
  .  .  .  $6 IXSCAN (1 io) (57430 cpu)
  .  .  .  .  [SQL180214131320750]
  .  .  .  [ADDRESS]
    