// Autogenerated by Empusa. Do not edit.

package primitives;

import helpers.Database1SessionFactory;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.OrderBy;
import org.hotrod.runtime.interfaces.Persistable;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;

import primitives.AbcDAOPrimitives.AbcDAOOrderBy;
import primitives.DefDAOPrimitives.DefDAOOrderBy;
import dao.AbcDAO;
import dao.DefDAO;

public class AbcDAOPrimitives implements Persistable<AbcDAO, AbcDAOOrderBy>,
    Serializable {

  private static final long serialVersionUID = 1L;

  // DAO Properties (database columns)

  protected java.lang.Integer idn = null;
  protected java.lang.Integer id = null;
  protected java.lang.String volume = null;
  protected java.lang.Integer chapter = null;
  protected java.lang.Integer section = null;
  protected java.lang.Integer page = null;
  protected java.lang.String description = null;

  // Select by Primary Key

  public static AbcDAO selectByPK(final Integer id) throws SQLException {
    SqlSession sqlSession = null;
    try {
      sqlSession = Database1SessionFactory.getInstance().getSqlSessionFactory()
          .openSession();
      return selectByPK(sqlSession, id);
    } finally {
      if (sqlSession != null) {
        sqlSession.close();
      }
    }
  }

  public static AbcDAO selectByPK(final SqlSession sqlSession, final Integer id)
      throws SQLException {
    AbcDAO pk = new AbcDAO();
    pk.setId(id);
    return sqlSession.selectOne("simpletests.dao.selectAbc", pk);
  }

  // Select by Unique Indexes

  public static AbcDAO selectByUISectionPage(final Integer section,
      final Integer page) throws SQLException {
    SqlSession sqlSession = null;
    try {
      sqlSession = Database1SessionFactory.getInstance().getSqlSessionFactory()
          .openSession();
      return selectByUISectionPage(sqlSession, section, page);
    } finally {
      if (sqlSession != null) {
        sqlSession.close();
      }
    }
  }

  public static AbcDAO selectByUISectionPage(final SqlSession sqlSession,
      final Integer section, final Integer page) throws SQLException {
    AbcDAO ui = new AbcDAO();
    ui.setSection(section);
    ui.setPage(page);
    return sqlSession.selectOne("simpletests.dao.selectAbc", ui);
  }

  // Select with filter and order

  public List<AbcDAO> select(final AbcDAOOrderBy... orderBies)
      throws SQLException {
    SqlSession sqlSession = null;
    try {
      sqlSession = Database1SessionFactory.getInstance().getSqlSessionFactory()
          .openSession();
      return select(sqlSession, orderBies);
    } finally {
      if (sqlSession != null) {
        sqlSession.close();
      }
    }
  }

  public List<AbcDAO> select(final SqlSession sqlSession,
      final AbcDAOOrderBy... orderBies) throws SQLException {
    DaoWithOrder<AbcDAOPrimitives, AbcDAOOrderBy> dwo = //
    new DaoWithOrder<AbcDAOPrimitives, AbcDAOOrderBy>(this, orderBies);
    return sqlSession.selectList("simpletests.dao.selectAbc", dwo);
  }

  // Select parents by FKs

  public class DefParentSelector {

    public DefDAO byFkId() throws SQLException {
      SqlSession sqlSession = null;
      try {
        sqlSession = Database1SessionFactory.getInstance()
            .getSqlSessionFactory().openSession();
        return byFkId(sqlSession);
      } finally {
        if (sqlSession != null) {
          sqlSession.close();
        }
      }
    }

    private DefDAO byFkId(final SqlSession sqlSession) throws SQLException {
      return DefDAOPrimitives.selectByUIAbcId(sqlSession, id);
    }

  }

  public DefParentSelector selectParentDef() {
    return new DefParentSelector();
  }

  // Select by Exported FKs

  public class DefChildrenSelector {

    public List<DefDAO> byAbcId(final DefDAOOrderBy... orderBies)
        throws SQLException {
      SqlSession sqlSession = null;
      try {
        sqlSession = Database1SessionFactory.getInstance()
            .getSqlSessionFactory().openSession();
        return byAbcId(sqlSession, orderBies);
      } finally {
        if (sqlSession != null) {
          sqlSession.close();
        }
      }
    }

    public List<DefDAO> byAbcId(final SqlSession sqlSession,
        final DefDAOOrderBy... orderBies) throws SQLException {
      DefDAO filter = new DefDAO();
      filter.setAbcId(id);
      return filter.select(sqlSession, orderBies);
    }

    public List<DefDAO> byAbcSectionAbcPage(final DefDAOOrderBy... orderBies)
        throws SQLException {
      SqlSession sqlSession = null;
      try {
        sqlSession = Database1SessionFactory.getInstance()
            .getSqlSessionFactory().openSession();
        return byAbcSectionAbcPage(sqlSession, orderBies);
      } finally {
        if (sqlSession != null) {
          sqlSession.close();
        }
      }
    }

    public List<DefDAO> byAbcSectionAbcPage(final SqlSession sqlSession,
        final DefDAOOrderBy... orderBies) throws SQLException {
      DefDAO filter = new DefDAO();
      filter.setAbcSection(section);
      filter.setAbcPage(page);
      return filter.select(sqlSession, orderBies);
    }

  }

  public DefChildrenSelector selectChildrenDef() {
    return new DefChildrenSelector();
  }

  // Insert

  public int insert() throws SQLException {
    SqlSession sqlSession = null;
    try {
      sqlSession = Database1SessionFactory.getInstance().getSqlSessionFactory()
          .openSession();
      int rows = insert(sqlSession);
      sqlSession.commit();
      return rows;
    } finally {
      if (sqlSession != null) {
        sqlSession.close();
      }
    }
  }

  public int insert(final SqlSession sqlSession) throws SQLException {
    return sqlSession.insert("simpletests.dao.insertAbc", this);
  }

  // Update

  public int updateByPK() throws SQLException {
    SqlSession sqlSession = null;
    try {
      sqlSession = Database1SessionFactory.getInstance().getSqlSessionFactory()
          .openSession();
      int rows = updateByPK(sqlSession);
      sqlSession.commit();
      return rows;
    } finally {
      if (sqlSession != null) {
        sqlSession.close();
      }
    }
  }

  public int updateByPK(final SqlSession sqlSession) throws SQLException {
    return sqlSession.update("simpletests.dao.insertAbc", this);
  }

  public int updateByExample(final AbcDAO values) throws SQLException {
    SqlSession sqlSession = null;
    try {
      sqlSession = Database1SessionFactory.getInstance().getSqlSessionFactory()
          .openSession();
      int rows = updateByExample(sqlSession, values);
      sqlSession.commit();
      return rows;
    } finally {
      if (sqlSession != null) {
        sqlSession.close();
      }
    }
  }

  public int updateByExample(final SqlSession sqlSession, final AbcDAO values)
      throws SQLException {
    UpdateByExampleDao<AbcDAOPrimitives> fvd = //
    new UpdateByExampleDao<AbcDAOPrimitives>(this, values);
    return sqlSession.update("simpletests.dao.insertAbc", fvd);
  }

  // Delete

  public int deleteByPK() throws SQLException {
    SqlSession sqlSession = null;
    try {
      sqlSession = Database1SessionFactory.getInstance().getSqlSessionFactory()
          .openSession();
      int rows = deleteByPK(sqlSession);
      sqlSession.commit();
      return rows;
    } finally {
      if (sqlSession != null) {
        sqlSession.close();
      }
    }
  }

  public int deleteByPK(final SqlSession sqlSession) throws SQLException {
    return sqlSession.delete("simpletests.dao.insertAbc", this);
  }

  public int deleteByExample() throws SQLException {
    SqlSession sqlSession = null;
    try {
      sqlSession = Database1SessionFactory.getInstance().getSqlSessionFactory()
          .openSession();
      int rows = deleteByExample(sqlSession);
      sqlSession.commit();
      return rows;
    } finally {
      if (sqlSession != null) {
        sqlSession.close();
      }
    }
  }

  public int deleteByExample(final SqlSession sqlSession) throws SQLException {
    return sqlSession.delete("simpletests.dao.insertAbc", this);
  }

  // Getters & Setters

  public final java.lang.Integer getIdn() {
    return this.idn;
  }

  public final void setIdn(final java.lang.Integer idn) {
    this.idn = idn;
  }

  public final java.lang.Integer getId() {
    return this.id;
  }

  public final void setId(final java.lang.Integer id) {
    this.id = id;
  }

  public final java.lang.String getVolume() {
    return this.volume;
  }

  public final void setVolume(final java.lang.String volume) {
    if (volume != null && volume.length() > 0) {
      this.volume = volume.substring(0,
          (volume.length() <= 10 ? volume.length() : 10));
    } else {
      this.volume = volume;
    }
  }

  public final java.lang.Integer getChapter() {
    return this.chapter;
  }

  public final void setChapter(final java.lang.Integer chapter) {
    this.chapter = chapter;
  }

  public final java.lang.Integer getSection() {
    return this.section;
  }

  public final void setSection(final java.lang.Integer section) {
    this.section = section;
  }

  public final java.lang.Integer getPage() {
    return this.page;
  }

  public final void setPage(final java.lang.Integer page) {
    this.page = page;
  }

  public final java.lang.String getDescription() {
    return this.description;
  }

  public final void setDescription(final java.lang.String description) {
    if (description != null && description.length() > 0) {
      this.description = description.substring(0,
          (description.length() <= 100 ? description.length() : 100));
    } else {
      this.description = description;
    }
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("[");
    sb.append(this.idn + ", ");
    sb.append(this.id + ", ");
    sb.append(this.volume + ", ");
    sb.append(this.chapter + ", ");
    sb.append(this.section + ", ");
    sb.append(this.page + ", ");
    sb.append(this.description + "]");
    return sb.toString();
  }

  // DAO Ordering

  public enum AbcDAOOrderBy implements OrderBy {

    IDN("ABC", "IDN", true), //
    IDN$DESC("ABC", "IDN", false), //
    ID("ABC", "ID", true), //
    ID$DESC("ABC", "ID", false), //
    VOLUME("ABC", "VOLUME", true), //
    VOLUME$DESC("ABC", "VOLUME", false), //
    CHAPTER("ABC", "CHAPTER", true), //
    CHAPTER$DESC("ABC", "CHAPTER", false), //
    SECTION("ABC", "SECTION", true), //
    SECTION$DESC("ABC", "SECTION", false), //
    PAGE("ABC", "PAGE", true), //
    PAGE$DESC("ABC", "PAGE", false), //
    DESCRIPTION("ABC", "DESCRIPTION", true), //
    DESCRIPTION$DESC("ABC", "DESCRIPTION", false);

    private AbcDAOOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }
  }

}
