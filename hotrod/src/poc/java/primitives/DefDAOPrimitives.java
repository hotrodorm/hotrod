// Autogenerated by Empusa. Do not edit.

package primitives;

import helpers.Database1SessionFactory;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import dao.DefDAO;
import empusambcore.persistence.OrderBy;

public abstract class DefDAOPrimitives implements Serializable {

  private static final long serialVersionUID = 1L;

  // DAO Properties (database columns)

  protected java.lang.Integer defId = null;
  protected java.lang.Integer abcId = null;
  protected java.lang.Integer abcSection = null;
  protected java.lang.Integer abcPage = null;
  protected java.lang.String descr = null;

  // Select with filter and order

  // Select with filter and order

  public List<DefDAO> select(final DefDAOOrderBy... orderBies)
      throws SQLException {
    SqlSession sqlSession = null;
    try {
      sqlSession = Database1SessionFactory.getInstance().getSqlSessionFactory()
          .openSession();
      return select(sqlSession, orderBies);
    } finally {
      if (sqlSession != null) {
        sqlSession.close();
      }
    }
  }

  public List<DefDAO> select(final SqlSession sqlSession,
      final DefDAOOrderBy... orderBies) throws SQLException {
    // DefWithOrder<DefDAOPrimitives, DefDAOOrderBy> dwo = //
    // new DefWithOrder<DefDAOPrimitives, DefDAOOrderBy>(this, orderBies);
    // return sqlSession.selectList("simpletests.dao.selectDef", dwo);
    return sqlSession.selectList("simpletests.dao.selectDef", null);
  }

  // Select by Unique Indexes

  public static DefDAO selectByUIAbcId(final SqlSession sqlSession,
      final Integer abcId) throws SQLException {
    DefDAO ui = new DefDAO();
    ui.setAbcId(abcId);
    return sqlSession.selectOne("simpletests.dao.selectAbc", ui);
  }

  public static DefDAO selectByUIAbcSectionAbcPage(final SqlSession sqlSession,
      final Integer abcSection, final Integer abcPage) throws SQLException {
    DefDAO ui = new DefDAO();
    ui.setAbcSection(abcSection);
    ui.setAbcPage(abcPage);
    return sqlSession.selectOne("simpletests.dao.selectAbc", ui);
  }

  // Getters & Setters

  public final java.lang.Integer getDefId() {
    return this.defId;
  }

  public final void setDefId(final java.lang.Integer defId) {
    this.defId = defId;
  }

  public final java.lang.Integer getAbcId() {
    return this.abcId;
  }

  public final void setAbcId(final java.lang.Integer abcId) {
    this.abcId = abcId;
  }

  public final java.lang.Integer getAbcSection() {
    return this.abcSection;
  }

  public final void setAbcSection(final java.lang.Integer abcSection) {
    this.abcSection = abcSection;
  }

  public final java.lang.Integer getAbcPage() {
    return this.abcPage;
  }

  public final void setAbcPage(final java.lang.Integer abcPage) {
    this.abcPage = abcPage;
  }

  public final java.lang.String getDescr() {
    return this.descr;
  }

  public final void setDescr(final java.lang.String descr) {
    if (descr != null && descr.length() > 0) {
      this.descr = descr.substring(0, (descr.length() <= 20 ? descr.length()
          : 20));
    } else {
      this.descr = descr;
    }
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("[");
    sb.append(this.defId + ", ");
    sb.append(this.abcId + ", ");
    sb.append(this.abcSection + ", ");
    sb.append(this.abcPage + ", ");
    sb.append(this.descr + "]");
    return sb.toString();
  }

  // DAO Ordering

  public enum DefDAOOrderBy implements OrderBy {

    DEF_ID("DEF", "IDN", true), //
    DEF_ID$DESC("DEF", "IDN", false), //
    ABC_ID("DEF", "ABC_ID", true), //
    ABC_ID$DESC("DEF", "ABC_ID", false), //
    ABC_SECTION("DEF", "ABC_SECTION", true), //
    ABC_SECTION$DESC("DEF", "ABC_SECTION", false), //
    ABC_PAGE("DEF", "ABC_PAGE", true), //
    ABC_PAGE$DESC("DEF", "ABC_PAGE", false), //
    DESCR("DEF", "DESCR", true), //
    DESCRDESC("DEF", "DESCR", false);

    private DefDAOOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

}
