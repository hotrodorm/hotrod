package org.hotrod.generator.mybatis;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hotrod.ant.Constants;
import org.hotrod.ant.ControlledException;
import org.hotrod.ant.UncontrolledException;
import org.hotrod.config.CustomDAOTag;
import org.hotrod.config.HotRodFragmentConfigTag;
import org.hotrod.config.QueryTag;
import org.hotrod.config.SQLParameter;
import org.hotrod.config.SequenceTag;
import org.hotrod.exceptions.SequencesNotSupportedException;
import org.hotrod.runtime.tx.TxDemarcator;
import org.hotrod.runtime.tx.TxManager;
import org.hotrod.runtime.util.ListWriter;
import org.hotrod.utils.ClassPackage;
import org.hotrod.utils.SUtils;
import org.hotrod.utils.identifiers.Identifier;

public class CustomDAO {

  private DataSetLayout layout;
  private CustomDAOTag tag;

  private MyBatisGenerator generator;

  private ClassPackage fragmentPackage;

  private CustomDAOMapper mapper = null;

  private Writer w;

  public CustomDAO(final CustomDAOTag tag, final DataSetLayout layout, final MyBatisGenerator generator) {
    this.tag = tag;
    this.layout = layout;
    this.generator = generator;

    HotRodFragmentConfigTag fragmentConfig = tag.getFragmentConfig();
    this.fragmentPackage = fragmentConfig != null && fragmentConfig.getFragmentPackage() != null
        ? fragmentConfig.getFragmentPackage() : null;

  }

  public void setMapper(final CustomDAOMapper mapPrimitives) {
    this.mapper = mapPrimitives;
  }

  public void generate() throws UncontrolledException, ControlledException {

    String className = this.getClassName() + ".java";
    File prim = new File(this.layout.getDaoPrimitivePackageDir(this.fragmentPackage), className);
    this.w = null;

    try {
      this.w = new BufferedWriter(new FileWriter(prim));

      writeClassHeader();

      for (SequenceTag s : this.tag.getSequences()) {
        writeSelectSequence(s);
      }

      for (QueryTag q : this.tag.getQueries()) {
        writeQuery(q);
      }

      writeTxManager();

      writeClassFooter();

    } catch (IOException e) {
      throw new UncontrolledException(
          "Could not generate DAO primitives class: could not write to file '" + prim.getName() + "'.", e);
    } catch (SequencesNotSupportedException e) {
      throw new ControlledException(e.getMessage());
    } finally {
      if (this.w != null) {
        try {
          this.w.close();
        } catch (IOException e) {
          throw new UncontrolledException(
              "Could not generate DAO primitives class: could not close file '" + prim.getName() + "'.", e);
        }
      }
    }

  }

  private void writeClassHeader() throws IOException {

    // Comment

    println("// Autogenerated by " + Constants.TOOL_NAME + " -- Do not edit.");
    println();

    // Package

    println("package " + this.layout.getDAOPrimitivePackage(this.fragmentPackage).getPackage() + ";");
    println();

    // Imports

    println("import java.sql.SQLException;");
    println();
    println("import org.apache.ibatis.session.SqlSession;");
    println("import org.apache.ibatis.session.SqlSessionFactory;");
    println("import " + TxManager.class.getName() + ";");
    println("import " + TxDemarcator.class.getName() + ";");
    println();

    // Class Signature

    println("public class " + this.getClassName() + " implements TxDemarcator {");
    println();

  }

  private void retrieveSqlSession() throws IOException {
    retrieveSqlSession(0);
  }

  /**
   * <pre>
   *     TxManager txm = null;
   *     try {
   *       txm = getTxManager();
   * </pre>
   */
  private void retrieveSqlSession(final int indent) throws IOException {
    String f = SUtils.getFiller(' ', indent * 2);
    println(f + "    TxManager txm = null;");
    println(f + "    try {");
    println(f + "      txm = getTxManager();");
    println(f + "      SqlSession sqlSession = txm.getSqlSession();");
  }

  private void releaseSqlSession() throws IOException {
    releaseSqlSession(0);
  }

  /**
   * <pre>
   *     } finally {
   *       if (txm != null && !txm.isTransactionOngoing()) {
   *         txm.close();
   *       }
   *     }
   * </pre>
   */

  private void releaseSqlSession(final int indent) throws IOException {
    String f = SUtils.getFiller(' ', indent * 2);
    println(f + "    } finally {");
    println(f + "      if (txm != null && !txm.isTransactionOngoing()) {");
    println(f + "        txm.close();");
    println(f + "      }");
    println(f + "    }");
  }

  /**
   * <pre>
   * public static long selectSequenceSeqCodes() throws SQLException {
   *   TxManager txm = null;
   *   try {
   *     txm = getTxManager();
   *     SqlSession sqlSession = txm.getSqlSession();
   *     return selectSequenceSeqCodes(sqlSession);
   *   } finally {
   *     if (txm != null && !txm.isTransactionOngoing()) {
   *       txm.close();
   *     }
   *   }
   * }
   * 
   * public static long selectSequenceSeqCodes(final SqlSession sqlSession) {
   *   return sqlSession.selectOne("hotrod.test.generation.primitives.account.sequenceSeqCodes");
   * }
   * </pre>
   * 
   * @throws IOException
   * @throws SequencesNotSupportedException
   */

  private void writeSelectSequence(final SequenceTag tag) throws IOException, SequencesNotSupportedException {

    println("  // sequence " + tag.getName());
    println();
    println(
        ObjectDAOPrimitives.renderJavaComment(this.generator.getAdapter().renderSelectSequence(tag.getIdentifier())));
    println();

    println("  public static long " + tag.getJavaMethodName() + "()");
    println("      throws SQLException {");
    retrieveSqlSession();
    println("      return " + tag.getJavaMethodName() + "(sqlSession);");
    releaseSqlSession();
    println("  }");
    println();

    println("  public static long " + tag.getJavaMethodName() + "(final SqlSession sqlSession) throws SQLException {");
    println("    return (Long) sqlSession.selectOne(");
    println("      \"" + this.mapper.getFullMapperIdSelectSequence(tag) + "\");");
    println("  }");
    println();

  }

  /**
   * <pre>
   * 
   * public static int update-name() throws SQLException {
   *   TxManager txm = null;
   *   try {
   *     txm = getTxManager();
   *     SqlSession sqlSession = txm.getSqlSession();
   *     return update-name(sqlSession);
   *   } finally {
   *     if (txm != null && !txm.isTransactionOngoing()) {
   *       txm.close();
   *     }
   *   }
   * }
   * 
   * public static int update-name(final SqlSession sqlSession) throws SQLException {
   *   return sqlSession.update("hotrod.test.generation.primitives.account.sequenceSeqCodes");
   * }
   * 
   * </pre>
   * 
   * @throws IOException
   */

  private void writeQuery(final QueryTag tag) throws IOException {

    println("  // query " + tag.getJavaMethodName());
    println();
    println(ObjectDAOPrimitives.renderJavaComment(tag.getAugmentedSQL()));
    println();

    Identifier id = tag.getIdentifier();
    String methodName = id.getJavaMemberIdentifier();

    ListWriter pdef = new ListWriter(", ");
    ListWriter pcall = new ListWriter(", ");
    for (SQLParameter p : tag.getParameterDefinitions()) {
      pdef.add("final " + p.getJavaType() + " " + p.getName());
      pcall.add(p.getName());
    }
    String paramDef = pdef.toString();
    String paramCall = pcall.toString();

    // parameter class

    if (!tag.getParameterDefinitions().isEmpty()) {
      println("  public static class " + this.getParamClassName(tag) + " {");
      for (SQLParameter p : tag.getParameterDefinitions()) {
        println("    " + p.getJavaType() + " " + p.getName() + ";");
      }
      println("  }");
      println();
    }

    // main method

    print("  public static int " + methodName + "(");
    print(paramDef);
    println(") throws SQLException {");
    retrieveSqlSession();
    print("      int rows = " + methodName + "(sqlSession");
    if (!tag.getParameterDefinitions().isEmpty()) {
      print(", " + paramCall);
    }
    println(");");
    println("      if (!txm.isTransactionOngoing()) {");
    println("        txm.commit();");
    println("      }");
    println("      return rows;");
    releaseSqlSession();
    println("  }");
    println();

    // core method

    print("  public static int " + methodName + "(final SqlSession sqlSession");
    if (!tag.getParameterDefinitions().isEmpty()) {
      print(", " + paramDef);
    }
    println(") throws SQLException {");
    String objName = null;
    if (!tag.getParameterDefinitions().isEmpty()) {
      objName = provideObjectName(tag.getParameterDefinitions());
      println("    " + this.getParamClassName(tag) + " " + objName + " = new " + this.getParamClassName(tag) + "();");
      for (SQLParameter p : tag.getParameterDefinitions()) {
        println("    " + objName + "." + p.getName() + " = " + p.getName() + ";");
      }
    }
    println("    return sqlSession.update(");
    print("      \"" + this.mapper.getFullMapperIdQuery(tag) + "\"");
    if (!tag.getParameterDefinitions().isEmpty()) {
      print(", " + objName);
    }
    println(");");
    println("  }");
    println();

  }

  private String provideObjectName(final List<SQLParameter> params) {

    Set<String> existing = new HashSet<String>();
    for (SQLParameter p : params) {
      existing.add(p.getName().toLowerCase());
    }

    int i = 0;
    while (true) {
      String candidate = "param" + i;
      if (!existing.contains(candidate.toLowerCase())) {
        return candidate;
      }
      i++;
    }

  }

  /**
   * <pre>
   * // Transaction demarcation
   * 
   * private static TxManager txManager = null;
   * 
   * public static TxManager getTxManager() throws SQLException {
   *   if (txManager == null) {
   *     synchronized (AccountPrimitives.class) {
   *       if (txManager == null) {
   *         txManager = new TxManager(getSqlSessionFactory());
   *       }
   *     }
   *   }
   *   return txManager;
   * }
   * 
   * public static SqlSessionFactory getSqlSessionFactory() throws SQLException {
   *   return fulltest.FullTestDatabaseSessionFactory.getInstance().getSqlSessionFactory();
   * }
   * 
   * public static SqlSession getSqlSession() throws SQLException {
   *   return getSqlSessionFactory().openSession();
   * }
   * </pre>
   */
  private void writeTxManager() throws IOException {
    println("  // Transaction demarcation");
    println();
    println("  private static TxManager txManager = null;");
    println();
    println("  public static TxManager getTxManager() throws SQLException {");
    println("    if (txManager == null) {");
    println("      synchronized (" + this.getClassName() + ".class) {");
    println("        if (txManager == null) {");
    println("          txManager = new TxManager(getSqlSessionFactory());");
    println("        }");
    println("      }");
    println("    }");
    println("    return txManager;");
    println("  }");
    println();
    println("  public static SqlSessionFactory getSqlSessionFactory() throws SQLException {");
    println("    return " + this.layout.getSessionFactoryGetter() + ";");
    println("  }");
    println();
  }

  private void writeClassFooter() throws IOException {
    println("}");
  }

  // Identifiers

  public String getFullClassName() {
    return this.layout.getDAOPrimitivePackage(this.fragmentPackage).getFullClassName(getClassName());
  }

  public String getClassName() {
    return this.tag.getJavaClassName();
  }

  public String getFullParamClassName(final QueryTag u) {
    return this.getFullClassName() + "." + this.getParamClassName(u);
  }

  public String getParamClassName(final QueryTag u) {
    return "Param" + u.getIdentifier().getJavaClassIdentifier();
  }

  // Helpers

  private void print(final String txt) throws IOException {
    this.w.write(txt);
  }

  private void println(final String txt) throws IOException {
    this.w.write(txt);
    println();
  }

  private void println() throws IOException {
    this.w.write("\n");
  }

}
