package org.hotrod.generator.mybatis;

import java.util.LinkedHashMap;
import java.util.LinkedHashSet;

import org.apache.log4j.Logger;
import org.hotrod.config.AbstractDAOTag;
import org.hotrod.config.DisplayMode;
import org.hotrod.config.HotRodConfigTag;
import org.hotrod.config.HotRodFragmentConfigTag;
import org.hotrod.config.MyBatisTag;
import org.hotrod.config.TableTag;
import org.hotrod.config.ViewTag;
import org.hotrod.database.DatabaseAdapter;
import org.hotrod.exceptions.ControlledException;
import org.hotrod.exceptions.InvalidConfigurationFileException;
import org.hotrod.exceptions.UncontrolledException;
import org.hotrod.generator.CachedMetadata;
import org.hotrod.generator.DAOType;
import org.hotrod.generator.FileGenerator;
import org.hotrod.generator.HotRodGenerator;
import org.hotrod.generator.LiveGenerator;
import org.hotrod.metadata.DataSetMetadata;
import org.hotrod.metadata.EnumDataSetMetadata;
import org.hotrod.metadata.ExecutorDAOMetadata;
import org.hotrod.metadata.SelectMethodMetadata;
import org.hotrod.metadata.SelectMethodMetadata.SelectMethodReturnType;
import org.hotrod.metadata.TableDataSetMetadata;
import org.hotrod.metadata.VOMetadata;
import org.hotrod.metadata.VORegistry.SelectVOClass;
import org.hotrod.runtime.dynamicsql.SourceLocation;
import org.hotrod.utils.ClassPackage;
import org.hotrod.utils.LocalFileGenerator;
import org.nocrala.tools.database.tartarus.core.DatabaseLocation;

public class MyBatisGenerator extends HotRodGenerator implements LiveGenerator {

  private static transient final Logger log = Logger.getLogger(MyBatisGenerator.class);

  private MyBatisTag myBatisTag;

  private LinkedHashMap<DataSetMetadata, ObjectAbstractVO> abstractVos = new LinkedHashMap<DataSetMetadata, ObjectAbstractVO>();
  private LinkedHashMap<DataSetMetadata, ObjectVO> vos = new LinkedHashMap<DataSetMetadata, ObjectVO>();
  private LinkedHashMap<DataSetMetadata, ObjectDAO> daos = new LinkedHashMap<DataSetMetadata, ObjectDAO>();
  private LinkedHashMap<DataSetMetadata, Mapper> mappers = new LinkedHashMap<DataSetMetadata, Mapper>();
  private LinkedHashMap<EnumDataSetMetadata, EnumClass> enumClasses = new LinkedHashMap<EnumDataSetMetadata, EnumClass>();
  private MyBatisConfiguration myBatisConfig;

  private EntityDAORegistry entityDAORegistry = new EntityDAORegistry();

  public MyBatisGenerator(final CachedMetadata cachedMetadata, final DatabaseLocation loc, final HotRodConfigTag config,
      final DisplayMode displayMode, final boolean incrementalMode, final DatabaseAdapter adapter)
      throws UncontrolledException, ControlledException, InvalidConfigurationFileException {
    super(cachedMetadata, loc, config, displayMode, incrementalMode, adapter);
  }

  @Override
  public void prepareGeneration() throws UncontrolledException, ControlledException {
    log.debug("prepare");

    // Load and validate the configuration file

    this.myBatisConfig = new MyBatisConfiguration(this.config);
    this.myBatisTag = (MyBatisTag) this.config.getGenerators().getSelectedGeneratorTag();
    DataSetLayout layout = new DataSetLayout(this.config);

    // Reset the generated object counters

    this.config.resetTreeGeneratables();

    // Add tables

    for (TableDataSetMetadata tm : super.tables) {
      log.debug("tm=" + tm.getId().getCanonicalSQLName());
      addDaosAndMapper(tm, DAOType.TABLE);
      if (tm.getAutoGeneratedColumnMetadata() != null) {
        SourceLocation loc = tm.getDaoTag().getSourceLocation();
        throw new ControlledException("Invalid configuration file '" + loc.getFile().getPath() + "' (line "
            + loc.getLineNumber() + ", col " + loc.getColumnNumber()
            + "): The tag <auto-generated-column> is not supported by the MyBatis generator. "
            + "Use <column> tags with a 'sequence' attribute instead.");
      }
      for (SelectMethodMetadata sm : tm.getSelectsMetadata()) {
        addSelectVOs(sm, layout);
      }
    }

    // Add views

    for (TableDataSetMetadata vm : super.views) {
      addDaosAndMapper(vm, DAOType.VIEW);
      for (SelectMethodMetadata sm : vm.getSelectsMetadata()) {
        addSelectVOs(sm, layout);
      }
    }

    // Add enums

    for (EnumDataSetMetadata em : super.enums) {
      this.enumClasses.put(em, new EnumClass(em, new DataSetLayout(this.config), this.myBatisTag.getDaos(), this));
    }

    // Add selects

    if (!super.selects.isEmpty()) {
      SourceLocation loc = super.selects.iterator().next().getDaoTag().getSourceLocation();
      throw new ControlledException("Invalid configuration in " + loc.render() + ":\n"
          + "The MyBatis generator does not support first-level <select> tags. "
          + "Include any <select> tag inside another <table>, <view>, or <dao> tag.");
    }

    // Add plain DAOs

    for (ExecutorDAOMetadata dm : super.executors) {
      addDaosAndMapper(dm, DAOType.EXECUTOR);
      for (SelectMethodMetadata sm : dm.getSelectsMetadata()) {
        addSelectVOs(sm, layout);
      }
    }

    // Prepare MyBatis Configuration File list

    for (Mapper mapper : this.mappers.values()) {
      String sourceFile = mapper.getRuntimeSourceFileName();
      this.myBatisConfig.addSourceFile(sourceFile);
    }

  }

  private void addDaosAndMapper(final DataSetMetadata metadata, final DAOType type) throws ControlledException {

    MyBatisTag myBatisTag = (MyBatisTag) this.config.getGenerators().getSelectedGeneratorTag();

    DataSetLayout layout;
    ObjectAbstractVO abstractVO;
    ObjectVO vo;
    Mapper mapper;
    ObjectDAO dao;

    switch (type) {

    case TABLE:
      TableTag ttag = this.config.findTable(metadata, this.adapter);
      if (ttag == null) {
        throw new ControlledException(
            "Could not find table tag for table '" + metadata.getId().getCanonicalSQLName() + "'.");
      }
      layout = new DataSetLayout(this.config, ttag);

      abstractVO = new ObjectAbstractVO(metadata, layout, this, DAOType.TABLE, myBatisTag);
      vo = new ObjectVO(metadata, layout, this, abstractVO, myBatisTag);
      mapper = new Mapper(ttag, metadata, layout, this, type, this.adapter, vo, this.entityDAORegistry);
      dao = new ObjectDAO(ttag, metadata, layout, this, type, myBatisTag, vo, mapper);
      this.entityDAORegistry.add(vo.getFullClassName(), dao);
      mapper.setDao(dao);

      break;

    case VIEW:
      ViewTag vtag = this.config.findView(metadata, this.adapter);
      if (vtag == null) {
        throw new ControlledException(
            "Could not find view tag for table '" + metadata.getId().getCanonicalSQLName() + "'.");
      }
      layout = new DataSetLayout(this.config);

      abstractVO = new ObjectAbstractVO(metadata, layout, this, DAOType.VIEW, myBatisTag);
      vo = new ObjectVO(metadata, layout, this, abstractVO, myBatisTag);
      mapper = new Mapper(vtag, metadata, layout, this, type, this.adapter, vo, this.entityDAORegistry);
      dao = new ObjectDAO(vtag, metadata, layout, this, type, myBatisTag, vo, mapper);
      this.entityDAORegistry.add(vo.getFullClassName(), dao);
      mapper.setDao(dao);

      break;

    case EXECUTOR:
      AbstractDAOTag tag = metadata.getDaoTag();
      layout = new DataSetLayout(this.config);
      abstractVO = null;
      vo = null;

      mapper = new Mapper(tag, metadata, layout, this, type, this.adapter, vo, this.entityDAORegistry);
      dao = new ObjectDAO(tag, metadata, layout, this, type, myBatisTag, vo, mapper);
      mapper.setDao(dao);

      break;

    default:
      throw new ControlledException(
          "Unrecognized type for database object '" + metadata.getId().getCanonicalSQLName() + "'.");
    }

    if (abstractVO != null) {
      this.abstractVos.put(metadata, abstractVO);
    }
    if (vo != null) {
      this.vos.put(metadata, vo);
    }
    this.mappers.put(metadata, mapper);
    this.daos.put(metadata, dao);

  }

  private LinkedHashSet<SelectAbstractVO> abstractSelectVOs = new LinkedHashSet<SelectAbstractVO>();
  private LinkedHashSet<SelectVO> selectVOs = new LinkedHashSet<SelectVO>();

  private void addSelectVOs(final SelectMethodMetadata sm, final DataSetLayout layout) throws ControlledException {

    // DataSetLayout layout = new DataSetLayout(this.config);
    HotRodFragmentConfigTag fragmentConfig = sm.getFragmentConfig();
    ClassPackage fragmentPackage = fragmentConfig != null && fragmentConfig.getFragmentPackage() != null
        ? fragmentConfig.getFragmentPackage()
        : null;
    ClassPackage daoPackage = layout.getDAOPackage(fragmentPackage);
    SelectMethodReturnType rt = sm.getReturnType(daoPackage);

    // solo VO

    SelectVOClass soloVO = rt.getSoloVO();
    if (soloVO != null) {
      SelectAbstractVO abstractVO = new SelectAbstractVO(soloVO, layout, this.myBatisTag);
      this.abstractSelectVOs.add(abstractVO);
      SelectVO vo = new SelectVO(soloVO, abstractVO, layout);
      this.selectVOs.add(vo);
    }

    // connected VOs (all)

    if (sm.getStructuredColumns() != null) {
      for (VOMetadata vo : sm.getStructuredColumns().getVOs()) {
        vo.register(this.abstractSelectVOs, this.selectVOs, layout, this.myBatisTag);
      }
    }

  }

  @Override // HotRodGenerator
  public void generate() throws UncontrolledException, ControlledException {
    display("");
    display("Generating MyBatis DAOs & VOs...");
    LocalFileGenerator fg = new LocalFileGenerator();
    this.generate(fg);
    display("");
    display("MyBatis generation complete.");
  }

  @Override // LiveGenerator
  public void generate(final FileGenerator fileGenerator) throws UncontrolledException, ControlledException {

    // Abstract VOs, VOs, DAOs, and Mappers for <table> & <view> tags

    for (ObjectAbstractVO abstractVO : this.abstractVos.values()) {
      abstractVO.generate(fileGenerator);
    }

    for (ObjectVO vo : this.vos.values()) {
      vo.generate(fileGenerator);
    }

    for (SelectAbstractVO avo : this.abstractSelectVOs) {
      avo.generate(fileGenerator);
    }

    for (SelectVO vo : this.selectVOs) {
      vo.generate(fileGenerator);
    }

    for (Mapper mapper : this.mappers.values()) {
      mapper.generate(fileGenerator);
    }

    for (ObjectDAO dao : this.daos.values()) {
      dao.generate(fileGenerator, this);
    }

    // Enums

    for (EnumClass ec : this.enumClasses.values()) {
      ec.generate(fileGenerator);
    }

    // MyBatis Main configuration file

    this.myBatisConfig.generate(fileGenerator);

    // compute tree generation status

    super.config.promoteTreeToGenerated();

  }

  // Getters

  public ObjectVO getVO(final DataSetMetadata dataSet) {
    return this.vos.get(dataSet);
  }

  public ObjectDAO getDAO(final DataSetMetadata dataSet) {
    return this.daos.get(dataSet);
  }

  public EnumClass getEnum(final DataSetMetadata dataSet) {
    return this.enumClasses.get(dataSet);
  }

  public Mapper getMapper(final DataSetMetadata dataSet) {
    return this.mappers.get(dataSet);
  }

  // Helpers

}
