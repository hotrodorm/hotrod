package org.hotrod.generator.mybatis;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;

import org.apache.log4j.Logger;
import org.hotrod.ant.ControlledException;
import org.hotrod.ant.HotRodAntTask.DisplayMode;
import org.hotrod.ant.UncontrolledException;
import org.hotrod.config.CustomDAOTag;
import org.hotrod.config.HotRodConfigTag;
import org.hotrod.config.HotRodFragmentConfigTag;
import org.hotrod.config.MyBatisTag;
import org.hotrod.config.SelectTag;
import org.hotrod.config.TableTag;
import org.hotrod.config.ViewTag;
import org.hotrod.generator.DAOType;
import org.hotrod.generator.HotRodGenerator;
import org.hotrod.metadata.DAOMetadata;
import org.hotrod.metadata.DataSetMetadata;
import org.hotrod.metadata.EnumDataSetMetadata;
import org.hotrod.metadata.SelectDataSetMetadata;
import org.hotrod.metadata.SelectMethodMetadata;
import org.hotrod.metadata.SelectMethodMetadata.SelectMethodReturnType;
import org.hotrod.metadata.TableDataSetMetadata;
import org.hotrod.metadata.VOMetadata;
import org.hotrod.metadata.VORegistry.VOClass;
import org.hotrod.runtime.dynamicsql.SourceLocation;
import org.hotrod.utils.ClassPackage;
import org.nocrala.tools.database.tartarus.core.DatabaseLocation;

public class MyBatisGenerator extends HotRodGenerator {

  private static transient final Logger log = Logger.getLogger(MyBatisGenerator.class);

  private MyBatisTag myBatisTag;

  private LinkedHashMap<DataSetMetadata, ObjectAbstractVO> abstractVos = new LinkedHashMap<DataSetMetadata, ObjectAbstractVO>();
  private LinkedHashMap<DataSetMetadata, ObjectVO> vos = new LinkedHashMap<DataSetMetadata, ObjectVO>();
  private LinkedHashMap<DataSetMetadata, ObjectDAO> daos = new LinkedHashMap<DataSetMetadata, ObjectDAO>();
  private LinkedHashMap<DataSetMetadata, Mapper> mappers = new LinkedHashMap<DataSetMetadata, Mapper>();
  private LinkedHashMap<EnumDataSetMetadata, EnumClass> enumClasses = new LinkedHashMap<EnumDataSetMetadata, EnumClass>();
  private MyBatisConfiguration myBatisConfig;

  private List<CustomDAO> customDAOs = new ArrayList<CustomDAO>();
  private List<CustomDAOMapper> customMappers = new ArrayList<CustomDAOMapper>();

  public MyBatisGenerator(final DatabaseLocation loc, final HotRodConfigTag config, final DisplayMode displayMode)
      throws UncontrolledException, ControlledException {
    super(loc, config, displayMode);
  }

  @Override
  public void prepareGeneration() throws UncontrolledException, ControlledException {
    log.debug("prepare");

    // Load and validate the configuration file

    this.myBatisConfig = new MyBatisConfiguration(this.config);
    this.myBatisTag = (MyBatisTag) this.config.getGenerators().getSelectedGeneratorTag();
    DataSetLayout layout = new DataSetLayout(this.config);

    // Add tables

    for (TableDataSetMetadata tm : this.tables) {
      log.debug("tm=" + tm.getIdentifier().getSQLIdentifier());
      addDaosAndMapper(tm, DAOType.TABLE);
      if (tm.getAutoGeneratedColumnMetadata() != null) {
        SourceLocation loc = tm.getDaoTag().getSourceLocation();
        throw new ControlledException("Invalid configuration file '" + loc.getFile().getPath() + "' (line "
            + loc.getLineNumber() + ", col " + loc.getColumnNumber()
            + "): The tag <auto-generated-column> is not supported by the MyBatis generator. "
            + "Use <column> tags with a 'sequence' attribute instead.");
      }
      for (SelectMethodMetadata sm : tm.getSelectsMetadata()) {
        addSelectVOs(sm, layout);
      }
    }

    // Add views

    for (TableDataSetMetadata vm : this.views) {
      addDaosAndMapper(vm, DAOType.VIEW);
      for (SelectMethodMetadata sm : vm.getSelectsMetadata()) {
        addSelectVOs(sm, layout);
      }
    }

    // Add enums

    for (EnumDataSetMetadata em : this.enums) {
      this.enumClasses.put(em, new EnumClass(em, new DataSetLayout(this.config), this.myBatisTag.getDaos(), this));
    }

    // Add selects

    for (SelectDataSetMetadata sm : this.selects) {
      addDaosAndMapper(sm);
    }

    // Add custom DAOs

    for (CustomDAOTag tag : this.config.getDAOs()) {
      CustomDAO dao = new CustomDAO(tag, layout, this);
      CustomDAOMapper mapper = new CustomDAOMapper(tag, layout, this);
      dao.setMapper(mapper);
      mapper.setDao(dao);
      this.customDAOs.add(dao);
      this.customMappers.add(mapper);
    }

    for (DAOMetadata dm : super.daos) {
      for (SelectMethodMetadata sm : dm.getSelectsMetadata()) {
        addSelectVOs(sm, layout);
      }
    }

    // Prepare MyBatis Configuration File list

    for (CustomDAOTag tag : this.config.getAllDAOs()) {
      CustomDAOMapper mapper = new CustomDAOMapper(tag, layout, this);
      this.myBatisConfig.addMapperPrimitives(mapper);
    }

    for (Mapper mapper : this.mappers.values()) {
      String sourceFile = mapper.getRuntimeSourceFileName();
      this.myBatisConfig.addSourceFile(sourceFile);
    }

  }

  private void addDaosAndMapper(final DataSetMetadata metadata, final DAOType type) throws ControlledException {

    MyBatisTag myBatisTag = (MyBatisTag) this.config.getGenerators().getSelectedGeneratorTag();

    DataSetLayout layout;
    ObjectAbstractVO abstractVO;
    ObjectVO vo;
    Mapper mapper;
    ObjectDAO dao;

    switch (type) {

    case TABLE:
      TableTag ttag = this.config.findTable(metadata, this.adapter);
      if (ttag == null) {
        throw new ControlledException(
            "Could not find table tag for table '" + metadata.getIdentifier().getSQLIdentifier() + "'.");
      }
      layout = new DataSetLayout(this.config, ttag);

      abstractVO = new ObjectAbstractVO(metadata, layout, this, DAOType.TABLE, myBatisTag);
      vo = new ObjectVO(metadata, layout, this, abstractVO, myBatisTag);
      mapper = new Mapper(ttag, metadata, layout, this, type, this.adapter, vo);
      dao = new ObjectDAO(ttag, metadata, layout, this, type, myBatisTag, vo, mapper);
      mapper.setDao(dao);

      break;

    case VIEW:
      ViewTag vtag = this.config.findView(metadata, this.adapter);
      if (vtag == null) {
        throw new ControlledException(
            "Could not find view tag for table '" + metadata.getIdentifier().getSQLIdentifier() + "'.");
      }
      layout = new DataSetLayout(this.config);

      abstractVO = new ObjectAbstractVO(metadata, layout, this, DAOType.VIEW, myBatisTag);
      vo = new ObjectVO(metadata, layout, this, abstractVO, myBatisTag);
      mapper = new Mapper(vtag, metadata, layout, this, type, this.adapter, vo);
      dao = new ObjectDAO(vtag, metadata, layout, this, type, myBatisTag, vo, mapper);
      mapper.setDao(dao);

      break;

    default:
      throw new ControlledException(
          "Unrecognized type for database object '" + metadata.getIdentifier().getSQLIdentifier() + "'.");
    }

    this.abstractVos.put(metadata, abstractVO);
    this.vos.put(metadata, vo);
    this.mappers.put(metadata, mapper);
    this.daos.put(metadata, dao);

  }

  private LinkedHashSet<SelectAbstractVO> abstractSelectVOs = new LinkedHashSet<SelectAbstractVO>();
  private LinkedHashSet<SelectVO> selectVOs = new LinkedHashSet<SelectVO>();

  private void addSelectVOs(final SelectMethodMetadata sm, final DataSetLayout layout) throws ControlledException {

    // DataSetLayout layout = new DataSetLayout(this.config);
    HotRodFragmentConfigTag fragmentConfig = sm.getFragmentConfig();
    ClassPackage fragmentPackage = fragmentConfig != null && fragmentConfig.getFragmentPackage() != null
        ? fragmentConfig.getFragmentPackage() : null;
    log.info("!!! fragmentPackage=" + fragmentPackage);
    ClassPackage daoPackage = layout.getDAOPackage(fragmentPackage);
    log.info("daoPackage=" + daoPackage);
    SelectMethodReturnType rt = sm.getReturnType(daoPackage);

    // solo VO

    VOClass soloVO = rt.getSoloVO();
    if (soloVO != null) {
      SelectAbstractVO abstractVO = new SelectAbstractVO(soloVO, layout, this.myBatisTag);
      this.abstractSelectVOs.add(abstractVO);
      this.selectVOs.add(new SelectVO(soloVO, abstractVO, layout));
    }

    // connected VOs (all)

    if (sm.getStructuredColumns() != null) {
      for (VOMetadata vo : sm.getStructuredColumns().getVOs()) {
        vo.register(this.abstractSelectVOs, this.selectVOs, layout, this.myBatisTag);
      }
    }

  }

  private void addDaosAndMapper(final SelectDataSetMetadata metadata) throws ControlledException {

    DataSetLayout layout;
    ObjectAbstractVO abstractVO;
    ObjectVO vo;
    Mapper mapper;
    ObjectDAO dao;

    SelectTag stag = this.config.findSelect(metadata, this.adapter);
    layout = new DataSetLayout(this.config);

    abstractVO = new ObjectAbstractVO(metadata, layout, this, DAOType.SELECT, myBatisTag);
    vo = new ObjectVO(metadata, layout, this, abstractVO, myBatisTag);
    mapper = new Mapper(stag, metadata, layout, this, DAOType.SELECT, this.adapter, vo);
    dao = new ObjectDAO(stag, metadata, layout, this, DAOType.SELECT, myBatisTag, vo, mapper);
    mapper.setDao(dao);

    this.abstractVos.put(metadata, abstractVO);
    this.vos.put(metadata, vo);
    this.mappers.put(metadata, mapper);
    this.daos.put(metadata, dao);

  }

  @Override
  public void generate() throws UncontrolledException, ControlledException {

    display("");
    display("Generating MyBatis DAOs & VOs...");

    // Abstract VOs, VOs, DAOs, and Mappers for <table> & <view> tags

    for (ObjectAbstractVO abstractVO : this.abstractVos.values()) {
      abstractVO.generate();
    }

    for (ObjectVO vo : this.vos.values()) {
      vo.generate();
    }

    for (SelectAbstractVO avo : this.abstractSelectVOs) {
      avo.generate();
    }

    for (SelectVO vo : this.selectVOs) {
      vo.generate();
    }

    for (ObjectDAO dao : this.daos.values()) {
      dao.generate();
    }

    for (Mapper mapper : this.mappers.values()) {
      mapper.generate();
    }

    // Enums

    for (EnumClass ec : this.enumClasses.values()) {
      ec.generate();
    }

    // Custom <dao> tags

    for (CustomDAO d : this.customDAOs) {
      d.generate();
    }

    for (CustomDAOMapper m : this.customMappers) {
      m.generate();
    }

    // MyBatis Main configuration file

    this.myBatisConfig.generate();

    // Generation complete

    display("");
    display("MyBatis generation complete.");
  }

  public ObjectVO getVO(final DataSetMetadata dataSet) {
    return this.vos.get(dataSet);
  }

  public ObjectDAO getDAO(final DataSetMetadata dataSet) {
    return this.daos.get(dataSet);
  }

  public EnumClass getEnum(final DataSetMetadata dataSet) {
    return this.enumClasses.get(dataSet);
  }

  public Mapper getMapper(final DataSetMetadata dataSet) {
    return this.mappers.get(dataSet);
  }

  // Helpers

}
