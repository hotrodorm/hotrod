package org.hotrod.config.tags;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;

import org.hotrod.ant.Constants;
import org.hotrod.config.AbstractConfigurationTag;
import org.hotrod.database.DatabaseAdapter;
import org.hotrod.exceptions.InvalidConfigurationFileException;
import org.hotrod.utils.DbUtils;
import org.hotrod.utils.SUtils;
import org.nocrala.tools.database.tartarus.core.JdbcColumn;
import org.nocrala.tools.database.tartarus.core.JdbcDatabase;
import org.nocrala.tools.database.tartarus.core.JdbcTable;

@XmlRootElement(name = "auto-generated-column")
public class AutoGeneratedColumnTag extends AbstractConfigurationTag {

  // Constants

  private static final String ALLOWS_SPECIFIED_VALUE_TRUE = "true";
  private static final String ALLOWS_SPECIFIED_VALUE_FALSE = "false";

  // Properties

  private String name = null;
  private String sequence = null;
  private String sAllowsSpecifiedValue = null;

  private boolean isIdentity = false;
  private JdbcTable jdbcTable = null;
  private JdbcColumn jdbcColumn = null;
  private boolean allowsSpecifiedValue = false;

  // Constructor

  public AutoGeneratedColumnTag() {
    super("auto-generated-column");
  }

  // JAXB Setters

  @XmlAttribute
  public void setSequence(final String sequence) {
    this.sequence = sequence;
  }

  @XmlAttribute
  public void setName(final String column) {
    this.name = column;
  }

  @XmlAttribute(name = "allows-specified-value")
  public void setAllowsSpecifiedValue(final String allowsSpecifiedValue) {
    this.sAllowsSpecifiedValue = allowsSpecifiedValue;
  }

  // Behavior

  public void validate() throws InvalidConfigurationFileException {

    // column

    if (SUtils.isEmpty(this.name)) {
      throw new InvalidConfigurationFileException("Attribute 'name' of tag <" + super.getTagName()
          + "> cannot be empty. " + "Must specify the auto-generated column name.");
    }

    if (this.sequence == null) {

      this.isIdentity = true;

      // allows-specified-value

      if (this.sAllowsSpecifiedValue == null) {
        this.allowsSpecifiedValue = false;
      } else if (ALLOWS_SPECIFIED_VALUE_TRUE.equals(this.sAllowsSpecifiedValue)
          || ALLOWS_SPECIFIED_VALUE_FALSE.equals(this.sAllowsSpecifiedValue)) {
        this.allowsSpecifiedValue = ALLOWS_SPECIFIED_VALUE_TRUE.equals(this.sAllowsSpecifiedValue);
      } else {
        throw new InvalidConfigurationFileException("Invalid attribute 'allows-specified-value' of the tag <"
            + super.getTagName() + ">: valid values are '" + ALLOWS_SPECIFIED_VALUE_TRUE + "' or '"
            + ALLOWS_SPECIFIED_VALUE_FALSE + "' (defaults to '" + ALLOWS_SPECIFIED_VALUE_FALSE + "')");
      }

    } else {

      this.isIdentity = false;
      this.allowsSpecifiedValue = false;

      // sequence

      if (SUtils.isEmpty(this.sequence)) {
        throw new InvalidConfigurationFileException(
            "When specified, the attribute 'sequence' of the tag <" + super.getTagName() + "> cannot be empty. "
                + "If the  auto-generated key comes from a sequence, " + "specify here the sequence name. "
                + "If not specified, " + Constants.TOOL_NAME + " considers the column is an identity column.");
      }

      // allows-specified-value

      if (this.sAllowsSpecifiedValue != null) {
        throw new InvalidConfigurationFileException("Invalid attribute 'allows-specified-value' of the tag <"
            + super.getTagName() + ">: this attribute can only be used for identity columns, "
            + "but this it not one since the 'sequence' attribute was specified.");
      }

    }

  }

  public void validateAgainstDatabase(final JdbcDatabase db, final DatabaseAdapter adapter, final String name)
      throws InvalidConfigurationFileException {

    this.jdbcTable = DbUtils.findTable(db, name, adapter);
    if (this.jdbcTable == null) {
      throw new InvalidConfigurationFileException("Could not find table '" + name
          + "' as specified in the attribute 'name' of the tag <" + new TableTag().getTagName() + ">.");
    }

    this.jdbcColumn = DbUtils.findColumn(this.jdbcTable, this.name, adapter);
    if (this.jdbcColumn == null) {
      throw new InvalidConfigurationFileException("Could not find database column '" + this.name + "' on table '" + name
          + "' as specified in the attribute 'name' of the tag <" + super.getTagName() + ">.");
    }

  }

  // Getters

  public String getSequence() {
    return sequence;
  }

  public String getName() {
    return name;
  }

  public boolean allowsSpecifiedValue() {
    return allowsSpecifiedValue;
  }

  public boolean isIdentity() {
    return isIdentity;
  }

  public JdbcTable getJdbcTable() {
    return jdbcTable;
  }

  public JdbcColumn getJdbcColumn() {
    return jdbcColumn;
  }

}
