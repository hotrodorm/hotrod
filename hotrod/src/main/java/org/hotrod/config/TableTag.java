package org.hotrod.config;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

import org.apache.log4j.Logger;
import org.hotrod.ant.Constants;
import org.hotrod.database.DatabaseAdapter;
import org.hotrod.exceptions.InvalidConfigurationFileException;
import org.hotrod.runtime.util.SUtils;
import org.hotrod.utils.ClassPackage;
import org.hotrod.utils.identifiers.DataSetIdentifier;
import org.nocrala.tools.database.tartarus.core.JdbcDatabase;
import org.nocrala.tools.database.tartarus.core.JdbcTable;

@XmlRootElement(name = "table")
public class TableTag extends AbstractCompositeDAOTag {

  // Constants

  private static final Logger log = Logger.getLogger(TableTag.class);

  static final String JAVA_CLASS_NAME_PATTERN = "[A-Z][a-zA-Z0-9_$]*";

  // Properties

  private String name = null;
  private String javaClassName = null;
  private String columnSeam = null;
  private AutoGeneratedColumnTag autoGeneratedColumn = null;
  private VersionControlColumnTag versionControlColumn = null;
  private List<ColumnTag> columns = new ArrayList<ColumnTag>();

  private DaosTag daosTag;
  private HotRodFragmentConfigTag fragmentConfig;
  private ClassPackage fragmentPackage;

  // Constructor

  public TableTag() {
    super("table");
  }

  // JAXB Setters

  @XmlAttribute
  public void setName(final String name) {
    this.name = name;
  }

  @XmlAttribute(name = "java-name")
  public void setJavaName(final String javaName) {
    this.javaClassName = javaName;
  }

  @XmlAttribute(name = "column-seam")
  public void setColumnSeam(final String columnSeam) {
    this.columnSeam = columnSeam;
  }

  @XmlElement(name = "auto-generated-column")
  public void setAutoGeneratedColumn(final AutoGeneratedColumnTag autoGeneratedColumn) {
    this.autoGeneratedColumn = autoGeneratedColumn;
  }

  @XmlElement(name = "version-control-column")
  public void setVersionControlColumn(final VersionControlColumnTag versionControlColumn) {
    this.versionControlColumn = versionControlColumn;
  }

  @XmlElement
  public void setColumn(final ColumnTag c) {
    this.columns.add(c);
  }

  // Behavior

  public void validate(final DaosTag daosTag, final HotRodConfigTag config,
      final HotRodFragmentConfigTag fragmentConfig) throws InvalidConfigurationFileException {

    log.debug("validate");

    this.daosTag = daosTag;
    this.fragmentConfig = fragmentConfig;
    this.fragmentPackage = this.fragmentConfig != null && this.fragmentConfig.getFragmentPackage() != null
        ? this.fragmentConfig.getFragmentPackage() : null;

    String nameTitle = "name";
    String nameValue = this.name;

    // name

    if (SUtils.isEmpty(this.name)) {
      throw new InvalidConfigurationFileException(super.getSourceLocation(), "Attribute 'name' of tag <"
          + super.getTagName() + "> cannot be empty. " + "Must specify a database table name.");
    }

    // java-name

    if (this.javaClassName != null) {
      this.javaClassName = this.javaClassName.trim();
      if (SUtils.isEmpty(this.javaClassName)) {
        throw new InvalidConfigurationFileException(super.getSourceLocation(),
            "Invalid 'java-name' attribute value of tag <" + super.getTagName() + "> for the table '" + this.name
                + "'. When specified, the value cannot be empty.");
      }
      if (!this.javaClassName.matches(JAVA_CLASS_NAME_PATTERN)) {
        throw new InvalidConfigurationFileException(super.getSourceLocation(),
            "Invalid 'java-name' attribute value '" + this.javaClassName + "' of tag <" + super.getTagName()
                + ">. When specified, the java-name must start with an upper case letter, "
                + "and continue with any combination of letters, digits, underscores, or dollar signs.");
      }

    }

    // column-seam: no validation necessary

    // auto-generated columns

    if (this.autoGeneratedColumn != null) {
      this.autoGeneratedColumn.validate();
    }

    // version-control

    if (this.versionControlColumn != null) {
      this.versionControlColumn.validate();
    }

    // columns

    Set<ColumnTag> cols = new HashSet<ColumnTag>();
    for (ColumnTag c : this.columns) {
      c.validate(config);
      if (cols.contains(c)) {
        throw new InvalidConfigurationFileException(super.getSourceLocation(),
            "Multiple <" + new ColumnTag().getTagName() + "> tags with the same name on tag <" + super.getTagName()
                + "> for table '" + this.name + "'. You cannot specify the same column name "
                + "multiple times on a same table.");
      }
      cols.add(c);
    }

    // sequences and updates

    super.validate(super.getTagName(), nameTitle, nameValue);

  }

  public void validateAgainstDatabase(final JdbcDatabase db, final DatabaseAdapter adapter)
      throws InvalidConfigurationFileException {

    JdbcTable jt = this.findJdbcTable(db, adapter);
    if (jt == null) {
      throw new InvalidConfigurationFileException(super.getSourceLocation(),
          "Could not find database table '" + this.name
              + "' as specified in the <table> tag of the configuration file. "
              + "\n\nPlease verify the specified database catalog and schema names are correct according to this database. "
              + "You can try leaving the catalog/schema values empty, so " + Constants.TOOL_NAME
              + " will list all available values.");
    }

    for (ColumnTag ct : this.columns) {
      ct.populateJdbcElements(db, adapter, jt);
      if (ct.getJdbcColumn() == null) {
        throw new InvalidConfigurationFileException(super.getSourceLocation(), "Could not find column '" + ct.getName()
            + "' on database table '" + this.name + "', as specified in the <column> tag of the configuration file. ");
      }
    }

    if (this.autoGeneratedColumn != null) {

      // Single-column: supersedes identity & sequence generation

      this.autoGeneratedColumn.validateAgainstDatabase(db, adapter, this.name);

    } else {

      // Multi-column: identity & sequence per column

      for (ColumnTag ct : this.columns) {
        ct.validateAgainstDatabase(db, adapter);
      }

    }

    if (this.versionControlColumn != null) {
      this.versionControlColumn.validateAgainstDatabase(db, adapter, this.name, jt);
    }

  }

  // Search

  private JdbcTable findJdbcTable(final JdbcDatabase db, final DatabaseAdapter adapter) {
    for (JdbcTable t : db.getTables()) {
      if (adapter.isTableIdentifier(t.getName(), this.name)) {
        return t;
      }
    }
    return null;
  }

  public ColumnTag findColumnTag(final String jdbcName, final DatabaseAdapter adapter) {
    for (ColumnTag ct : this.columns) {
      if (ct.isName(jdbcName, adapter)) {
        return ct;
      }
    }
    return null;
  }

  // Getters

  public String getColumnSeam() {
    return columnSeam;
  }

  public String getName() {
    return name;
  }

  public String getJavaName() {
    // log.info("<<< this.javaClassName=" + this.javaClassName);
    return this.javaClassName;
  }

  public AutoGeneratedColumnTag getAutoGeneratedColumn() {
    return autoGeneratedColumn;
  }

  public VersionControlColumnTag getVersionControlColumn() {
    return versionControlColumn;
  }

  public List<ColumnTag> getColumns() {
    return columns;
  }

  public HotRodFragmentConfigTag getFragmentConfig() {
    return fragmentConfig;
  }

  // DAO Tag implementation

  @Override
  public ClassPackage getPackage() {
    return this.daosTag.getDaoPackage(this.fragmentPackage);
  }

  @Override
  public String getJavaClassName() {
    if (this.javaClassName == null) {
      return new DataSetIdentifier(this.name).getJavaClassIdentifier();
    } else {
      return new DataSetIdentifier(this.name, this.javaClassName).getJavaClassIdentifier();
    }
  }

}
