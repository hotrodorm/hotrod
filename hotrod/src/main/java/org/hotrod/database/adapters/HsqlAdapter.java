package org.hotrod.database.adapters;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import java.sql.Types;

import org.apache.log4j.Logger;
import org.hotrod.config.HotRodConfigTag;
import org.hotrod.database.DatabaseAdapter;
import org.hotrod.database.PropertyType;
import org.hotrod.database.PropertyType.ValueRange;
import org.hotrod.exceptions.SequencesNotSupportedException;
import org.hotrod.exceptions.UnresolvableDataTypeException;
import org.hotrod.metadata.AutoGeneratedColumnMetadata;
import org.hotrod.metadata.ColumnMetadata;
import org.hotrod.utils.identifiers.Identifier;
import org.nocrala.tools.database.tartarus.core.JdbcColumn;

public class HsqlAdapter extends DatabaseAdapter {

  private static Logger log = Logger.getLogger(HsqlAdapter.class);

  // Character string types are CHAR(L), VARCHAR(L) and CLOB. CHAR is for fixed
  // width strings and any string that is assigned to this type is padded with
  // spaces at the end. Do not use this type for general storage of strings. If
  // you use CHAR without the length L, then it is interpreted as a single
  // character string. Use VARCHAR(L) for general strings. There are only memory
  // limits and performance implications for the maximum length of VARCHAR(L).
  // If the strings are larger than a few kilobytes, consider using CLOB. The
  // CLOB types is for very large strings. Do not use this type for short
  // strings as there are performance implications. The CLOB type is a better
  // choice for the storage of long strings. By default LONGVARCHAR is a synonym
  // for a long VARCHAR and can be used without specifying the size. You can set
  // LONGVARCHAR to map to CLOB, with the sql.longvar_is_lob connection property
  // or the SET DATABASE SQL LONGVAR IS LOB TRUE statement.
  // REF: http://hsqldb.org/doc/guide/sqlgeneral-chapt.html
  private static final long MAX_VARCHAR_LENGTH = 64 * 1024;

  public HsqlAdapter(final HotRodConfigTag config, final DatabaseMetaData dm) throws SQLException {
    super(config, dm);
  }

  @Override
  public boolean supportsCatalog() {
    return false;
  }

  @Override
  public boolean supportsSchema() {
    return true;
  }

  @Override
  public String getName() {
    return "HyperSQL Adapter";
  }

  @Override
  public PropertyType getAdapterDefaultType(final ColumnMetadata m) throws UnresolvableDataTypeException {

    log.debug("c.getDataType()=" + m.getDataType());

    switch (m.getDataType()) {

    // Numeric types

    case java.sql.Types.DECIMAL:
    case java.sql.Types.NUMERIC:
      if (m.getDecimalDigits() != null && m.getDecimalDigits() != 0) {
        return new PropertyType(BigDecimal.class, m, false);
      } else {
        if (m.getColumnSize() <= 2) {
          return new PropertyType(Byte.class, m, false, ValueRange.getSignedRange(m.getColumnSize()));
        } else if (m.getColumnSize() <= 4) {
          return new PropertyType(Short.class, m, false, ValueRange.getSignedRange(m.getColumnSize()));
        } else if (m.getColumnSize() <= 9) {
          return new PropertyType(Integer.class, m, false, ValueRange.getSignedRange(m.getColumnSize()));
        } else if (m.getColumnSize() <= 18) {
          return new PropertyType(Long.class, m, false, ValueRange.getSignedRange(m.getColumnSize()));
        } else {
          return new PropertyType(BigInteger.class, m, false);
        }
      }

    case java.sql.Types.TINYINT:
      return new PropertyType(Byte.class, m, false, ValueRange.BYTE_RANGE);

    case java.sql.Types.SMALLINT:
      return new PropertyType(Short.class, m, false, ValueRange.SHORT_RANGE);

    case java.sql.Types.INTEGER:
      return new PropertyType(Integer.class, m, false, ValueRange.INTEGER_RANGE);

    case java.sql.Types.BIGINT:
      return new PropertyType(Long.class, m, false, ValueRange.LONG_RANGE);

    case java.sql.Types.FLOAT: // float is never reported
    case java.sql.Types.DOUBLE:
      return new PropertyType(Double.class, m, false);

    // Character types

    case java.sql.Types.CHAR:
      return new PropertyType(String.class, m, false);

    case java.sql.Types.VARCHAR:
      if (m.getTypeName() != null && m.getTypeName().toUpperCase().startsWith("INTERVAL")) {
        return new PropertyType(Object.class, m, false);
      } else {
        boolean isLOB = m.getColumnSize() >= MAX_VARCHAR_LENGTH;
        return new PropertyType(String.class, m, isLOB);
      }

      // Date/Time types

    case java.sql.Types.DATE:
      return new PropertyType(java.sql.Date.class, m, false);
    case java.sql.Types.TIME:
      return new PropertyType(java.sql.Time.class, m, false);
    case java.sql.Types.TIMESTAMP:
      return new PropertyType(java.sql.Timestamp.class, m, false);

    case java.sql.Types.BOOLEAN:
      return new PropertyType(Boolean.class, m, false);

    case java.sql.Types.BLOB:
    case java.sql.Types.BINARY:
    case java.sql.Types.VARBINARY:
      return new PropertyType("byte[]", m, true);

    case java.sql.Types.CLOB:
      return new PropertyType(String.class, m, true);

    case java.sql.Types.OTHER:
      return produceType(Object.class, m, false);

    case java.sql.Types.BIT:
    case java.sql.Types.ARRAY:
      return produceType(Object.class, m, false);

    default: // Unrecognized type
      return produceType(Object.class, m, false);

    }

  }

  @Override
  public String getAutoGeneratedKeySentence(final AutoGeneratedColumnMetadata agcm) {
    if (agcm.isIdentity()) {
      return "call identity()";
    } else {
      return "call next value for " + agcm.getSequence().trim();
    }
  }

  @Override
  public String renderSelectSequence(final Identifier identifier) throws SequencesNotSupportedException {
    return "call next value for " + identifier.getSQLIdentifier().trim();
  }

  @Override
  public boolean isTableIdentifier(final String jdbcName, final String name) {
    return name == null ? false : name.equalsIgnoreCase(jdbcName);
  }

  @Override
  public boolean isColumnIdentifier(final String jdbcName, final String name) {
    return name == null ? false : name.equalsIgnoreCase(jdbcName);
  }

  @Override
  public String formatSchemaName(final String name) {
    return name == null ? null : name.toUpperCase();
  }

  @Override
  public String createOrReplaceView(final String viewName, final String select) {
    return "create view " + viewName + " as " + select;
  }

  @Override
  public String dropView(final String viewName) {
    return "drop view " + viewName;
  }

  @Override
  public String formatJdbcTableName(final String tableName) {
    return tableName.toUpperCase();
  }

  @Override
  public boolean isSerial(final JdbcColumn c) {
    if (c.getDataType() == Types.DECIMAL && (c.getDecimalDigits() == null || c.getDecimalDigits().intValue() == 0)
        && c.getColumnSize() != null && c.getColumnSize() <= 18) {
      return true;
    }
    if (c.getDataType() == Types.TINYINT) {
      return true;
    }
    if (c.getDataType() == Types.SMALLINT) {
      return true;
    }
    if (c.getDataType() == Types.INTEGER) {
      return true;
    }
    if (c.getDataType() == Types.BIGINT) {
      return true;
    }
    return false;
  }

  @Override
  public boolean supportsJDBCGeneratedKeys() {
    return false;
  }

  @Override
  public boolean supportsSpecifiedIdentityPKs() {
    return true;
  }

  // Sorting

  @Override
  public String renderForCaseInsensitiveOrderBy(final ColumnMetadata cm) {
    return "lower(" + cm.renderSQLIdentifier() + ")";
  }

}
