<?xml version="1.0"?>
<!DOCTYPE hotrod SYSTEM "hotrod.dtd">

<hotrod>

  <generators>
    <mybatis>
      <daos gen-base-dir="auto-generated/java" dao-package="daos" />
      <mappers gen-base-dir="auto-generated/mappers"
        relative-dir="persistence" />
      <mybatis-configuration-template
        file="mybatis-template.xml" />
      <session-factory singleton-full-class-name="sessionfactory.DatabaseSessionFactory" />
      <select-generation temp-view-base-name="hotrod_temp_view" />
    </mybatis>
  </generators>

  <table name="branch">
    <auto-generated-column name="id"
      allows-specified-value="true" />
  </table>

  <table name="visit" />

  <table name="vehicle">
    <auto-generated-column name="id" />
  </table>

  <view name="car" />
  <view name="motorcycle" />
  <view name="truck" />

  <table name="client">
    <auto-generated-column name="id" sequence="client_seq" />
    <version-control-column name="row_version" />

    <sequence name="client_seq" />

    <query java-method-name="computeTotalPurchased">
    <![CDATA[
      update client c set total_purchased = (
        select sum(p.final_price) from purchase p where p.client_id = c.id
      )
    ]]>
    </query>

    <query java-method-name="upgradeToVIP">
    <![CDATA[
      update client c set vip = (
        select count(*) from purchase p where p.client_id = c.id
      ) > #{minPurchases,javaType=java.lang.Integer,jdbcType=NUMERIC}
    ]]>
    </query>

    <query java-method-name="deleteInactiveClients">
    <![CDATA[
      delete from client c 
        where (select count(*) from purchase p where p.client_id = c.id) = 0 
        and #{createdBefore,javaType=java.sql.Date,jdbcType=DATE} >= created_at  
        and (select count(*) from client rf where rf.referred_by_id = c.id) = 0
    ]]>
    </query>

  </table>

  <table name="purchase">
    <auto-generated-column name="id" />
  </table>

  <table name="daily_report">
    <sequence name="pdf_report_file_seq" java-method-name="retrieveFileReportSequence" />
  </table>

  <table name="mt_vval002" java-name="VehicleValuationDAO">
    <column name="if" java-name="valuationDate" />
    <column name="sldbrid" java-name="branchId" />
    <column name="$valuation" java-name="totalBranchValuation"
      java-type="java.lang.Double" />
  </table>

  <dao java-class-name="DailyOperations">

    <sequence name="data_file_seq" />

    <query java-method-name="closeDay">
    <![CDATA[
      insert into daily_report (report_date, branch_id, total_sold) direct
        select purchase_date, v.branch_id, sum(final_price) from purchase p
          join vehicle v on (v.id) = (p.vehicle_id)
          where purchase_date = #{closingDate,javaType=java.sql.Date,jdbcType=DATE} 
          group by v.branch_id, purchase_date
    ]]>
    </query>

  </dao>

  <dao java-class-name="GeneralOperations">

    <!-- Native SQL - Insert Special Column Type -->
    <query java-method-name="insertPreferredColors">
    <![CDATA[
      insert into preferred_colors (id, colors) values (
        #{id,javaType=java.lang.Integer, jdbcType=NUMERIC},
        (
          #{color1,javaType=java.lang.String, jdbcType=VARCHAR},
          #{color2,javaType=java.lang.String, jdbcType=VARCHAR},
          #{color3,javaType=java.lang.String, jdbcType=VARCHAR}
        )
      )
    ]]>
    </query>

    <!-- Dynamic SQL - Update Unsold Vehicles -->
    <query java-method-name="applyDiscountToVehicles">
    <![CDATA[
      update vehicle set
          list_price = list_price - #{discount,javaType=java.lang.Integer,jdbcType=NUMERIC}
        <where>
          <if test="#{unsold,javaType=java.lang.Boolean,jdbcType=BOOLEAN} != null">
            and not sold
          </if>
          <if test="#{minMileage,javaType=java.lang.Integer,jdbcType=NUMERIC} != null">
            and mileage > #{minMileage}
          </if>
          <if test="#{type,javaType=java.lang.String,jdbcType=VARCHAR} != null">
            and type = #{type}
          </if>
        </where>
    ]]>
    </query>

  </dao>

  <!-- Simple Select -->
  <select java-class-name="CreatedClient">
    <![CDATA[
      select * from client
        {* 
        where created_at between #{since,javaType=java.sql.Date,jdbcType=DATE}
                             and #{until,javaType=java.sql.Date,jdbcType=DATE}
        *}
    ]]>
  </select>

  <!-- Select returns fully-typed columns from multiple tables -->
  <select java-class-name="ClientWithPurchase">
    <![CDATA[
      select p.*, c.vip, c.state from purchase p
        join client c on (c.id) = (p.client_id)
        {*
        where p.purchase_date = #{purchaseDate,javaType=java.sql.Date,jdbcType=DATE}
        *}
    ]]>
  </select>

  <!-- Select grouping data -->
  <select java-class-name="DailyTotal">
    <![CDATA[
      select 
          purchase_date, count(*) as number_of_purchases, sum(vehicle_price) as price, 
          sum(extras_price) as extras, sum(discount) as discount, sum(tax) as taxes, sum(final_price) as revenue
        from purchase
        {*
        where purchase_date between #{from,javaType=java.sql.Date,jdbcType=DATE}
                                and #{to,javaType=java.sql.Date,jdbcType=DATE}
        group by purchase_date
        *}
    ]]>
  </select>

  <!-- Select using sub queries -->
  <select java-class-name="ClientNeverOfferedDiscount">
    <![CDATA[
      select * from client where id not in (select client_id from purchase where discount > 0)
    ]]>
  </select>

  <!-- Native SQL - Limiting rows at the DB level -->
  <select java-class-name="NonVIPClient">
    <![CDATA[
      select * from client
        {* 
        where vip = false
        limit #{maxRows,javaType=java.lang.Integer,jdbcType=NUMERIC}
        *}
    ]]>
  </select>

  <!-- Native SQL - Native Function -->
  <select java-class-name="VehiclePrice">
    <![CDATA[
      select id, ifnull(list_price, '0') as price from vehicle
        {*
        where brand = #{brandName,javaType=java.lang.String,jdbcType=VARCHAR}
        *}
    ]]>
  </select>

  <!-- Dynamic SQL - Searching by Combined Conditions -->
  <select java-class-name="SearchedClient">
    <![CDATA[
      select c.* from client c
        {*
        <where>
          <if test="#{minPurchases,javaType=java.lang.Integer,jdbcType=NUMERIC} != null">
            and (select count(*) from purchase p where p.client_id = c.id ) >= #{minPurchases}
          </if>
          <if test="#{state,javaType=java.lang.String,jdbcType=VARCHAR} != null">
            and c.state = #{state}
          </if>
          <if test="#{createdSince,javaType=java.sql.Date,jdbcType=DATE} != null">
            and created_at > #{createdSince}
          </if>
        </where>
        *}
    ]]>
  </select>


  <!-- ======================= -->
  <!-- === NOT CHECKED YET === -->
  <!-- ======================= -->

  <dao java-class-name="MyDAO">
    <query java-method-name="addFreebiesToOrders">
    <![CDATA[
      update purchase_order
        <set>
          <if test="#{discount,javaType=java.lang.Double,jdbcType=NUMERIC} != null">
            discount = #{discount}
          ,</if>
          <if test="#{extraQuantity,javaType=java.lang.Long,jdbcType=NUMERIC} != null">
            quantity = quantity + #{extraQuantity}
          ,</if>
          <if test="#{shippingType,javaType=java.lang.Integer,jdbcType=NUMERIC} != null">
            shipping_type = #{shippingType}
          ,</if>
        </set>
        <where>
          <if test="#{foodType,javaType=java.lang.Integer,jdbcType=NUMERIC} != null">
            food_type = #{foodType}
          </if>
          <if test="#{zipCode,javaType=java.lang.String,jdbcType=VARCHAR} != null">
            AND zip_code = #{zipCode}
          </if>
          <if test="#{orderDate,javaType=java.sql.Date,jdbcType=DATE} != null">
            AND order_date = #{orderDate}
          </if>
        </where>
    ]]>
    </query>

    <query java-method-name="addFreebies1">
    <![CDATA[
      update purchase_order
        <set>
          <if test="#{discount,javaType=java.lang.Double,jdbcType=NUMERIC} != null">discount =
            #{discount}
          ,</if>
        </set>
    ]]>
    </query>

  </dao>

</hotrod>
