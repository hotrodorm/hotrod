<?xml version="1.0"?>
<!DOCTYPE hotrod SYSTEM "hotrod.dtd">

<hotrod>

  <generators>
    <mybatis>
      <daos gen-base-dir="auto-generated/java" dao-package="daos" />
      <mappers gen-base-dir="auto-generated/mappers"
        relative-dir="persistence" />
      <mybatis-configuration-template
        file="mybatis-template.xml" />
      <session-factory singleton-full-class-name="sessionfactory.DatabaseSessionFactory" />
      <select-generation temp-view-base-name="hotrod_temp_view" />
    </mybatis>
  </generators>

  <table name="branch">
    <auto-generated-column name="id"
      allows-specified-value="true" />
  </table>

  <table name="vehicle">
    <auto-generated-column name="id" />
  </table>

  <view name="car" />
  <view name="motorcycle" />
  <view name="truck" />

  <table name="client">
    <auto-generated-column name="id" sequence="client_seq" />
    <version-control-column name="row_version" />

    <sequence name="client_seq" />

    <query java-method-name="computeTotalPurchased">
    <![CDATA[
      update client c set total_purchased = (
        select sum(p.final_price) from purchase p where p.client_id = c.id
      )
    ]]>
    </query>

    <query java-method-name="upgradeToVIP">
      <parameter name="minPurchases" java-type="java.lang.Integer" jdbc-type="NUMERIC" />
      update client c set vip = (
        select count(*) from purchase p where p.client_id = c.id
      ) > #{minPurchases}
    </query>

    <query java-method-name="deleteInactiveClients">
      <parameter name="createdBefore" java-type="java.sql.Date" jdbc-type="DATE" />
      delete from client c 
        where (select count(*) from purchase p where p.client_id = c.id) = 0 
        and #{createdBefore} >= created_at  
        and (select count(*) from client rf where rf.referred_by_id = c.id) = 0
    </query>

  </table>

  <!-- Simple Select -->
  <select java-class-name="CreatedClient">
    <parameter name="since" java-type="java.sql.Date" jdbc-type="DATE" />
    <parameter name="until" java-type="java.sql.Date" jdbc-type="DATE" />
      select * from client
      <complement>
        where created_at between #{since} and #{until}
      </complement>
  </select>

  <!-- Select returns fully-typed columns from multiple tables -->
  <select java-class-name="ClientWithPurchase">
    <parameter name="purchaseDate" java-type="java.sql.Date" jdbc-type="DATE" />
      select p.*, c.vip, c.state 
        from purchase p
        join client c on (c.id) = (p.client_id)
      <complement>
        where p.purchase_date = #{purchaseDate}
      </complement>
  </select>

  <!-- Select grouping data -->
  <select java-class-name="DailyTotal">
    <parameter name="from" java-type="java.sql.Date" jdbc-type="DATE" />
    <parameter name="to" java-type="java.sql.Date" jdbc-type="DATE" />
      select 
          purchase_date, 
          count(*) as number_of_purchases, 
          sum(vehicle_price) as price, 
          sum(extras_price) as extras, 
          sum(discount) as discount, 
          sum(tax) as taxes, 
          sum(final_price) as revenue
        from purchase
      <complement>
        where purchase_date between #{from} and #{to}
        group by purchase_date
      </complement>
  </select>

  <!-- Select using sub queries -->
  <select java-class-name="ClientNeverOfferedDiscount">
    select * from client
    <complement>
      where id not in (select client_id from purchase where discount > 0)
    </complement>
  </select>

  <!-- Native SQL - Limiting rows at the DB level -->
  <select java-class-name="NonVIPClient">
    <parameter name="maxRows" java-type="java.lang.Integer" jdbc-type="NUMERIC" />
    select * from client
    <complement>
      where vip = false
      limit #{maxRows}
    </complement>
  </select>

  <!-- Native SQL - Native Function -->
  <select java-class-name="VehiclePrice">
    <parameter name="brandName" java-type="java.lang.String" jdbc-type="VARCHAR" />
    select id, ifnull(list_price, '0') as price from vehicle
    <complement>
      where brand = #{brandName}
    </complement>
  </select>

  <!-- Dynamic SQL - Searching by Combined Conditions -->
  <select java-class-name="SearchedClient">
    <parameter name="minPurchases" java-type="java.lang.Integer" jdbc-type="NUMERIC" />
    <parameter name="state" java-type="java.lang.String" jdbc-type="VARCHAR" />
    <parameter name="createdSince" java-type="java.sql.Date" jdbc-type="DATE" />
    select c.* from client c
    <complement>
      <where>
        <if test="minPurchases != null">
          and (select count(*) from purchase p where p.client_id = c.id ) >= #{minPurchases}
        </if>
        <if test="state != null">
          and c.state = #{state}
        </if>
        <if test="createdSince != null">
          and created_at > #{createdSince}
        </if>
      </where>
    </complement>
  </select>

  <fragment file="hotrod-sales.xml" />

  <fragment file="hotrod-accounting.xml" />

</hotrod>
