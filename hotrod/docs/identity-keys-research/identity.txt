==========================
=== Apache Derby 10.13 ===
==========================
Allows identity            : yes
Allows identity by default : yes 
Find if column is identity : yes
--------------------------

create table test_identity1 (
  id int not null primary key generated always as identity,
  name varchar(100)
);

insert into test_identity1 (name) values ('Chicago'); -- succeeds

insert into test_identity1 (id, name) values (4, 'Denver'); -- FAILS!

insert into test_identity1 (id, name) values (null, 'Kansas'); -- FAILS!

insert into test_identity1 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity1;

-- 1, Chicago
-- 2, Oregon

create table test_identity2 (
  id int not null primary key generated by default as identity,
  name varchar(100)
);

insert into test_identity2 (name) values ('Chicago'); -- succeeds

insert into test_identity2 (id, name) values (4, 'Denver'); -- succeeds

insert into test_identity2 (id, name) values (null, 'Kansas'); -- FAILS!

insert into test_identity2 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity2;

-- 1, Chicago
-- 4, Denver
-- 2, Oregon


create table test_identity10 (
  id int not null primary key generated always as identity,
  id2 int not null generated always as identity,
  name varchar(100)
);
-- Error: Only one identity column is allowed in a table.
-- SQLState:  428C1
-- ErrorCode: 30000

--------------------------

select 
    case when c.autoincrementvalue is null then 'N/A' when c.columndefault is null then 'ALWAYS' else 'BY DEFAULT' end
  from sys.sysschemas s
  join sys.systables t on (t.schemaid) = (s.schemaid)
  join sys.syscolumns c on (c.referenceid) = (t.tableid)
  where s.schemaname = 'SCHEMA1' and t.tablename = 'TEST_IDENTITY2' and c.columnname = 'ID'
  
-- N/A: no autogeneration
-- ALWAYS: generated always as identity
-- BY DEFAULT: generated by default as identity

==========================
=== DB2 10.5           ===
==========================
Allows identity            : yes 
Allows identity by default : yes
Find if column is identity : 
--------------------------

create table test_identity1 (
  id int not null primary key generated always as identity,
  name varchar(100)
);

insert into test_identity1 (name) values ('Chicago'); -- succeeds

insert into test_identity1 (id, name) values (4, 'Denver'); -- FAILS!

insert into test_identity1 (id, name) values (null, 'Kansas'); -- FAILS!

insert into test_identity1 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity1;

-- 1, Chicago
-- 2, Oregon

create table test_identity2 (
  id int not null primary key generated by default as identity,
  name varchar(100)
);

insert into test_identity2 (name) values ('Chicago'); -- succeeds

insert into test_identity2 (id, name) values (4, 'Denver'); -- succeeds

insert into test_identity2 (id, name) values (null, 'Kansas'); -- FAILS!

insert into test_identity2 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity2;

-- 1, Chicago
-- 4, Denver
-- 2, Oregon


create table test_identity10 (
  id int not null primary key generated always as identity,
  id2 int not null generated always as identity,
  name varchar(100)
);
-- Error: DB2 SQL Error: SQLCODE=-372, SQLSTATE=428C1, SQLERRMC=null, DRIVER=3.53.95
-- SQLState:  428C1
-- ErrorCode: -372
-- -372   ONLY ONE ROWID, IDENTITY, ROW CHANGE TIMESTAMP, ROW BEGIN, ROW END, TRANSACTION START ID, OR SECURITY LABEL COLUMN IS ALLOWED IN A TABLE

--------------------------

select
    case when generated = 'A' then 'ALWAYS' when generated = 'D' then 'BY DEFAULT' else 'N/A' end
  from sysibm.syscolumns
  where tbcreator = 'SCHEMA1'
    and tbname = 'TEST_IDENTITY1'
    and name = 'ID'

==========================
=== H2 1.3             ===
==========================
Allows identity            : 
Allows identity by default : 
Find if column is identity : 
--------------------------

drop table test_identity1;

create table test_identity1 (
  id int not null identity primary key,
  name varchar(100)
);

insert into test_identity1 (name) values ('Chicago'); -- succeeds

insert into test_identity1 (id, name) values (4, 'Denver'); -- succeeds

insert into test_identity1 (id, name) values (null, 'Kansas'); -- succeeds

insert into test_identity1 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity1;

-- 1, Chicago
-- 4, Denver
-- 5, Kansas
-- 6, Oregon


create table test_identity10 (
  id int not null identity primary key,
  id2 int not null identity,
  name varchar(100)
);
-- Error: Attempt to define a second primary key; SQL statement:
-- ... [90017-176]
-- SQLState:  90017
-- ErrorCode: 90017

--------------------------

select
    case when sequence_name is null then 'N/A' else 'BY DEFAULT' end
  from information_schema.columns
  where table_schema = 'PUBLIC'
    and table_name = 'TEST_IDENTITY1'
    and column_name = 'ID'

==========================
=== HyperSQL 2.2       ===
==========================
Allows identity            : 
Allows identity by default : 
Find if column is identity : 
--------------------------

drop table test_identity0;
drop table test_identity1;
drop table test_identity2;
drop table test_identity3;
drop table test_identity4;


create table test_identity0 (
  id int not null primary key,
  name varchar(100)
);


create table test_identity1 (
  id int generated always as identity not null primary key,
  name varchar(100)
);

insert into test_identity1 (name) values ('Chicago'); -- succeeds

insert into test_identity1 (id, name) values (4, 'Denver'); -- FAILS!

insert into test_identity1 (id, name) values (null, 'Kansas'); -- FAILS!

insert into test_identity1 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity1;

-- 0, Chicago
-- 1, Oregon


create table test_identity2 (
  id int generated by default as identity not null primary key,
  name varchar(100)
);

insert into test_identity2 (name) values ('Chicago'); -- succeeds

insert into test_identity2 (id, name) values (4, 'Denver'); -- succeeds

insert into test_identity2 (id, name) values (null, 'Kansas'); -- succeeds

insert into test_identity2 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity2;

-- 0, Chicago
-- 4, Denver
-- 5, Kansas
-- 6, Oregon


create sequence my_seq3;

create table test_identity3 (
  id int generated by default as sequence my_seq3 not null primary key, -- works like a BY DEFAULT identity
  name varchar(100)
);

insert into test_identity3 (name) values ('Chicago'); -- succeeds

insert into test_identity3 (id, name) values (4, 'Denver'); -- succeeds

insert into test_identity3 (id, name) values (null, 'Kansas'); -- succeeds

insert into test_identity3 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity3;

-- 0, Chicago
-- 1, Kansas
-- 2, Oregon
-- 4, Denver


create table test_identity4 (
  firstname varchar(20),
  lastname varchar(20), 
  id varchar(40) generated always as (firstname || ' ' || lastname) primary key -- not autogenerated -> N/A
);

insert into test_identity4 (firstname, lastname) values ('Felix', 'the Cat');

insert into test_identity4 (firstname, lastname) values ('Pink', 'Panther');

select * from test_identity4;


create table test_identity10 (
  id int generated always as identity not null identity primary key,
  id2 int generated always as identity not null identity,
  name varchar(100)
);
-- Error: unexpected token: IDENTITY : line: 2
-- SQLState:  42581
-- ErrorCode: -5581

--------------------------

select 
    case when identity_generation in ('ALWAYS', 'BY DEFAULT') then identity_generation else 'N/A' end
  from information_schema.columns
  where table_catalog = 'PUBLIC' -- always 'PUBLIC'
    and table_schema = 'SCHEMA1' -- the specific schema
    and table_name = 'TEST_IDENTITY1'
    and column_name = 'ID'

==========================
=== MySQL 5.5          ===
==========================
Allows identity            : yes
Allows identity by default : yes 
Find if column is identity : yes
--------------------------

drop table test_identity1;

create table test_identity1 (
  id int not null primary key auto_increment,
  name varchar(100)
);

insert into test_identity1 (name) values ('Chicago'); -- succeeds

insert into test_identity1 (id, name) values (4, 'Denver'); -- succeeds

insert into test_identity1 (id, name) values (null, 'Kansas'); -- succeeds

insert into test_identity1 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity1;

-- 1, Chicago
-- 4, Denver
-- 5, Kansas
-- 6, Oregon


create table test_identity10 (
  id int not null primary key auto_increment,
  id2 int not null auto_increment,
  name varchar(100)
);
-- Error: Incorrect table definition; there can be only one auto column and it must be defined as a key
-- SQLState:  42000
-- ErrorCode: 1075

--------------------------

select
    case when extra = 'auto_increment' then 'BY DEFAULT' else 'N/A' end
  from information_schema.columns 
  where table_schema = 'database1'
    and (table_name = 'test_identity0' or table_name = 'test_identity1')
    and column_name = 'id';

==========================
=== Oracle 12c         ===
==========================
Allows identity            : 
Allows identity by default : 
Find if column is identity : 
--------------------------

create table test_identity0 (
  id number(9) not null primary key,
  name varchar(100)
);

create table test_identity1 (
  id number(9) generated always as identity not null primary key,
  name varchar(100)
);

insert into test_identity1 (name) values ('Chicago'); -- succeeds

insert into test_identity1 (id, name) values (4, 'Denver'); -- FAILS!

insert into test_identity1 (id, name) values (null, 'Kansas'); -- FAILS!

insert into test_identity1 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity1;

-- 1, Chicago
-- 2, Oregon

create table test_identity2 (
  id number(9) generated by default as identity not null primary key,
  name varchar(100)
);

insert into test_identity2 (name) values ('Chicago'); -- succeeds

insert into test_identity2 (id, name) values (4, 'Denver'); -- succeeds

insert into test_identity2 (id, name) values (null, 'Kansas'); -- FAILS!

insert into test_identity2 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity2;

-- 1, Chicago
-- 4, Denver
-- 2, Oregon

create table test_identity3 (
  id number(9) generated by default on null as identity not null primary key,
  name varchar(100)
);

insert into test_identity3 (name) values ('Chicago'); -- succeeds

insert into test_identity3 (id, name) values (4, 'Denver'); -- succeeds

insert into test_identity3 (id, name) values (null, 'Kansas'); -- succeeds

insert into test_identity3 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity3;

-- 1, Chicago
-- 4, Denver
-- 2, Kansas
-- 3, Oregon


create table test_identity10 (
  id number(9) generated always as identity not null primary key,
  id2 number(9) generated always as identity not null,
  name varchar(100)
);
-- Error: ORA-30669: table can have only one identity column
-- SQLState:  99999
-- ErrorCode: 30669
-- Position: 150

--------------------------

select generation_type
  from user_tab_identity_cols
  where table_name = 'TABLE'
    and column_name = 'COLUMN'

-- no row returned: not an identity column
-- ALWAYS: generated always as identity
-- BY DEFAULT: generated by default [on null] as identity

Alternatively, to see ALL identity columns for all schemas (not commonly needed) you can use:

select generation_type
  from all_tab_identity_cols
  where owner = 'SCHEMA'
    and table_name = 'TABLE'
    and column_name = 'COLUMN'

==========================
=== PostgreSQL 9.4     ===
==========================
Allows identity            : 
Allows identity by default : 
Find if column is identity : 
--------------------------

drop table test_identity0;
drop table test_identity1;

create table test_identity0 (
  id int not null primary key,
  name varchar(100)
);

create table test_identity1 (
  id serial not null primary key,
  name varchar(100)
);

insert into test_identity1 (name) values ('Chicago'); -- succeeds

insert into test_identity1 (id, name) values (4, 'Denver'); -- succeeds

insert into test_identity1 (id, name) values (null, 'Kansas'); -- FAILS!

insert into test_identity1 (id, name) values (default, 'Oregon'); -- succeeds

select * from test_identity1;

-- 1, Chicago
-- 4, Denver
-- 2, Oregon


create table test_identity10 (
  id serial not null primary key,
  id2 serial not null,
  name varchar(100)
);

alter sequence test_identity10_id2_seq restart with 2000;

insert into test_identity10 (name) values ('Chicago'); -- succeeds

insert into test_identity10 (name) values ('Denver'); -- succeeds

select * from test_identity10;

-- 1, 2000, Chicago
-- 2, 2001, Denver

select 
  currval(pg_get_serial_sequence('test_identity10','id')), 
  currval(pg_get_serial_sequence('test_identity10','id2'));

-- 2, 2001 -- last inserted identity values; currval() is concurrent safe.

--------------------------

For a column to be an IDENTITY it must satisfy two conditions:

 * The default value of the column must take the form (with a variable SEQUENCE_NAME):

    nextval('SEQUENCE_NAME'::regclass)

   - First, retrieve the sequence name from the default constraint:
 
select column_default 
  from information_schema.columns
  where table_schema = 'schema'
    and table_name = 'table_name' 
    and column_name = 'column_name'

   - If the row does not take the form described above, then it's not an IDENTITY
     column. If it's found and has the form described above, then retrieve the 
     SEQUENCE_NAME. Sometimes the SEQUENCE_NAME is wrapped in double quotes; if this
     is the case, remove the double quotes to use it in the query below.
 
 * Second, find the sequence name in the relationships table:

select relname
  from pg_catalog.pg_class r
  join pg_catalog.pg_namespace n on (n.oid) = (r.relnamespace)
  where n.nspname = 'schema_name'
    and relname = 'SEQUENCE_NAME'
    and relkind = 'S'
    
   - A single row should be returned with a single column with value 1. If this
     is the case then it's an BY DEFAULT identity.
   - Otherwise it's not an IDENTITY column.
 
 * If not found on either these queries, then it's not an IDENTITY column.

==========================
=== SAP ASE 16         ===
==========================
Allows identity            : 
Allows identity by default : 
Find if column is identity : 
--------------------------

create table test_identity0 (
  id int not null primary key,
  name varchar(100)
)

create table test_identity1 (
  id int identity not null primary key,
  name varchar(100)
)

insert into test_identity1 (name) values ('Chicago') -- succeeds

insert into test_identity1 (id, name) values (4, 'Denver') -- FAILS!

insert into test_identity1 (id, name) values (null, 'Kansas') -- FAILS!

insert into test_identity1 (id, name) values (default, 'Oregon') -- FAILS!

select * from test_identity1

-- 1, Chicago


create table test_identity10 (
  id int identity not null primary key,
  id2 int identity not null,
  name varchar(100)
)
-- Error: A table can only have one identity column. Since table 'test_identity10' already has one, you can't add the column 'id2'.
-- SQLState:  ZZZZZ
-- ErrorCode: 2765

--------------------------

To find out if a column is an ALWAYS identity the following SQL must find it:

select number
  from catalog.schema.syscolumns 
  where object_name(id) = 'table'
    and name = 'column'
    and status & 128 = 128

If it doesn't find it, then it's not an identity. 
There are no BY DEFAULT identities (in any practical way, at least).

=======================
=== SQL Server 2014 ===
=======================
Allows identity            : 
Allows identity by default : 
Find if column is identity : 
--------------------------

create table test_identity0 (
  id int not null primary key,
  name varchar(100)
);

create table test_identity1 (
  id int identity not null primary key,
  name varchar(100)
);

insert into test_identity1 (name) values ('Chicago'); -- succeeds

insert into test_identity1 (id, name) values (4, 'Denver'); -- FAILS!

insert into test_identity1 (id, name) values (null, 'Kansas'); -- FAILS!

insert into test_identity1 (id, name) values (default, 'Oregon'); -- FAILS!

select * from test_identity1;

-- 1, Chicago


create table test_identity10 (
  id int identity not null primary key,
  id2 int identity not null,
  name varchar(100)
);
-- Error: Multiple identity columns specified for table 'test_identity10'. Only one identity column per table is allowed.
-- SQLState:  S0002
-- ErrorCode: 2744

--------------------------

select c.is_identity
  from sys.columns c
  join sys.objects t on (t.object_id) = (c.object_id) 
  join sys.schemas s on (s.schema_id) = (t.schema_id)
  where s.name = 'schema'
    and t.name = 'table'
    and c.name = 'column'

Returns a BIT type column. If equals to 1, then it's an ALWAYS. Otherwise it's not an IDENTITY.














