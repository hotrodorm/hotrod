// Autogenerated by EmpusaMB. Do not edit.

package com.company.daos.primitives;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.OrderBy;
import org.hotrod.runtime.interfaces.Selectable;
import org.hotrod.runtime.tx.TxDemarcator;
import org.hotrod.runtime.tx.TxManager;

import com.company.daos.primitives.AccountDebitDAOPrimitives.AccountDebitOrderBy;
import com.company.daos.AccountDebitDAO;

public class AccountDebitDAOPrimitives
    implements Selectable<AccountDebitDAO, AccountDebitOrderBy>, 
TxDemarcator, Serializable {

  private static final long serialVersionUID = 1L;

  // DAO Properties (view columns)

  protected java.lang.String name = null;
  protected java.lang.Integer id = null;
  protected java.sql.Date completedAt = null;
  protected java.lang.Integer amount = null;
  protected java.lang.Integer accountId = null;

  // select by example (with ordering)

  @Override
  public List<AccountDebitDAO> select(final AccountDebitOrderBy... orderBies)
      throws SQLException {
    TxManager txm = null;
    try {
      txm = getTxManager();
      SqlSession sqlSession = txm.getSqlSession();
      return select(sqlSession, orderBies);
    } finally {
      if (txm != null && !txm.isTransactionOngoing()) {
        txm.close();
      }
    }
  }

  @Override
  public List<AccountDebitDAO> select(final SqlSession sqlSession, final AccountDebitOrderBy... orderBies)
      throws SQLException {
    DaoWithOrder<AccountDebitDAOPrimitives, AccountDebitOrderBy> dwo = //
    new DaoWithOrder<AccountDebitDAOPrimitives, AccountDebitOrderBy>(this, orderBies);
    return sqlSession.selectList("com.company.daos.primitives.accountDebit.selectByExample", dwo);
  }

  // getters & setters

  public final java.lang.String getName() {
    return this.name;
  }

  public final void setName(final java.lang.String name) {
    this.name = name;
  }

  public final java.lang.Integer getId() {
    return this.id;
  }

  public final void setId(final java.lang.Integer id) {
    this.id = id;
  }

  public final java.sql.Date getCompletedAt() {
    return this.completedAt;
  }

  public final void setCompletedAt(final java.sql.Date completedAt) {
    this.completedAt = completedAt;
  }

  public final java.lang.Integer getAmount() {
    return this.amount;
  }

  public final void setAmount(final java.lang.Integer amount) {
    this.amount = amount;
  }

  public final java.lang.Integer getAccountId() {
    return this.accountId;
  }

  public final void setAccountId(final java.lang.Integer accountId) {
    this.accountId = accountId;
  }

  // to string

  public String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder();
    sb.append("[");
    sb.append(this.name + ", ");
    sb.append(this.id + ", ");
    sb.append(this.completedAt + ", ");
    sb.append(this.amount + ", ");
    sb.append(this.accountId);
    sb.append("]");
    return sb.toString();
  }

  // DAO ordering

  public enum AccountDebitOrderBy implements OrderBy {

    NAME("ACCOUNT_DEBIT", "NAME", true), //
    NAME$DESC("ACCOUNT_DEBIT", "NAME", false), //
    ID("ACCOUNT_DEBIT", "ID", true), //
    ID$DESC("ACCOUNT_DEBIT", "ID", false), //
    COMPLETED_AT("ACCOUNT_DEBIT", "COMPLETED_AT", true), //
    COMPLETED_AT$DESC("ACCOUNT_DEBIT", "COMPLETED_AT", false), //
    AMOUNT("ACCOUNT_DEBIT", "AMOUNT", true), //
    AMOUNT$DESC("ACCOUNT_DEBIT", "AMOUNT", false), //
    ACCOUNT_ID("ACCOUNT_DEBIT", "ACCOUNT_ID", true), //
    ACCOUNT_ID$DESC("ACCOUNT_DEBIT", "ACCOUNT_ID", false);

    private AccountDebitOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Transaction demarcation

  private static TxManager txManager = null;

  public static TxManager getTxManager() throws SQLException {
    if (txManager == null) {
      synchronized (AccountDebitDAOPrimitives.class) {
        if (txManager == null) {
          txManager = new TxManager(getSqlSessionFactory());
        }
      }
    }
    return txManager;
  }

  public static SqlSessionFactory getSqlSessionFactory() throws SQLException {
    return com.company.sessionfactory.SessionFactory.getInstance().getSqlSessionFactory();
  }

}
