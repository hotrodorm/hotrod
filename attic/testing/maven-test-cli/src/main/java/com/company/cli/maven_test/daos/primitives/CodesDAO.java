// Autogenerated by HotRod -- Do not edit.

package com.company.cli.maven_test.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import com.company.cli.maven_test.daos.CodesVO;
import com.company.cli.maven_test.daos.QuadrantVO;
import com.company.cli.maven_test.daos.primitives.QuadrantDAO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component("codesDAO")
public class CodesDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Value("#{sqlDialectFactory.sqlDialect}")
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes

  public com.company.cli.maven_test.daos.CodesVO  selectByUIAccount_VersionName(final java.lang.Integer account, final java.lang.Integer versionName) {
    if (account == null)
      return null;
    if (versionName == null)
      return null;
    com.company.cli.maven_test.daos.CodesVO vo = new com.company.cli.maven_test.daos.CodesVO();
    vo.setAccount(account);
    vo.setVersionName(versionName);
    return this.sqlSession.selectOne("com.company.cli.maven_test.daos.primitives.codes.selectByUIAccount_VersionName", vo);
  }

  public com.company.cli.maven_test.daos.CodesVO  selectByUIAccountVersion_Name(final java.lang.Integer accountVersion, final java.lang.Integer name) {
    if (accountVersion == null)
      return null;
    if (name == null)
      return null;
    com.company.cli.maven_test.daos.CodesVO vo = new com.company.cli.maven_test.daos.CodesVO();
    vo.setAccountVersion(accountVersion);
    vo.setName(name);
    return this.sqlSession.selectOne("com.company.cli.maven_test.daos.primitives.codes.selectByUIAccountVersion_Name", vo);
  }

  // select by example

  public List<com.company.cli.maven_test.daos.CodesVO> selectByExample(final com.company.cli.maven_test.daos.CodesVO example, final CodesOrderBy... orderBies)
      {
    DaoWithOrder<com.company.cli.maven_test.daos.CodesVO, CodesOrderBy> dwo = //
        new DaoWithOrder<com.company.cli.maven_test.daos.CodesVO, CodesOrderBy>(example, orderBies);
    return this.sqlSession.selectList("com.company.cli.maven_test.daos.primitives.codes.selectByExample", dwo);
  }

  // select by criteria

  public CriteriaWherePhase<com.company.cli.maven_test.daos.CodesVO> selectByCriteria(final CodesDAO.CodesTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<com.company.cli.maven_test.daos.CodesVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "com.company.cli.maven_test.daos.primitives.codes.selectByCriteria");
  }

  // insert

  public int insert(final com.company.cli.maven_test.daos.CodesVO vo) {
    return insert(vo, false);
  }

  public int insert(final com.company.cli.maven_test.daos.CodesVO vo, final boolean retrieveDefaults) {
    String id = retrieveDefaults ? "com.company.cli.maven_test.daos.primitives.codes.insertRetrievingDefaults" : "com.company.cli.maven_test.daos.primitives.codes.insert";
    int rows = this.sqlSession.insert(id, vo);
    return rows;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int updateByExample(final com.company.cli.maven_test.daos.CodesVO example, final com.company.cli.maven_test.daos.CodesVO updateValues) {
    UpdateByExampleDao<com.company.cli.maven_test.daos.CodesVO> fvd = //
      new UpdateByExampleDao<com.company.cli.maven_test.daos.CodesVO>(example, updateValues);
    return this.sqlSession.update("com.company.cli.maven_test.daos.primitives.codes.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final com.company.cli.maven_test.daos.CodesVO example) {
    return this.sqlSession.delete("com.company.cli.maven_test.daos.primitives.codes.deleteByExample", example);
  }

  // DAO ordering

  public enum CodesOrderBy implements OrderBy {

    ID("codes", "id", true), //
    ID$DESC("codes", "id", false), //
    ACCOUNT("codes", "account", true), //
    ACCOUNT$DESC("codes", "account", false), //
    VERSION_NAME("codes", "version_name", true), //
    VERSION_NAME$DESC("codes", "version_name", false), //
    ACCOUNT_VERSION("codes", "account_version", true), //
    ACCOUNT_VERSION$DESC("codes", "account_version", false), //
    NAME("codes", "name", true), //
    NAME$DESC("codes", "name", false);

    private CodesOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static CodesTable newTable() {
    return new CodesTable();
  }

  public static CodesTable newTable(final String alias) {
    return new CodesTable(alias);
  }

  public static class CodesTable extends Table {

    // Properties

    public NumberColumn id;
    public NumberColumn account;
    public NumberColumn versionName;
    public NumberColumn accountVersion;
    public NumberColumn name;

    // Constructors

    CodesTable() {
      super(null, null, "codes", "Table", null);
      initialize();
    }

    CodesTable(final String alias) {
      super(null, null, "codes", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id");
      this.account = new NumberColumn(this, "account", "account");
      this.versionName = new NumberColumn(this, "version_name", "versionName");
      this.accountVersion = new NumberColumn(this, "account_version", "accountVersion");
      this.name = new NumberColumn(this, "name", "name");
    }

  }

}
