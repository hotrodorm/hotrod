// Autogenerated by HotRod -- Do not edit.

package com.company.cli.maven_test.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import com.company.cli.maven_test.daos.AccountVO;
import com.company.cli.maven_test.daos.AccountAlertVO;
import com.company.cli.maven_test.daos.primitives.AccountAlertDAO.AccountAlertOrderBy;
import com.company.cli.maven_test.daos.primitives.AccountAlertDAO;
import com.company.cli.maven_test.daos.ClientVO;
import com.company.cli.maven_test.daos.primitives.ClientDAO.ClientOrderBy;
import com.company.cli.maven_test.daos.primitives.ClientDAO;
import com.company.cli.maven_test.daos.TransactionVO;
import com.company.cli.maven_test.daos.primitives.TransactionDAO.TransactionOrderBy;
import com.company.cli.maven_test.daos.primitives.TransactionDAO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component("accountDAO")
public class AccountDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Value("#{sqlDialectFactory.sqlDialect}")
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public com.company.cli.maven_test.daos.AccountVO selectByPK(final java.lang.Integer id) {
    if (id == null)
      return null;
    com.company.cli.maven_test.daos.AccountVO vo = new com.company.cli.maven_test.daos.AccountVO();
    vo.setId(id);
    return this.sqlSession.selectOne("com.company.cli.maven_test.daos.primitives.account.selectByPK", vo);
  }

  // select by unique indexes

  public com.company.cli.maven_test.daos.AccountVO  selectByUIName(final java.lang.String name) {
    if (name == null)
      return null;
    com.company.cli.maven_test.daos.AccountVO vo = new com.company.cli.maven_test.daos.AccountVO();
    vo.setName(name);
    return this.sqlSession.selectOne("com.company.cli.maven_test.daos.primitives.account.selectByUIName", vo);
  }

  // select by example

  public List<com.company.cli.maven_test.daos.AccountVO> selectByExample(final com.company.cli.maven_test.daos.AccountVO example, final AccountOrderBy... orderBies)
      {
    DaoWithOrder<com.company.cli.maven_test.daos.AccountVO, AccountOrderBy> dwo = //
        new DaoWithOrder<com.company.cli.maven_test.daos.AccountVO, AccountOrderBy>(example, orderBies);
    return this.sqlSession.selectList("com.company.cli.maven_test.daos.primitives.account.selectByExample", dwo);
  }

  // select by criteria

  public CriteriaWherePhase<com.company.cli.maven_test.daos.AccountVO> selectByCriteria(final AccountDAO.AccountTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<com.company.cli.maven_test.daos.AccountVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "com.company.cli.maven_test.daos.primitives.account.selectByCriteria");
  }

  // insert

  public int insert(final com.company.cli.maven_test.daos.AccountVO vo) {
    return insert(vo, false);
  }

  public int insert(final com.company.cli.maven_test.daos.AccountVO vo, final boolean retrieveDefaults) {
    String id = retrieveDefaults ? "com.company.cli.maven_test.daos.primitives.account.insertRetrievingDefaults" : "com.company.cli.maven_test.daos.primitives.account.insert";
    int rows = this.sqlSession.insert(id, vo);
    return rows;
  }

  // update by PK

  public int update(final com.company.cli.maven_test.daos.AccountVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("com.company.cli.maven_test.daos.primitives.account.updateByPK", vo);
  }

  // delete by PK

  public int delete(final com.company.cli.maven_test.daos.AccountVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.delete("com.company.cli.maven_test.daos.primitives.account.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final com.company.cli.maven_test.daos.AccountVO example, final com.company.cli.maven_test.daos.AccountVO updateValues) {
    UpdateByExampleDao<com.company.cli.maven_test.daos.AccountVO> fvd = //
      new UpdateByExampleDao<com.company.cli.maven_test.daos.AccountVO>(example, updateValues);
    return this.sqlSession.update("com.company.cli.maven_test.daos.primitives.account.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final com.company.cli.maven_test.daos.AccountVO example) {
    return this.sqlSession.delete("com.company.cli.maven_test.daos.primitives.account.deleteByExample", example);
  }

  // DAO ordering

  public enum AccountOrderBy implements OrderBy {

    ID("account", "id", true), //
    ID$DESC("account", "id", false), //
    NAME("account", "name", true), //
    NAME$DESC("account", "name", false), //
    NAME$CASEINSENSITIVE("account", "lower(name)", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("account", "lower(name), name", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("account", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE("account", "lower(name)", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("account", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("account", "lower(name), name", true), //
    TYPE("account", "type", true), //
    TYPE$DESC("account", "type", false), //
    TYPE$CASEINSENSITIVE("account", "lower(type)", true), //
    TYPE$CASEINSENSITIVE_STABLE_FORWARD("account", "lower(type), type", true), //
    TYPE$CASEINSENSITIVE_STABLE_REVERSE("account", "lower(type), type", false), //
    TYPE$DESC_CASEINSENSITIVE("account", "lower(type)", false), //
    TYPE$DESC_CASEINSENSITIVE_STABLE_FORWARD("account", "lower(type), type", false), //
    TYPE$DESC_CASEINSENSITIVE_STABLE_REVERSE("account", "lower(type), type", true), //
    CURRENT_BALANCE("account", "current_balance", true), //
    CURRENT_BALANCE$DESC("account", "current_balance", false), //
    CREATED_ON("account", "created_on", true), //
    CREATED_ON$DESC("account", "created_on", false), //
    MAIN_STATUS("account", "active", true), //
    MAIN_STATUS$DESC("account", "active", false);

    private AccountOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static AccountTable newTable() {
    return new AccountTable();
  }

  public static AccountTable newTable(final String alias) {
    return new AccountTable(alias);
  }

  public static class AccountTable extends Table {

    // Properties

    public NumberColumn id;
    public StringColumn name;
    public StringColumn type;
    public NumberColumn currentBalance;
    public DateTimeColumn createdOn;
    public NumberColumn mainStatus;

    // Constructors

    AccountTable() {
      super(null, null, "account", "Table", null);
      initialize();
    }

    AccountTable(final String alias) {
      super(null, null, "account", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id");
      this.name = new StringColumn(this, "name", "name");
      this.type = new StringColumn(this, "type", "type");
      this.currentBalance = new NumberColumn(this, "current_balance", "currentBalance");
      this.createdOn = new DateTimeColumn(this, "created_on", "createdOn");
      this.mainStatus = new NumberColumn(this, "active", "mainStatus");
    }

  }

}
