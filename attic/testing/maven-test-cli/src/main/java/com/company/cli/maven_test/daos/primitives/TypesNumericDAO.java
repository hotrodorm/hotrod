// Autogenerated by HotRod -- Do not edit.

package com.company.cli.maven_test.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import com.company.cli.maven_test.daos.TypesNumericVO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component("typesNumericDAO")
public class TypesNumericDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Value("#{sqlDialectFactory.sqlDialect}")
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<com.company.cli.maven_test.daos.TypesNumericVO> selectByExample(final com.company.cli.maven_test.daos.TypesNumericVO example, final TypesNumericOrderBy... orderBies)
      {
    DaoWithOrder<com.company.cli.maven_test.daos.TypesNumericVO, TypesNumericOrderBy> dwo = //
        new DaoWithOrder<com.company.cli.maven_test.daos.TypesNumericVO, TypesNumericOrderBy>(example, orderBies);
    return this.sqlSession.selectList("com.company.cli.maven_test.daos.primitives.typesNumeric.selectByExample", dwo);
  }

  // select by criteria

  public CriteriaWherePhase<com.company.cli.maven_test.daos.TypesNumericVO> selectByCriteria(final TypesNumericDAO.TypesNumericTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<com.company.cli.maven_test.daos.TypesNumericVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "com.company.cli.maven_test.daos.primitives.typesNumeric.selectByCriteria");
  }

  // insert

  public int insert(final com.company.cli.maven_test.daos.TypesNumericVO vo) {
    return insert(vo, false);
  }

  public int insert(final com.company.cli.maven_test.daos.TypesNumericVO vo, final boolean retrieveDefaults) {
    String id = retrieveDefaults ? "com.company.cli.maven_test.daos.primitives.typesNumeric.insertRetrievingDefaults" : "com.company.cli.maven_test.daos.primitives.typesNumeric.insert";
    int rows = this.sqlSession.insert(id, vo);
    return rows;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int updateByExample(final com.company.cli.maven_test.daos.TypesNumericVO example, final com.company.cli.maven_test.daos.TypesNumericVO updateValues) {
    UpdateByExampleDao<com.company.cli.maven_test.daos.TypesNumericVO> fvd = //
      new UpdateByExampleDao<com.company.cli.maven_test.daos.TypesNumericVO>(example, updateValues);
    return this.sqlSession.update("com.company.cli.maven_test.daos.primitives.typesNumeric.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final com.company.cli.maven_test.daos.TypesNumericVO example) {
    return this.sqlSession.delete("com.company.cli.maven_test.daos.primitives.typesNumeric.deleteByExample", example);
  }

  // DAO ordering

  public enum TypesNumericOrderBy implements OrderBy {

    INT1("types_numeric", "int1", true), //
    INT1$DESC("types_numeric", "int1", false), //
    INT2("types_numeric", "int2", true), //
    INT2$DESC("types_numeric", "int2", false), //
    INT3("types_numeric", "int3", true), //
    INT3$DESC("types_numeric", "int3", false), //
    INT4("types_numeric", "int4", true), //
    INT4$DESC("types_numeric", "int4", false), //
    INT5("types_numeric", "int5", true), //
    INT5$DESC("types_numeric", "int5", false), //
    INT6("types_numeric", "int6", true), //
    INT6$DESC("types_numeric", "int6", false), //
    DEC1("types_numeric", "dec1", true), //
    DEC1$DESC("types_numeric", "dec1", false), //
    DEC2("types_numeric", "dec2", true), //
    DEC2$DESC("types_numeric", "dec2", false), //
    DEC3("types_numeric", "dec3", true), //
    DEC3$DESC("types_numeric", "dec3", false), //
    DEC4("types_numeric", "dec4", true), //
    DEC4$DESC("types_numeric", "dec4", false), //
    DEC5("types_numeric", "dec5", true), //
    DEC5$DESC("types_numeric", "dec5", false), //
    DEC6("types_numeric", "dec6", true), //
    DEC6$DESC("types_numeric", "dec6", false), //
    DEC7("types_numeric", "dec7", true), //
    DEC7$DESC("types_numeric", "dec7", false), //
    FLO1("types_numeric", "flo1", true), //
    FLO1$DESC("types_numeric", "flo1", false), //
    FLO2("types_numeric", "flo2", true), //
    FLO2$DESC("types_numeric", "flo2", false);

    private TypesNumericOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static TypesNumericTable newTable() {
    return new TypesNumericTable();
  }

  public static TypesNumericTable newTable(final String alias) {
    return new TypesNumericTable(alias);
  }

  public static class TypesNumericTable extends Table {

    // Properties

    public NumberColumn int1;
    public NumberColumn int2;
    public NumberColumn int3;
    public NumberColumn int4;
    public NumberColumn int5;
    public NumberColumn int6;
    public NumberColumn dec1;
    public NumberColumn dec2;
    public NumberColumn dec3;
    public NumberColumn dec4;
    public NumberColumn dec5;
    public NumberColumn dec6;
    public NumberColumn dec7;
    public NumberColumn flo1;
    public NumberColumn flo2;

    // Constructors

    TypesNumericTable() {
      super(null, null, "types_numeric", "Table", null);
      initialize();
    }

    TypesNumericTable(final String alias) {
      super(null, null, "types_numeric", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.int1 = new NumberColumn(this, "int1", "int1");
      this.int2 = new NumberColumn(this, "int2", "int2");
      this.int3 = new NumberColumn(this, "int3", "int3");
      this.int4 = new NumberColumn(this, "int4", "int4");
      this.int5 = new NumberColumn(this, "int5", "int5");
      this.int6 = new NumberColumn(this, "int6", "int6");
      this.dec1 = new NumberColumn(this, "dec1", "dec1");
      this.dec2 = new NumberColumn(this, "dec2", "dec2");
      this.dec3 = new NumberColumn(this, "dec3", "dec3");
      this.dec4 = new NumberColumn(this, "dec4", "dec4");
      this.dec5 = new NumberColumn(this, "dec5", "dec5");
      this.dec6 = new NumberColumn(this, "dec6", "dec6");
      this.dec7 = new NumberColumn(this, "dec7", "dec7");
      this.flo1 = new NumberColumn(this, "flo1", "flo1");
      this.flo2 = new NumberColumn(this, "flo2", "flo2");
    }

  }

}
