// Autogenerated by HotRod -- Do not edit.

package com.company.cli.maven_test.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import com.company.cli.maven_test.daos.ClientVO;
import com.company.cli.maven_test.daos.FederalBranchVO;
import com.company.cli.maven_test.daos.primitives.FederalBranchDAO;
import com.company.cli.maven_test.daos.StateBranchVO;
import com.company.cli.maven_test.daos.primitives.StateBranchDAO;
import com.company.cli.maven_test.daos.primitives.ClientDAO;
import com.company.cli.maven_test.daos.AccountVO;
import com.company.cli.maven_test.daos.primitives.AccountDAO;
import com.company.cli.maven_test.daos.PropertiesVO;
import com.company.cli.maven_test.daos.primitives.PropertiesDAO;
import com.company.cli.maven_test.daos.AgentVO;
import com.company.cli.maven_test.daos.primitives.AgentDAO.AgentOrderBy;
import com.company.cli.maven_test.daos.primitives.AgentDAO;
import com.company.cli.maven_test.daos.primitives.ClientDAO.ClientOrderBy;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component("clientDAO")
public class ClientDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Value("#{sqlDialectFactory.sqlDialect}")
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public com.company.cli.maven_test.daos.ClientVO selectByPK(final java.lang.Integer id) {
    if (id == null)
      return null;
    com.company.cli.maven_test.daos.ClientVO vo = new com.company.cli.maven_test.daos.ClientVO();
    vo.setId(id);
    return this.sqlSession.selectOne("com.company.cli.maven_test.daos.primitives.client.selectByPK", vo);
  }

  // select by unique indexes

  public com.company.cli.maven_test.daos.ClientVO  selectByUINationalId(final java.lang.Integer nationalId) {
    if (nationalId == null)
      return null;
    com.company.cli.maven_test.daos.ClientVO vo = new com.company.cli.maven_test.daos.ClientVO();
    vo.setNationalId(nationalId);
    return this.sqlSession.selectOne("com.company.cli.maven_test.daos.primitives.client.selectByUINationalId", vo);
  }

  // select by example

  public List<com.company.cli.maven_test.daos.ClientVO> selectByExample(final com.company.cli.maven_test.daos.ClientVO example, final ClientOrderBy... orderBies)
      {
    DaoWithOrder<com.company.cli.maven_test.daos.ClientVO, ClientOrderBy> dwo = //
        new DaoWithOrder<com.company.cli.maven_test.daos.ClientVO, ClientOrderBy>(example, orderBies);
    return this.sqlSession.selectList("com.company.cli.maven_test.daos.primitives.client.selectByExample", dwo);
  }

  // select by criteria

  public CriteriaWherePhase<com.company.cli.maven_test.daos.ClientVO> selectByCriteria(final ClientDAO.ClientTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<com.company.cli.maven_test.daos.ClientVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "com.company.cli.maven_test.daos.primitives.client.selectByCriteria");
  }

  // insert

  public int insert(final com.company.cli.maven_test.daos.ClientVO vo) {
    String id = "com.company.cli.maven_test.daos.primitives.client.insert";
    return this.sqlSession.insert(id, vo);
  }

  // update by PK

  public int update(final com.company.cli.maven_test.daos.ClientVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("com.company.cli.maven_test.daos.primitives.client.updateByPK", vo);
  }

  // delete by PK

  public int delete(final com.company.cli.maven_test.daos.ClientVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.delete("com.company.cli.maven_test.daos.primitives.client.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final com.company.cli.maven_test.daos.ClientVO example, final com.company.cli.maven_test.daos.ClientVO updateValues) {
    UpdateByExampleDao<com.company.cli.maven_test.daos.ClientVO> fvd = //
      new UpdateByExampleDao<com.company.cli.maven_test.daos.ClientVO>(example, updateValues);
    return this.sqlSession.update("com.company.cli.maven_test.daos.primitives.client.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final com.company.cli.maven_test.daos.ClientVO example) {
    return this.sqlSession.delete("com.company.cli.maven_test.daos.primitives.client.deleteByExample", example);
  }

  // DAO ordering

  public enum ClientOrderBy implements OrderBy {

    ID("client", "id", true), //
    ID$DESC("client", "id", false), //
    NATIONAL_ID("client", "national_id", true), //
    NATIONAL_ID$DESC("client", "national_id", false), //
    NAME("client", "name", true), //
    NAME$DESC("client", "name", false), //
    NAME$CASEINSENSITIVE("client", "lower(name)", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("client", "lower(name), name", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("client", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE("client", "lower(name)", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("client", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("client", "lower(name), name", true), //
    PROP_NAME("client", "prop_name", true), //
    PROP_NAME$DESC("client", "prop_name", false), //
    PROP_NAME$CASEINSENSITIVE("client", "lower(prop_name)", true), //
    PROP_NAME$CASEINSENSITIVE_STABLE_FORWARD("client", "lower(prop_name), prop_name", true), //
    PROP_NAME$CASEINSENSITIVE_STABLE_REVERSE("client", "lower(prop_name), prop_name", false), //
    PROP_NAME$DESC_CASEINSENSITIVE("client", "lower(prop_name)", false), //
    PROP_NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("client", "lower(prop_name), prop_name", false), //
    PROP_NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("client", "lower(prop_name), prop_name", true), //
    REFERRER_ID("client", "referrer_id", true), //
    REFERRER_ID$DESC("client", "referrer_id", false), //
    FRIEND_ID("client", "friend_id", true), //
    FRIEND_ID$DESC("client", "friend_id", false), //
    GROUP_ACCOUNT_ID("client", "group_account_id", true), //
    GROUP_ACCOUNT_ID$DESC("client", "group_account_id", false), //
    BRANCH_ID("client", "branch_id", true), //
    BRANCH_ID$DESC("client", "branch_id", false);

    private ClientOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static ClientTable newTable() {
    return new ClientTable();
  }

  public static ClientTable newTable(final String alias) {
    return new ClientTable(alias);
  }

  public static class ClientTable extends Table {

    // Properties

    public NumberColumn id;
    public NumberColumn nationalId;
    public StringColumn name;
    public StringColumn propName;
    public NumberColumn referrerId;
    public NumberColumn friendId;
    public NumberColumn groupAccountId;
    public NumberColumn branchId;

    // Constructors

    ClientTable() {
      super(null, null, "client", "Table", null);
      initialize();
    }

    ClientTable(final String alias) {
      super(null, null, "client", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id");
      this.nationalId = new NumberColumn(this, "national_id", "nationalId");
      this.name = new StringColumn(this, "name", "name");
      this.propName = new StringColumn(this, "prop_name", "propName");
      this.referrerId = new NumberColumn(this, "referrer_id", "referrerId");
      this.friendId = new NumberColumn(this, "friend_id", "friendId");
      this.groupAccountId = new NumberColumn(this, "group_account_id", "groupAccountId");
      this.branchId = new NumberColumn(this, "branch_id", "branchId");
    }

  }

}
