// Autogenerated by HotRod -- Do not edit.

package com.company.cli.maven_test.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;
import org.hotrod.runtime.interfaces.Selectable;

import com.company.cli.maven_test.daos.LowAccountVO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component("lowAccountDAO")
public class LowAccountDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Value("#{sqlDialectFactory.sqlDialect}")
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by example

  public List<com.company.cli.maven_test.daos.LowAccountVO> selectByExample(final com.company.cli.maven_test.daos.LowAccountVO example, final LowAccountOrderBy... orderBies)
      {
    DaoWithOrder<com.company.cli.maven_test.daos.LowAccountVO, LowAccountOrderBy> dwo = //
        new DaoWithOrder<com.company.cli.maven_test.daos.LowAccountVO, LowAccountOrderBy>(example, orderBies);
    return this.sqlSession.selectList("com.company.cli.maven_test.daos.primitives.lowAccount.selectByExample", dwo);
  }

  // select by criteria

  public CriteriaWherePhase<com.company.cli.maven_test.daos.LowAccountVO> selectByCriteria(final LowAccountDAO.LowAccountView from,
      final Predicate predicate) {
    return new CriteriaWherePhase<com.company.cli.maven_test.daos.LowAccountVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "com.company.cli.maven_test.daos.primitives.lowAccount.selectByCriteria");
  }

  // insert by example

  public int insertByExample(final com.company.cli.maven_test.daos.LowAccountVO example) {
    return sqlSession.insert("com.company.cli.maven_test.daos.primitives.lowAccount.insertByExample", example);
  }

  // update by example

  public int updateByExample(final com.company.cli.maven_test.daos.LowAccountVO example, final com.company.cli.maven_test.daos.LowAccountVO updateValues) {
    UpdateByExampleDao<com.company.cli.maven_test.daos.LowAccountVO> fvd = //
      new UpdateByExampleDao<com.company.cli.maven_test.daos.LowAccountVO>(example, updateValues);
    return this.sqlSession.update("com.company.cli.maven_test.daos.primitives.lowAccount.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final com.company.cli.maven_test.daos.LowAccountVO example) {
    return this.sqlSession.delete("com.company.cli.maven_test.daos.primitives.lowAccount.deleteByExample", example);
  }

  // DAO ordering

  public enum LowAccountOrderBy implements OrderBy {

    ID("schema2.low_account", "id", true), //
    ID$DESC("schema2.low_account", "id", false), //
    NAME("schema2.low_account", "name", true), //
    NAME$DESC("schema2.low_account", "name", false), //
    NAME$CASEINSENSITIVE("schema2.low_account", "lower(name)", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("schema2.low_account", "lower(name), name", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("schema2.low_account", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE("schema2.low_account", "lower(name)", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("schema2.low_account", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("schema2.low_account", "lower(name), name", true), //
    TYPE("schema2.low_account", "type", true), //
    TYPE$DESC("schema2.low_account", "type", false), //
    TYPE$CASEINSENSITIVE("schema2.low_account", "lower(type)", true), //
    TYPE$CASEINSENSITIVE_STABLE_FORWARD("schema2.low_account", "lower(type), type", true), //
    TYPE$CASEINSENSITIVE_STABLE_REVERSE("schema2.low_account", "lower(type), type", false), //
    TYPE$DESC_CASEINSENSITIVE("schema2.low_account", "lower(type)", false), //
    TYPE$DESC_CASEINSENSITIVE_STABLE_FORWARD("schema2.low_account", "lower(type), type", false), //
    TYPE$DESC_CASEINSENSITIVE_STABLE_REVERSE("schema2.low_account", "lower(type), type", true), //
    CURRENT_BALANCE("schema2.low_account", "current_balance", true), //
    CURRENT_BALANCE$DESC("schema2.low_account", "current_balance", false), //
    CREATED_ON("schema2.low_account", "created_on", true), //
    CREATED_ON$DESC("schema2.low_account", "created_on", false), //
    ACTIVE("schema2.low_account", "active", true), //
    ACTIVE$DESC("schema2.low_account", "active", false);

    private LowAccountOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database View metadata

  public static LowAccountView newView() {
    return new LowAccountView();
  }

  public static LowAccountView newView(final String alias) {
    return new LowAccountView(alias);
  }

  public static class LowAccountView extends View {

    // Properties

    public NumberColumn id;
    public StringColumn name;
    public StringColumn type;
    public NumberColumn currentBalance;
    public DateTimeColumn createdOn;
    public NumberColumn active;

    // Constructors

    LowAccountView() {
      super(null, "schema2", "low_account", "View", null);
      initialize();
    }

    LowAccountView(final String alias) {
      super(null, "schema2", "low_account", "View", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id");
      this.name = new StringColumn(this, "name", "name");
      this.type = new StringColumn(this, "type", "type");
      this.currentBalance = new NumberColumn(this, "current_balance", "currentBalance");
      this.createdOn = new DateTimeColumn(this, "created_on", "createdOn");
      this.active = new NumberColumn(this, "active", "active");
    }

  }

}
