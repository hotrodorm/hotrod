// Autogenerated by HotRod -- Do not edit.

package com.company.cli.maven_test.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import com.company.cli.maven_test.daos.QuadrantVO;
import com.company.cli.maven_test.daos.CodesVO;
import com.company.cli.maven_test.daos.primitives.CodesDAO.CodesOrderBy;
import com.company.cli.maven_test.daos.primitives.CodesDAO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component("quadrantDAO")
public class QuadrantDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Value("#{sqlDialectFactory.sqlDialect}")
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public com.company.cli.maven_test.daos.QuadrantVO selectByPK(final java.lang.Integer region, final java.lang.Integer area) {
    if (region == null)
      return null;
    if (area == null)
      return null;
    com.company.cli.maven_test.daos.QuadrantVO vo = new com.company.cli.maven_test.daos.QuadrantVO();
    vo.setRegion(region);
    vo.setArea(area);
    return this.sqlSession.selectOne("com.company.cli.maven_test.daos.primitives.quadrant.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<com.company.cli.maven_test.daos.QuadrantVO> selectByExample(final com.company.cli.maven_test.daos.QuadrantVO example, final QuadrantOrderBy... orderBies)
      {
    DaoWithOrder<com.company.cli.maven_test.daos.QuadrantVO, QuadrantOrderBy> dwo = //
        new DaoWithOrder<com.company.cli.maven_test.daos.QuadrantVO, QuadrantOrderBy>(example, orderBies);
    return this.sqlSession.selectList("com.company.cli.maven_test.daos.primitives.quadrant.selectByExample", dwo);
  }

  // select by criteria

  public CriteriaWherePhase<com.company.cli.maven_test.daos.QuadrantVO> selectByCriteria(final QuadrantDAO.QuadrantTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<com.company.cli.maven_test.daos.QuadrantVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "com.company.cli.maven_test.daos.primitives.quadrant.selectByCriteria");
  }

  // insert

  public int insert(final com.company.cli.maven_test.daos.QuadrantVO vo) {
    String id = "com.company.cli.maven_test.daos.primitives.quadrant.insert";
    return this.sqlSession.insert(id, vo);
  }

  // update by PK

  public int update(final com.company.cli.maven_test.daos.QuadrantVO vo) {
    if (vo.region == null) return 0;
    if (vo.area == null) return 0;
    return this.sqlSession.update("com.company.cli.maven_test.daos.primitives.quadrant.updateByPK", vo);
  }

  // delete by PK

  public int delete(final com.company.cli.maven_test.daos.QuadrantVO vo) {
    if (vo.region == null) return 0;
    if (vo.area == null) return 0;
    return this.sqlSession.delete("com.company.cli.maven_test.daos.primitives.quadrant.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final com.company.cli.maven_test.daos.QuadrantVO example, final com.company.cli.maven_test.daos.QuadrantVO updateValues) {
    UpdateByExampleDao<com.company.cli.maven_test.daos.QuadrantVO> fvd = //
      new UpdateByExampleDao<com.company.cli.maven_test.daos.QuadrantVO>(example, updateValues);
    return this.sqlSession.update("com.company.cli.maven_test.daos.primitives.quadrant.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final com.company.cli.maven_test.daos.QuadrantVO example) {
    return this.sqlSession.delete("com.company.cli.maven_test.daos.primitives.quadrant.deleteByExample", example);
  }

  // DAO ordering

  public enum QuadrantOrderBy implements OrderBy {

    REGION("quadrant", "region", true), //
    REGION$DESC("quadrant", "region", false), //
    AREA("quadrant", "area", true), //
    AREA$DESC("quadrant", "area", false), //
    CAPTION("quadrant", "caption", true), //
    CAPTION$DESC("quadrant", "caption", false), //
    CAPTION$CASEINSENSITIVE("quadrant", "lower(caption)", true), //
    CAPTION$CASEINSENSITIVE_STABLE_FORWARD("quadrant", "lower(caption), caption", true), //
    CAPTION$CASEINSENSITIVE_STABLE_REVERSE("quadrant", "lower(caption), caption", false), //
    CAPTION$DESC_CASEINSENSITIVE("quadrant", "lower(caption)", false), //
    CAPTION$DESC_CASEINSENSITIVE_STABLE_FORWARD("quadrant", "lower(caption), caption", false), //
    CAPTION$DESC_CASEINSENSITIVE_STABLE_REVERSE("quadrant", "lower(caption), caption", true);

    private QuadrantOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static QuadrantTable newTable() {
    return new QuadrantTable();
  }

  public static QuadrantTable newTable(final String alias) {
    return new QuadrantTable(alias);
  }

  public static class QuadrantTable extends Table {

    // Properties

    public NumberColumn region;
    public NumberColumn area;
    public StringColumn caption;

    // Constructors

    QuadrantTable() {
      super(null, null, "quadrant", "Table", null);
      initialize();
    }

    QuadrantTable(final String alias) {
      super(null, null, "quadrant", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.region = new NumberColumn(this, "region", "region");
      this.area = new NumberColumn(this, "area", "area");
      this.caption = new StringColumn(this, "caption", "caption");
    }

  }

}
