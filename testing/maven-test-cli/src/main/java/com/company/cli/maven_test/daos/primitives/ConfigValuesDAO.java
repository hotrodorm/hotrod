// Autogenerated by HotRod -- Do not edit.

package com.company.cli.maven_test.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import com.company.cli.maven_test.daos.ConfigValuesVO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component("configValuesDAO")
public class ConfigValuesDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Value("#{sqlDialectFactory.sqlDialect}")
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes

  public com.company.cli.maven_test.daos.ConfigValuesVO  selectByUIName(final java.lang.String name) {
    if (name == null)
      return null;
    com.company.cli.maven_test.daos.ConfigValuesVO vo = new com.company.cli.maven_test.daos.ConfigValuesVO();
    vo.setName(name);
    return this.sqlSession.selectOne("com.company.cli.maven_test.daos.primitives.configValues.selectByUIName", vo);
  }

  public com.company.cli.maven_test.daos.ConfigValuesVO  selectByUINodeCell(final java.lang.Integer node, final java.lang.Integer cell) {
    if (node == null)
      return null;
    if (cell == null)
      return null;
    com.company.cli.maven_test.daos.ConfigValuesVO vo = new com.company.cli.maven_test.daos.ConfigValuesVO();
    vo.setNode(node);
    vo.setCell(cell);
    return this.sqlSession.selectOne("com.company.cli.maven_test.daos.primitives.configValues.selectByUINodeCell", vo);
  }

  // select by example

  public List<com.company.cli.maven_test.daos.ConfigValuesVO> selectByExample(final com.company.cli.maven_test.daos.ConfigValuesVO example, final ConfigValuesOrderBy... orderBies)
      {
    DaoWithOrder<com.company.cli.maven_test.daos.ConfigValuesVO, ConfigValuesOrderBy> dwo = //
        new DaoWithOrder<com.company.cli.maven_test.daos.ConfigValuesVO, ConfigValuesOrderBy>(example, orderBies);
    return this.sqlSession.selectList("com.company.cli.maven_test.daos.primitives.configValues.selectByExample", dwo);
  }

  // select by criteria

  public CriteriaWherePhase<com.company.cli.maven_test.daos.ConfigValuesVO> selectByCriteria(final ConfigValuesDAO.ConfigValuesTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<com.company.cli.maven_test.daos.ConfigValuesVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "com.company.cli.maven_test.daos.primitives.configValues.selectByCriteria");
  }

  // insert

  public int insert(final com.company.cli.maven_test.daos.ConfigValuesVO vo) {
    String id = "com.company.cli.maven_test.daos.primitives.configValues.insert";
    return this.sqlSession.insert(id, vo);
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int updateByExample(final com.company.cli.maven_test.daos.ConfigValuesVO example, final com.company.cli.maven_test.daos.ConfigValuesVO updateValues) {
    UpdateByExampleDao<com.company.cli.maven_test.daos.ConfigValuesVO> fvd = //
      new UpdateByExampleDao<com.company.cli.maven_test.daos.ConfigValuesVO>(example, updateValues);
    return this.sqlSession.update("com.company.cli.maven_test.daos.primitives.configValues.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final com.company.cli.maven_test.daos.ConfigValuesVO example) {
    return this.sqlSession.delete("com.company.cli.maven_test.daos.primitives.configValues.deleteByExample", example);
  }

  // DAO ordering

  public enum ConfigValuesOrderBy implements OrderBy {

    NODE("config_values", "node", true), //
    NODE$DESC("config_values", "node", false), //
    CELL("config_values", "cell", true), //
    CELL$DESC("config_values", "cell", false), //
    NAME("config_values", "name", true), //
    NAME$DESC("config_values", "name", false), //
    NAME$CASEINSENSITIVE("config_values", "lower(name)", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("config_values", "lower(name), name", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("config_values", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE("config_values", "lower(name)", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("config_values", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("config_values", "lower(name), name", true), //
    VERBATIM("config_values", "verbatim", true), //
    VERBATIM$DESC("config_values", "verbatim", false), //
    VERBATIM$CASEINSENSITIVE("config_values", "lower(verbatim)", true), //
    VERBATIM$CASEINSENSITIVE_STABLE_FORWARD("config_values", "lower(verbatim), verbatim", true), //
    VERBATIM$CASEINSENSITIVE_STABLE_REVERSE("config_values", "lower(verbatim), verbatim", false), //
    VERBATIM$DESC_CASEINSENSITIVE("config_values", "lower(verbatim)", false), //
    VERBATIM$DESC_CASEINSENSITIVE_STABLE_FORWARD("config_values", "lower(verbatim), verbatim", false), //
    VERBATIM$DESC_CASEINSENSITIVE_STABLE_REVERSE("config_values", "lower(verbatim), verbatim", true);

    private ConfigValuesOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static ConfigValuesTable newTable() {
    return new ConfigValuesTable();
  }

  public static ConfigValuesTable newTable(final String alias) {
    return new ConfigValuesTable(alias);
  }

  public static class ConfigValuesTable extends Table {

    // Properties

    public NumberColumn node;
    public NumberColumn cell;
    public StringColumn name;
    public StringColumn verbatim;

    // Constructors

    ConfigValuesTable() {
      super(null, null, "config_values", "Table", null);
      initialize();
    }

    ConfigValuesTable(final String alias) {
      super(null, null, "config_values", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.node = new NumberColumn(this, "node", "node");
      this.cell = new NumberColumn(this, "cell", "cell");
      this.name = new StringColumn(this, "name", "name");
      this.verbatim = new StringColumn(this, "verbatim", "verbatim");
    }

  }

}
