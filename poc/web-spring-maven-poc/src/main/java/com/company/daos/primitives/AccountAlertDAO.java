// Autogenerated by HotRod -- Do not edit.

package com.company.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import com.company.daos.AccountAlertVO;
import com.company.daos.AccountVO;
import com.company.daos.primitives.AccountDAO;
import com.company.daos.HouseVO;
import com.company.daos.primitives.HouseDAO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component("accountAlertDAO")
public class AccountAlertDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Value("#{sqlDialectFactory.sqlDialect}")
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<com.company.daos.AccountAlertVO> selectByExample(final com.company.daos.AccountAlertVO example, final AccountAlertOrderBy... orderBies)
      {
    DaoWithOrder<com.company.daos.AccountAlertVO, AccountAlertOrderBy> dwo = //
        new DaoWithOrder<com.company.daos.AccountAlertVO, AccountAlertOrderBy>(example, orderBies);
    return this.sqlSession.selectList("com.company.daos.primitives.accountAlert.selectByExample", dwo);
  }

  // select by criteria

  public CriteriaWherePhase<com.company.daos.AccountAlertVO> selectByCriteria(final AccountAlertDAO.AccountAlertTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<com.company.daos.AccountAlertVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "com.company.daos.primitives.accountAlert.selectByCriteria");
  }

  // insert

  public int insert(final com.company.daos.AccountAlertVO vo) {
    String id = "com.company.daos.primitives.accountAlert.insert";
    return this.sqlSession.insert(id, vo);
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int updateByExample(final com.company.daos.AccountAlertVO example, final com.company.daos.AccountAlertVO updateValues) {
    UpdateByExampleDao<com.company.daos.AccountAlertVO> fvd = //
      new UpdateByExampleDao<com.company.daos.AccountAlertVO>(example, updateValues);
    return this.sqlSession.update("com.company.daos.primitives.accountAlert.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final com.company.daos.AccountAlertVO example) {
    return this.sqlSession.delete("com.company.daos.primitives.accountAlert.deleteByExample", example);
  }

  // DAO ordering

  public enum AccountAlertOrderBy implements OrderBy {

    RAISED_AT("schema2.account_alert", "raised_at", true), //
    RAISED_AT$DESC("schema2.account_alert", "raised_at", false), //
    ACCOUNT_ID("schema2.account_alert", "account_id", true), //
    ACCOUNT_ID$DESC("schema2.account_alert", "account_id", false), //
    HOUSE_ID("schema2.account_alert", "house_id", true), //
    HOUSE_ID$DESC("schema2.account_alert", "house_id", false);

    private AccountAlertOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static AccountAlertTable newTable() {
    return new AccountAlertTable();
  }

  public static AccountAlertTable newTable(final String alias) {
    return new AccountAlertTable(alias);
  }

  public static class AccountAlertTable extends Table {

    // Properties

    public DateTimeColumn raisedAt;
    public NumberColumn accountId;
    public NumberColumn houseId;

    // Constructors

    AccountAlertTable() {
      super(null, "schema2", "account_alert", "Table", null);
      initialize();
    }

    AccountAlertTable(final String alias) {
      super(null, "schema2", "account_alert", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.raisedAt = new DateTimeColumn(this, "raised_at", "raisedAt");
      this.accountId = new NumberColumn(this, "account_id", "accountId");
      this.houseId = new NumberColumn(this, "house_id", "houseId");
    }

  }

}
