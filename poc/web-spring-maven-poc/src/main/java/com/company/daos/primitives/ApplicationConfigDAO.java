// Autogenerated by HotRod -- Do not edit.

package com.company.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import com.company.daos.ApplicationConfigVO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component("applicationConfigDAO")
public class ApplicationConfigDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Value("#{sqlDialectFactory.sqlDialect}")
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<com.company.daos.ApplicationConfigVO> selectByExample(final com.company.daos.ApplicationConfigVO example, final ApplicationConfigOrderBy... orderBies)
      {
    DaoWithOrder<com.company.daos.ApplicationConfigVO, ApplicationConfigOrderBy> dwo = //
        new DaoWithOrder<com.company.daos.ApplicationConfigVO, ApplicationConfigOrderBy>(example, orderBies);
    return this.sqlSession.selectList("com.company.daos.primitives.applicationConfig.selectByExample", dwo);
  }

  // select by criteria

  public CriteriaWherePhase<com.company.daos.ApplicationConfigVO> selectByCriteria(final ApplicationConfigDAO.ApplicationConfigTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<com.company.daos.ApplicationConfigVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "com.company.daos.primitives.applicationConfig.selectByCriteria");
  }

  // insert

  public int insert(final com.company.daos.ApplicationConfigVO vo) {
    String id = "com.company.daos.primitives.applicationConfig.insert";
    return this.sqlSession.insert(id, vo);
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int updateByExample(final com.company.daos.ApplicationConfigVO example, final com.company.daos.ApplicationConfigVO updateValues) {
    UpdateByExampleDao<com.company.daos.ApplicationConfigVO> fvd = //
      new UpdateByExampleDao<com.company.daos.ApplicationConfigVO>(example, updateValues);
    return this.sqlSession.update("com.company.daos.primitives.applicationConfig.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final com.company.daos.ApplicationConfigVO example) {
    return this.sqlSession.delete("com.company.daos.primitives.applicationConfig.deleteByExample", example);
  }

  // DAO ordering

  public enum ApplicationConfigOrderBy implements OrderBy {

    CONFIG_ID("application_config", "config_id", true), //
    CONFIG_ID$DESC("application_config", "config_id", false), //
    CONFIG_NAME("application_config", "config_name", true), //
    CONFIG_NAME$DESC("application_config", "config_name", false), //
    CONFIG_NAME$CASEINSENSITIVE("application_config", "lower(config_name)", true), //
    CONFIG_NAME$CASEINSENSITIVE_STABLE_FORWARD("application_config", "lower(config_name), config_name", true), //
    CONFIG_NAME$CASEINSENSITIVE_STABLE_REVERSE("application_config", "lower(config_name), config_name", false), //
    CONFIG_NAME$DESC_CASEINSENSITIVE("application_config", "lower(config_name)", false), //
    CONFIG_NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("application_config", "lower(config_name), config_name", false), //
    CONFIG_NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("application_config", "lower(config_name), config_name", true), //
    CONFIG_VALUE("application_config", "config_value", true), //
    CONFIG_VALUE$DESC("application_config", "config_value", false), //
    CONFIG_VALUE$CASEINSENSITIVE("application_config", "lower(config_value)", true), //
    CONFIG_VALUE$CASEINSENSITIVE_STABLE_FORWARD("application_config", "lower(config_value), config_value", true), //
    CONFIG_VALUE$CASEINSENSITIVE_STABLE_REVERSE("application_config", "lower(config_value), config_value", false), //
    CONFIG_VALUE$DESC_CASEINSENSITIVE("application_config", "lower(config_value)", false), //
    CONFIG_VALUE$DESC_CASEINSENSITIVE_STABLE_FORWARD("application_config", "lower(config_value), config_value", false), //
    CONFIG_VALUE$DESC_CASEINSENSITIVE_STABLE_REVERSE("application_config", "lower(config_value), config_value", true);

    private ApplicationConfigOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static ApplicationConfigTable newTable() {
    return new ApplicationConfigTable();
  }

  public static ApplicationConfigTable newTable(final String alias) {
    return new ApplicationConfigTable(alias);
  }

  public static class ApplicationConfigTable extends Table {

    // Properties

    public NumberColumn configId;
    public StringColumn configName;
    public StringColumn configValue;

    // Constructors

    ApplicationConfigTable() {
      super(null, null, "application_config", "Table", null);
      initialize();
    }

    ApplicationConfigTable(final String alias) {
      super(null, null, "application_config", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.configId = new NumberColumn(this, "config_id", "configId");
      this.configName = new StringColumn(this, "config_name", "configName");
      this.configValue = new StringColumn(this, "config_value", "configValue");
    }

  }

}
