// Autogenerated by HotRod -- Do not edit.

package com.myapp.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;
import org.hotrod.runtime.interfaces.Selectable;

import com.myapp.daos.OverdueTaskImpl;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class OverdueTaskDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by example

  public List<com.myapp.daos.OverdueTaskImpl> selectByExample(final com.myapp.daos.OverdueTaskImpl example, final OverdueTaskOrderBy... orderBies)
      {
    DaoWithOrder<com.myapp.daos.OverdueTaskImpl, OverdueTaskOrderBy> dwo = //
        new DaoWithOrder<com.myapp.daos.OverdueTaskImpl, OverdueTaskOrderBy>(example, orderBies);
    return this.sqlSession.selectList("com.myapp.daos.primitives.overdueTask.selectByExample", dwo);
  }

  public Cursor<com.myapp.daos.OverdueTaskImpl> selectByExampleCursor(final com.myapp.daos.OverdueTaskImpl example, final OverdueTaskOrderBy... orderBies)
      {
    DaoWithOrder<com.myapp.daos.OverdueTaskImpl, OverdueTaskOrderBy> dwo = //
        new DaoWithOrder<com.myapp.daos.OverdueTaskImpl, OverdueTaskOrderBy>(example, orderBies);
    return new MyBatisCursor<com.myapp.daos.OverdueTaskImpl>(this.sqlSession.selectCursor("com.myapp.daos.primitives.overdueTask.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<com.myapp.daos.OverdueTaskImpl> selectByCriteria(final OverdueTaskDAO.OverdueTaskView from,
      final Predicate predicate) {
    return new CriteriaWherePhase<com.myapp.daos.OverdueTaskImpl>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "com.myapp.daos.primitives.overdueTask.selectByCriteria");
  }

  // insert by example

  public int insertByExample(final com.myapp.daos.OverdueTaskImpl example) {
    return sqlSession.insert("com.myapp.daos.primitives.overdueTask.insertByExample", example);
  }

  // update by example

  public int updateByExample(final com.myapp.daos.OverdueTaskImpl example, final com.myapp.daos.OverdueTaskImpl updateValues) {
    UpdateByExampleDao<com.myapp.daos.OverdueTaskImpl> fvd = //
      new UpdateByExampleDao<com.myapp.daos.OverdueTaskImpl>(example, updateValues);
    return this.sqlSession.update("com.myapp.daos.primitives.overdueTask.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final com.myapp.daos.OverdueTaskImpl example) {
    return this.sqlSession.delete("com.myapp.daos.primitives.overdueTask.deleteByExample", example);
  }

  // DAO ordering

  public enum OverdueTaskOrderBy implements OrderBy {

    ID("exampledb.schema3.overdue_task", "id", true), //
    ID$DESC("exampledb.schema3.overdue_task", "id", false), //
    NAME("exampledb.schema3.overdue_task", "name", true), //
    NAME$DESC("exampledb.schema3.overdue_task", "name", false), //
    NAME$CASEINSENSITIVE("exampledb.schema3.overdue_task", "lower(name)", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("exampledb.schema3.overdue_task", "lower(name), name", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("exampledb.schema3.overdue_task", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE("exampledb.schema3.overdue_task", "lower(name)", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("exampledb.schema3.overdue_task", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("exampledb.schema3.overdue_task", "lower(name), name", true), //
    DUE("exampledb.schema3.overdue_task", "due", true), //
    DUE$DESC("exampledb.schema3.overdue_task", "due", false);

    private OverdueTaskOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database View metadata

  public static OverdueTaskView newView() {
    return new OverdueTaskView();
  }

  public static OverdueTaskView newView(final String alias) {
    return new OverdueTaskView(alias);
  }

  public static class OverdueTaskView extends View {

    // Properties

    public NumberColumn id;
    public StringColumn name;
    public DateTimeColumn due;

    // Constructors

    OverdueTaskView() {
      super("EXAMPLEDB", "SCHEMA3", "OVERDUE_TASK", "View", null);
      initialize();
    }

    OverdueTaskView(final String alias) {
      super("EXAMPLEDB", "SCHEMA3", "OVERDUE_TASK", "View", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "ID", "id");
      this.name = new StringColumn(this, "NAME", "name");
      this.due = new DateTimeColumn(this, "DUE", "due");
    }

  }

}
