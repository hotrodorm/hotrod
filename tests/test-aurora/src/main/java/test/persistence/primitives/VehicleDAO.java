// Autogenerated by HotRod -- Do not edit.

package test.persistence.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoForUpdate;
import org.hotrod.runtime.exceptions.StaleDataException;
import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import test.persistence.VehicleVO;
import test.persistence.primitives.VehicleType;

import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.TypeHandler;
import org.hotrod.runtime.converter.TypeConverter;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class VehicleDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public test.persistence.VehicleVO selectByPK(final java.lang.Integer id) {
    if (id == null)
      return null;
    test.persistence.VehicleVO vo = new test.persistence.VehicleVO();
    vo.setId(id);
    return this.sqlSession.selectOne("test.persistence.primitives.vehicle.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<test.persistence.VehicleVO> selectByExample(final test.persistence.VehicleVO example, final VehicleOrderBy... orderBies)
      {
    DaoWithOrder<test.persistence.VehicleVO, VehicleOrderBy> dwo = //
        new DaoWithOrder<test.persistence.VehicleVO, VehicleOrderBy>(example, orderBies);
    return this.sqlSession.selectList("test.persistence.primitives.vehicle.selectByExample", dwo);
  }

  public Cursor<test.persistence.VehicleVO> selectByExampleCursor(final test.persistence.VehicleVO example, final VehicleOrderBy... orderBies)
      {
    DaoWithOrder<test.persistence.VehicleVO, VehicleOrderBy> dwo = //
        new DaoWithOrder<test.persistence.VehicleVO, VehicleOrderBy>(example, orderBies);
    return new MyBatisCursor<test.persistence.VehicleVO>(this.sqlSession.selectCursor("test.persistence.primitives.vehicle.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<test.persistence.VehicleVO> selectByCriteria(final VehicleDAO.VehicleTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<test.persistence.VehicleVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "test.persistence.primitives.vehicle.selectByCriteria");
  }

  // select parent(s) by FKs

  // --- no select parent for FK column (vtype) since it points to the enum table vehicle_type

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public int insert(final test.persistence.VehicleVO vo) {
    return insert(vo, false);
  }

  public int insert(final test.persistence.VehicleVO vo, final boolean retrieveDefaults) {
    vo.versionNumber = (short) 4;
    String id = retrieveDefaults ? "test.persistence.primitives.vehicle.insertRetrievingDefaults" : "test.persistence.primitives.vehicle.insert";
    int rows = this.sqlSession.insert(id, vo);
    return rows;
  }

  // update by PK

  public int update(final test.persistence.VehicleVO vo) {
    long currentVersion = vo.versionNumber;
    DaoForUpdate<test.persistence.VehicleVO> u = new DaoForUpdate<test.persistence.VehicleVO>(vo, currentVersion, (short) -7, (short) 7);
    int rows = this.sqlSession.update("test.persistence.primitives.vehicle.updateByPK", u);
    if (rows != 1) {
      throw new StaleDataException("Could not update row on table vehicle with version " + currentVersion
          + " since it had already been updated by another process.");
    }
    vo.versionNumber = (short) u.getNextVersionValue();
    return rows;
  }

  // delete by PK

  public int delete(final test.persistence.VehicleVO vo) {
    int rows = this.sqlSession.delete("test.persistence.primitives.vehicle.deleteByPK", vo);
    if (rows != 1) {
      throw new StaleDataException("Could not delete row on table vehicle with version " + vo.versionNumber
          + " since it had already been updated or deleted by another process.");
    }
    return rows;
  }

  // update by example

  public int updateByExample(final test.persistence.VehicleVO example, final test.persistence.VehicleVO updateValues) {
    UpdateByExampleDao<test.persistence.VehicleVO> fvd = //
      new UpdateByExampleDao<test.persistence.VehicleVO>(example, updateValues);
    return this.sqlSession.update("test.persistence.primitives.vehicle.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final test.persistence.VehicleVO example) {
    return this.sqlSession.delete("test.persistence.primitives.vehicle.deleteByExample", example);
  }

  // TypeHandler for enum-FK column vtype.

  public static class VtypeTypeHandler implements TypeHandler<test.persistence.primitives.VehicleType> {

    @Override
    public test.persistence.primitives.VehicleType getResult(final ResultSet rs, final String columnName) throws SQLException {
      java.lang.Integer value = rs.getInt(columnName);
      if (rs.wasNull()) {
        value = null;
      }
      return test.persistence.primitives.VehicleType.decode(value);
    }

    @Override
    public test.persistence.primitives.VehicleType getResult(final ResultSet rs, final int columnIndex) throws SQLException {
      java.lang.Integer value = rs.getInt(columnIndex);
      if (rs.wasNull()) {
        value = null;
      }
      return test.persistence.primitives.VehicleType.decode(value);
    }

    @Override
    public test.persistence.primitives.VehicleType getResult(final CallableStatement cs, final int columnIndex) throws SQLException {
      java.lang.Integer value = cs.getInt(columnIndex);
      if (cs.wasNull()) {
        value = null;
      }
      return test.persistence.primitives.VehicleType.decode(value);
    }

    @Override
    public void setParameter(final PreparedStatement ps, final int columnIndex, final test.persistence.primitives.VehicleType v, final JdbcType jdbcType)
        throws SQLException {
      java.lang.Integer importedValue = test.persistence.primitives.VehicleType.encode(v);
      java.lang.Integer localValue = importedValue;
      if (localValue == null) {
        ps.setNull(columnIndex, jdbcType.TYPE_CODE);
      } else {
        ps.setInt(columnIndex, localValue);
      }
    }

  }

  // DAO ordering

  public enum VehicleOrderBy implements OrderBy {

    ID("vehicle", "id", true), //
    ID$DESC("vehicle", "id", false), //
    NAME("vehicle", "name", true), //
    NAME$DESC("vehicle", "name", false), //
    NAME$CASEINSENSITIVE("vehicle", "lower(name)", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("vehicle", "lower(name), name", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("vehicle", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE("vehicle", "lower(name)", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("vehicle", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("vehicle", "lower(name), name", true), //
    MILEAGE("vehicle", "mileage", true), //
    MILEAGE$DESC("vehicle", "mileage", false), //
    VERSION_NUMBER("vehicle", "version_number", true), //
    VERSION_NUMBER$DESC("vehicle", "version_number", false), //
    VTYPE("vehicle", "vtype", true), //
    VTYPE$DESC("vehicle", "vtype", false);

    private VehicleOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static VehicleTable newTable() {
    return new VehicleTable();
  }

  public static VehicleTable newTable(final String alias) {
    return new VehicleTable(alias);
  }

  public static class VehicleTable extends Table {

    // Properties

    public NumberColumn id;
    public StringColumn name;
    public NumberColumn mileage;
    public NumberColumn versionNumber;
    public ObjectColumn vtype;

    // Constructors

    VehicleTable() {
      super(null, null, "vehicle", "Table", null);
      initialize();
    }

    VehicleTable(final String alias) {
      super(null, null, "vehicle", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id");
      this.name = new StringColumn(this, "name", "name");
      this.mileage = new NumberColumn(this, "mileage", "mileage");
      this.versionNumber = new NumberColumn(this, "version_number", "versionNumber");
      this.vtype = new ObjectColumn(this, "vtype", "vtype");
    }

  }

}
