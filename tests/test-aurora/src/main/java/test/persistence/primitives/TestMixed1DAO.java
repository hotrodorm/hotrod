// Autogenerated by HotRod -- Do not edit.

package test.persistence.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import test.persistence.primitives.TestMixed1;
import test.persistence.TestMixed1VO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class TestMixed1DAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<test.persistence.TestMixed1VO> selectByExample(final test.persistence.primitives.TestMixed1 example, final TestMixed1OrderBy... orderBies)
      {
    DaoWithOrder<test.persistence.primitives.TestMixed1, TestMixed1OrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("test.persistence.primitives.testMixed1.selectByExample", dwo);
  }

  public Cursor<test.persistence.TestMixed1VO> selectByExampleCursor(final test.persistence.primitives.TestMixed1 example, final TestMixed1OrderBy... orderBies)
      {
    DaoWithOrder<test.persistence.primitives.TestMixed1, TestMixed1OrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<test.persistence.TestMixed1VO>(this.sqlSession.selectCursor("test.persistence.primitives.testMixed1.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<test.persistence.TestMixed1VO> selectByCriteria(final TestMixed1DAO.TestMixed1Table from,
      final Predicate predicate) {
    return new CriteriaWherePhase<test.persistence.TestMixed1VO>(from, this.sqlDialect, this.sqlSession,
        predicate, "test.persistence.primitives.testMixed1.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public test.persistence.TestMixed1VO insert(final test.persistence.primitives.TestMixed1 vo) {
    return insert(vo, false);
  }

  public test.persistence.TestMixed1VO insert(final test.persistence.primitives.TestMixed1 vo, final boolean retrieveDefaults) {
    String id = retrieveDefaults ? "test.persistence.primitives.testMixed1.insertRetrievingDefaults" : "test.persistence.primitives.testMixed1.insert";
    int rows = this.sqlSession.insert(id, vo);
    test.persistence.TestMixed1VO mo = new test.persistence.TestMixed1VO();
    mo.setId(vo.getId());
    mo.setName(vo.getName());
    mo.setExtraId1(vo.getExtraId1());
    mo.setExtraId2(vo.getExtraId2());
    return mo;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int updateByExample(final test.persistence.primitives.TestMixed1 example, final test.persistence.primitives.TestMixed1 updateValues) {
    UpdateByExampleDao<test.persistence.primitives.TestMixed1> fvd = //
      new UpdateByExampleDao<test.persistence.primitives.TestMixed1>(example, updateValues);
    return this.sqlSession.update("test.persistence.primitives.testMixed1.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final test.persistence.primitives.TestMixed1 example) {
    return this.sqlSession.delete("test.persistence.primitives.testMixed1.deleteByExample", example);
  }

  // DAO ordering

  public enum TestMixed1OrderBy implements OrderBy {

    ID("test_mixed1", "id", true), //
    ID$DESC("test_mixed1", "id", false), //
    NAME("test_mixed1", "name", true), //
    NAME$DESC("test_mixed1", "name", false), //
    NAME$CASEINSENSITIVE("test_mixed1", "lower(name)", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("test_mixed1", "lower(name), name", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("test_mixed1", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE("test_mixed1", "lower(name)", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("test_mixed1", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("test_mixed1", "lower(name), name", true), //
    EXTRA_ID1("test_mixed1", "extra_id1", true), //
    EXTRA_ID1$DESC("test_mixed1", "extra_id1", false), //
    EXTRA_ID2("test_mixed1", "extra_id2", true), //
    EXTRA_ID2$DESC("test_mixed1", "extra_id2", false);

    private TestMixed1OrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static TestMixed1Table newTable() {
    return new TestMixed1Table();
  }

  public static TestMixed1Table newTable(final String alias) {
    return new TestMixed1Table(alias);
  }

  public static class TestMixed1Table extends Table {

    // Properties

    public NumberColumn id;
    public StringColumn name;
    public NumberColumn extraId1;
    public NumberColumn extraId2;

    // Constructors

    TestMixed1Table() {
      super(null, null, "test_mixed1", "Table", null);
      initialize();
    }

    TestMixed1Table(final String alias) {
      super(null, null, "test_mixed1", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id");
      this.name = new StringColumn(this, "name", "name");
      this.extraId1 = new NumberColumn(this, "extra_id1", "extraId1");
      this.extraId2 = new NumberColumn(this, "extra_id2", "extraId2");
    }

  }

}
