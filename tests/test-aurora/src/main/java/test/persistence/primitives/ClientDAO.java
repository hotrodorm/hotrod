// Autogenerated by HotRod -- Do not edit.

package test.persistence.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import test.persistence.primitives.Client;
import test.persistence.ClientVO;
import test.persistence.FederalBranchVO;
import test.persistence.primitives.FederalBranchDAO;
import test.persistence.StateBranchVO;
import test.persistence.primitives.StateBranchDAO;
import test.persistence.primitives.ClientDAO;
import test.persistence.AccountVO;
import test.persistence.primitives.AccountDAO;
import test.persistence.PropertiesVO;
import test.persistence.primitives.PropertiesDAO;
import test.persistence.AgentVO;
import test.persistence.primitives.AgentDAO.AgentOrderBy;
import test.persistence.primitives.AgentDAO;
import test.persistence.primitives.ClientDAO.ClientOrderBy;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class ClientDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Lazy
  @Autowired
  private FederalBranchDAO federalBranchDAO;

  @Lazy
  @Autowired
  private AgentDAO agentDAO;

  @Lazy
  @Autowired
  private AccountDAO accountDAO;

  @Lazy
  @Autowired
  private PropertiesDAO propertiesDAO;

  @Lazy
  @Autowired
  private StateBranchDAO stateBranchDAO;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public test.persistence.ClientVO selectByPK(final java.lang.Integer id) {
    if (id == null)
      return null;
    test.persistence.ClientVO vo = new test.persistence.ClientVO();
    vo.setId(id);
    return this.sqlSession.selectOne("test.persistence.primitives.client.selectByPK", vo);
  }

  // select by unique indexes

  public test.persistence.ClientVO selectByUINationalId(final java.lang.Integer nationalId) {
    if (nationalId == null)
      return null;
    test.persistence.ClientVO vo = new test.persistence.ClientVO();
    vo.setNationalId(nationalId);
    return this.sqlSession.selectOne("test.persistence.primitives.client.selectByUINationalId", vo);
  }

  // select by example

  public List<test.persistence.ClientVO> selectByExample(final test.persistence.primitives.Client example, final ClientOrderBy... orderBies)
      {
    DaoWithOrder<test.persistence.primitives.Client, ClientOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("test.persistence.primitives.client.selectByExample", dwo);
  }

  public Cursor<test.persistence.ClientVO> selectByExampleCursor(final test.persistence.primitives.Client example, final ClientOrderBy... orderBies)
      {
    DaoWithOrder<test.persistence.primitives.Client, ClientOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<test.persistence.ClientVO>(this.sqlSession.selectCursor("test.persistence.primitives.client.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<test.persistence.ClientVO> selectByCriteria(final ClientDAO.ClientTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<test.persistence.ClientVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "test.persistence.primitives.client.selectByCriteria");
  }

  // select parent(s) by FKs

  public SelectParentFederalBranchPhase selectParentFederalBranchOf(final ClientVO vo) {
    return new SelectParentFederalBranchPhase(vo);
  }

  public class SelectParentFederalBranchPhase {

    private ClientVO vo;

    SelectParentFederalBranchPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public SelectParentFederalBranchFromBranchIdPhase fromBranchId() {
      return new SelectParentFederalBranchFromBranchIdPhase(this.vo);
    }

  }

  public class SelectParentFederalBranchFromBranchIdPhase {

    private ClientVO vo;

    SelectParentFederalBranchFromBranchIdPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public FederalBranchVO toId() {
      return federalBranchDAO.selectByPK(this.vo.branchId);
    }

  }

  public SelectParentStateBranchPhase selectParentStateBranchOf(final ClientVO vo) {
    return new SelectParentStateBranchPhase(vo);
  }

  public class SelectParentStateBranchPhase {

    private ClientVO vo;

    SelectParentStateBranchPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public SelectParentStateBranchFromBranchIdPhase fromBranchId() {
      return new SelectParentStateBranchFromBranchIdPhase(this.vo);
    }

  }

  public class SelectParentStateBranchFromBranchIdPhase {

    private ClientVO vo;

    SelectParentStateBranchFromBranchIdPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public StateBranchVO toId() {
      return stateBranchDAO.selectByPK(this.vo.branchId);
    }

  }

  public SelectParentAccountPhase selectParentAccountOf(final ClientVO vo) {
    return new SelectParentAccountPhase(vo);
  }

  public class SelectParentAccountPhase {

    private ClientVO vo;

    SelectParentAccountPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public SelectParentAccountFromGroupAccountIdPhase fromGroupAccountId() {
      return new SelectParentAccountFromGroupAccountIdPhase(this.vo);
    }

  }

  public class SelectParentAccountFromGroupAccountIdPhase {

    private ClientVO vo;

    SelectParentAccountFromGroupAccountIdPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public AccountVO toId() {
      return accountDAO.selectByPK(this.vo.groupAccountId);
    }

  }

  public SelectParentClientPhase selectParentClientOf(final ClientVO vo) {
    return new SelectParentClientPhase(vo);
  }

  public class SelectParentClientPhase {

    private ClientVO vo;

    SelectParentClientPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public SelectParentClientFromReferrerIdPhase fromReferrerId() {
      return new SelectParentClientFromReferrerIdPhase(this.vo);
    }

    public SelectParentClientFromFriendIdPhase fromFriendId() {
      return new SelectParentClientFromFriendIdPhase(this.vo);
    }

  }

  public class SelectParentClientFromReferrerIdPhase {

    private ClientVO vo;

    SelectParentClientFromReferrerIdPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public ClientVO toId() {
      return selectByPK(this.vo.referrerId);
    }

  }

  public class SelectParentClientFromFriendIdPhase {

    private ClientVO vo;

    SelectParentClientFromFriendIdPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public ClientVO toNationalId() {
      return selectByUINationalId(this.vo.friendId);
    }

  }

  public SelectParentPropertiesPhase selectParentPropertiesOf(final ClientVO vo) {
    return new SelectParentPropertiesPhase(vo);
  }

  public class SelectParentPropertiesPhase {

    private ClientVO vo;

    SelectParentPropertiesPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public SelectParentPropertiesFromPropNamePhase fromPropName() {
      return new SelectParentPropertiesFromPropNamePhase(this.vo);
    }

  }

  public class SelectParentPropertiesFromPropNamePhase {

    private ClientVO vo;

    SelectParentPropertiesFromPropNamePhase(final ClientVO vo) {
      this.vo = vo;
    }

    public PropertiesVO toName() {
      return propertiesDAO.selectByUIName(this.vo.propName);
    }

  }

  // select children by FKs

  public SelectChildrenAgentPhase selectChildrenAgentOf(final ClientVO vo) {
    return new SelectChildrenAgentPhase(vo);
  }

  public class SelectChildrenAgentPhase {

    private ClientVO vo;

    SelectChildrenAgentPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public SelectChildrenAgentFromIdPhase fromId() {
      return new SelectChildrenAgentFromIdPhase(this.vo);
    }

  }

  public class SelectChildrenAgentFromIdPhase {

    private ClientVO vo;

    SelectChildrenAgentFromIdPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public List<AgentVO> toClientId(final AgentOrderBy... orderBies) {
      AgentVO example = new AgentVO();
      example.setClientId((this.vo.getId() == null) ? null : Long.valueOf(this.vo.getId().longValue()));
      return agentDAO.selectByExample(example, orderBies);
    }

    public Cursor<AgentVO> cursorToClientId(final AgentOrderBy... orderBies) {
      AgentVO example = new AgentVO();
      example.setClientId((this.vo.getId() == null) ? null : Long.valueOf(this.vo.getId().longValue()));
      return agentDAO.selectByExampleCursor(example, orderBies);
    }

  }

  public SelectChildrenClientPhase selectChildrenClientOf(final ClientVO vo) {
    return new SelectChildrenClientPhase(vo);
  }

  public class SelectChildrenClientPhase {

    private ClientVO vo;

    SelectChildrenClientPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public SelectChildrenClientFromNationalIdPhase fromNationalId() {
      return new SelectChildrenClientFromNationalIdPhase(this.vo);
    }

    public SelectChildrenClientFromIdPhase fromId() {
      return new SelectChildrenClientFromIdPhase(this.vo);
    }

  }

  public class SelectChildrenClientFromNationalIdPhase {

    private ClientVO vo;

    SelectChildrenClientFromNationalIdPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public List<ClientVO> toFriendId(final ClientOrderBy... orderBies) {
      ClientVO example = new ClientVO();
      example.setFriendId(this.vo.getNationalId());
      return selectByExample(example, orderBies);
    }

    public Cursor<ClientVO> cursorToFriendId(final ClientOrderBy... orderBies) {
      ClientVO example = new ClientVO();
      example.setFriendId(this.vo.getNationalId());
      return selectByExampleCursor(example, orderBies);
    }

  }

  public class SelectChildrenClientFromIdPhase {

    private ClientVO vo;

    SelectChildrenClientFromIdPhase(final ClientVO vo) {
      this.vo = vo;
    }

    public List<ClientVO> toReferrerId(final ClientOrderBy... orderBies) {
      ClientVO example = new ClientVO();
      example.setReferrerId(this.vo.getId());
      return selectByExample(example, orderBies);
    }

    public Cursor<ClientVO> cursorToReferrerId(final ClientOrderBy... orderBies) {
      ClientVO example = new ClientVO();
      example.setReferrerId(this.vo.getId());
      return selectByExampleCursor(example, orderBies);
    }

  }

  // insert

  public test.persistence.ClientVO insert(final test.persistence.primitives.Client vo) {
    String id = "test.persistence.primitives.client.insert";
    this.sqlSession.insert(id, vo);
    test.persistence.ClientVO mo = new test.persistence.ClientVO();
    mo.setId(vo.getId());
    mo.setNationalId(vo.getNationalId());
    mo.setName(vo.getName());
    mo.setPropName(vo.getPropName());
    mo.setReferrerId(vo.getReferrerId());
    mo.setFriendId(vo.getFriendId());
    mo.setGroupAccountId(vo.getGroupAccountId());
    mo.setBranchId(vo.getBranchId());
    return mo;
  }

  // update by PK

  public int update(final test.persistence.ClientVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("test.persistence.primitives.client.updateByPK", vo);
  }

  // delete by PK

  public int delete(final test.persistence.ClientVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.delete("test.persistence.primitives.client.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final test.persistence.primitives.Client example, final test.persistence.primitives.Client updateValues) {
    UpdateByExampleDao<test.persistence.primitives.Client> fvd = //
      new UpdateByExampleDao<test.persistence.primitives.Client>(example, updateValues);
    return this.sqlSession.update("test.persistence.primitives.client.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final test.persistence.primitives.Client example) {
    return this.sqlSession.delete("test.persistence.primitives.client.deleteByExample", example);
  }

  // DAO ordering

  public enum ClientOrderBy implements OrderBy {

    ID("client", "id", true), //
    ID$DESC("client", "id", false), //
    NATIONAL_ID("client", "national_id", true), //
    NATIONAL_ID$DESC("client", "national_id", false), //
    NAME("client", "name", true), //
    NAME$DESC("client", "name", false), //
    NAME$CASEINSENSITIVE("client", "lower(name)", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("client", "lower(name), name", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("client", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE("client", "lower(name)", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("client", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("client", "lower(name), name", true), //
    PROP_NAME("client", "prop_name", true), //
    PROP_NAME$DESC("client", "prop_name", false), //
    PROP_NAME$CASEINSENSITIVE("client", "lower(prop_name)", true), //
    PROP_NAME$CASEINSENSITIVE_STABLE_FORWARD("client", "lower(prop_name), prop_name", true), //
    PROP_NAME$CASEINSENSITIVE_STABLE_REVERSE("client", "lower(prop_name), prop_name", false), //
    PROP_NAME$DESC_CASEINSENSITIVE("client", "lower(prop_name)", false), //
    PROP_NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("client", "lower(prop_name), prop_name", false), //
    PROP_NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("client", "lower(prop_name), prop_name", true), //
    REFERRER_ID("client", "referrer_id", true), //
    REFERRER_ID$DESC("client", "referrer_id", false), //
    FRIEND_ID("client", "friend_id", true), //
    FRIEND_ID$DESC("client", "friend_id", false), //
    GROUP_ACCOUNT_ID("client", "group_account_id", true), //
    GROUP_ACCOUNT_ID$DESC("client", "group_account_id", false), //
    BRANCH_ID("client", "branch_id", true), //
    BRANCH_ID$DESC("client", "branch_id", false);

    private ClientOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static ClientTable newTable() {
    return new ClientTable();
  }

  public static ClientTable newTable(final String alias) {
    return new ClientTable(alias);
  }

  public static class ClientTable extends Table {

    // Properties

    public NumberColumn id;
    public NumberColumn nationalId;
    public StringColumn name;
    public StringColumn propName;
    public NumberColumn referrerId;
    public NumberColumn friendId;
    public NumberColumn groupAccountId;
    public NumberColumn branchId;

    // Constructors

    ClientTable() {
      super(null, null, "client", "Table", null);
      initialize();
    }

    ClientTable(final String alias) {
      super(null, null, "client", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id");
      this.nationalId = new NumberColumn(this, "national_id", "nationalId");
      this.name = new StringColumn(this, "name", "name");
      this.propName = new StringColumn(this, "prop_name", "propName");
      this.referrerId = new NumberColumn(this, "referrer_id", "referrerId");
      this.friendId = new NumberColumn(this, "friend_id", "friendId");
      this.groupAccountId = new NumberColumn(this, "group_account_id", "groupAccountId");
      this.branchId = new NumberColumn(this, "branch_id", "branchId");
    }

  }

}
