// Autogenerated by HotRod -- Do not edit.

package app.daos.reporting.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.reporting.primitives.AbstractInvoiceVO;
import app.daos.reporting.InvoiceVO;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.LiveSQLMapper;
import org.hotrod.runtime.livesql.util.CastUtil;
import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.queries.typesolver.TypeSolver;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.Name;
import org.hotrod.runtime.livesql.metadata.View;

import org.hotrod.runtime.livesql.queries.LiveSQLContext;
import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class InvoiceDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private LiveSQLMapper liveSQLMapper;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  @Autowired
  private DataSource dataSource;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  private LiveSQLContext context;

  @Value("${use.plain.jdbc:false}")
  private boolean usePlainJDBC;

  @Autowired
  private TypeSolver typeSolver;

  @PostConstruct
  public void initializeContext() {
    this.context = new LiveSQLContext(this.liveSQLDialect, this.sqlSession, this.liveSQLMapper, this.usePlainJDBC, this.dataSource, this.typeSolver);
  }

  // Row Parser

  public app.daos.reporting.InvoiceVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.reporting.InvoiceVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.reporting.InvoiceVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.reporting.InvoiceVO mo = this.applicationContext.getBean(app.daos.reporting.InvoiceVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setId(CastUtil.toInteger((Number) m.get(p + "id" + s)));
    mo.setAccountId(CastUtil.toInteger((Number) m.get(p + "accountId" + s)));
    mo.setAmount(CastUtil.toInteger((Number) m.get(p + "amount" + s)));
    mo.setBranchId(CastUtil.toInteger((Number) m.get(p + "branchId" + s)));
    mo.setOrderDate((java.sql.Date) m.get(p + "orderDate" + s));
    mo.setType((java.lang.String) m.get(p + "type" + s));
    mo.setUnpaidBalance(CastUtil.toInteger((Number) m.get(p + "unpaidBalance" + s)));
    mo.setStatus((java.lang.String) m.get(p + "status" + s));
    return mo;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<app.daos.reporting.InvoiceVO> select(final app.daos.reporting.primitives.AbstractInvoiceVO example, final InvoiceOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.reporting.primitives.AbstractInvoiceVO, InvoiceOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.reporting.invoice.selectByExample", dwo);
  }

  public Cursor<app.daos.reporting.InvoiceVO> selectCursor(final app.daos.reporting.primitives.AbstractInvoiceVO example, final InvoiceOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.reporting.primitives.AbstractInvoiceVO, InvoiceOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.reporting.InvoiceVO>(this.sqlSession.selectCursor("mappers.reporting.invoice.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.reporting.InvoiceVO> select(final InvoiceDAO.InvoiceTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.reporting.InvoiceVO>(this.context, "mappers.reporting.invoice.selectByCriteria",
        from, predicate);
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.reporting.InvoiceVO insert(final app.daos.reporting.primitives.AbstractInvoiceVO vo) {
    String id = "mappers.reporting.invoice.insert";
    this.sqlSession.insert(id, vo);
    app.daos.reporting.InvoiceVO mo = springBeanObjectFactory.create(app.daos.reporting.InvoiceVO.class);
    mo.setId(vo.getId());
    mo.setAccountId(vo.getAccountId());
    mo.setAmount(vo.getAmount());
    mo.setBranchId(vo.getBranchId());
    mo.setOrderDate(vo.getOrderDate());
    mo.setType(vo.getType());
    mo.setUnpaidBalance(vo.getUnpaidBalance());
    mo.setStatus(vo.getStatus());
    return mo;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int update(final app.daos.reporting.primitives.AbstractInvoiceVO example, final app.daos.reporting.primitives.AbstractInvoiceVO updateValues) {
    UpdateByExampleDao<app.daos.reporting.primitives.AbstractInvoiceVO> fvd = //
      new UpdateByExampleDao<app.daos.reporting.primitives.AbstractInvoiceVO>(example, updateValues);
    return this.sqlSession.update("mappers.reporting.invoice.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.reporting.primitives.AbstractInvoiceVO updateValues, final InvoiceDAO.InvoiceTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("\"ID\"", updateValues.getId());
    if (updateValues.getAccountId() != null) values.put("\"ACCOUNT_ID\"", updateValues.getAccountId());
    if (updateValues.getAmount() != null) values.put("\"AMOUNT\"", updateValues.getAmount());
    if (updateValues.getBranchId() != null) values.put("\"BRANCH_ID\"", updateValues.getBranchId());
    if (updateValues.getOrderDate() != null) values.put("\"ORDER_DATE\"", updateValues.getOrderDate());
    if (updateValues.getType() != null) values.put("\"TYPE\"", updateValues.getType());
    if (updateValues.getUnpaidBalance() != null) values.put("\"UNPAID_BALANCE\"", updateValues.getUnpaidBalance());
    if (updateValues.getStatus() != null) values.put("\"STATUS\"", updateValues.getStatus());
    return new UpdateSetCompletePhase(this.context, "mappers.reporting.invoice.updateByCriteria", tableOrView,  predicate, values);
  }


  // delete by example

  public int delete(final app.daos.reporting.primitives.AbstractInvoiceVO example) {
    return this.sqlSession.delete("mappers.reporting.invoice.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final InvoiceDAO.InvoiceTable from, final Predicate predicate) {
    return new DeleteWherePhase(this.context, "mappers.reporting.invoice.deleteByCriteria", from, predicate);
  }

  // DAO ordering

  public enum InvoiceOrderBy implements OrderBy {

    ID("invoice", "\"ID\"", true), //
    ID$DESC("invoice", "\"ID\"", false), //
    ACCOUNT_ID("invoice", "\"ACCOUNT_ID\"", true), //
    ACCOUNT_ID$DESC("invoice", "\"ACCOUNT_ID\"", false), //
    AMOUNT("invoice", "\"AMOUNT\"", true), //
    AMOUNT$DESC("invoice", "\"AMOUNT\"", false), //
    BRANCH_ID("invoice", "\"BRANCH_ID\"", true), //
    BRANCH_ID$DESC("invoice", "\"BRANCH_ID\"", false), //
    ORDER_DATE("invoice", "\"ORDER_DATE\"", true), //
    ORDER_DATE$DESC("invoice", "\"ORDER_DATE\"", false), //
    TYPE("invoice", "\"TYPE\"", true), //
    TYPE$DESC("invoice", "\"TYPE\"", false), //
    TYPE$CASEINSENSITIVE("invoice", "lower(\"TYPE\")", true), //
    TYPE$CASEINSENSITIVE_STABLE_FORWARD("invoice", "lower(\"TYPE\"), \"TYPE\"", true), //
    TYPE$CASEINSENSITIVE_STABLE_REVERSE("invoice", "lower(\"TYPE\"), \"TYPE\"", false), //
    TYPE$DESC_CASEINSENSITIVE("invoice", "lower(\"TYPE\")", false), //
    TYPE$DESC_CASEINSENSITIVE_STABLE_FORWARD("invoice", "lower(\"TYPE\"), \"TYPE\"", false), //
    TYPE$DESC_CASEINSENSITIVE_STABLE_REVERSE("invoice", "lower(\"TYPE\"), \"TYPE\"", true), //
    UNPAID_BALANCE("invoice", "\"UNPAID_BALANCE\"", true), //
    UNPAID_BALANCE$DESC("invoice", "\"UNPAID_BALANCE\"", false), //
    STATUS("invoice", "\"STATUS\"", true), //
    STATUS$DESC("invoice", "\"STATUS\"", false), //
    STATUS$CASEINSENSITIVE("invoice", "lower(\"STATUS\")", true), //
    STATUS$CASEINSENSITIVE_STABLE_FORWARD("invoice", "lower(\"STATUS\"), \"STATUS\"", true), //
    STATUS$CASEINSENSITIVE_STABLE_REVERSE("invoice", "lower(\"STATUS\"), \"STATUS\"", false), //
    STATUS$DESC_CASEINSENSITIVE("invoice", "lower(\"STATUS\")", false), //
    STATUS$DESC_CASEINSENSITIVE_STABLE_FORWARD("invoice", "lower(\"STATUS\"), \"STATUS\"", false), //
    STATUS$DESC_CASEINSENSITIVE_STABLE_REVERSE("invoice", "lower(\"STATUS\"), \"STATUS\"", true);

    private InvoiceOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static InvoiceTable newTable() {
    return new InvoiceTable();
  }

  public static InvoiceTable newTable(final String alias) {
    return new InvoiceTable(alias);
  }

  public static class InvoiceTable extends Table {

    // Properties

    public final NumberColumn id = new NumberColumn(this, "ID", "id", "INTEGER", 32, 0, org.hotrod.runtime.livesql.queries.typesolver.TypeHandler.of(java.lang.Integer.class));
    public final NumberColumn accountId = new NumberColumn(this, "ACCOUNT_ID", "accountId", "INTEGER", 32, 0, org.hotrod.runtime.livesql.queries.typesolver.TypeHandler.of(java.lang.Integer.class));
    public final NumberColumn amount = new NumberColumn(this, "AMOUNT", "amount", "INTEGER", 32, 0, org.hotrod.runtime.livesql.queries.typesolver.TypeHandler.of(java.lang.Integer.class));
    public final NumberColumn branchId = new NumberColumn(this, "BRANCH_ID", "branchId", "INTEGER", 32, 0, org.hotrod.runtime.livesql.queries.typesolver.TypeHandler.of(java.lang.Integer.class));
    public final DateTimeColumn orderDate = new DateTimeColumn(this, "ORDER_DATE", "orderDate", "DATE", 10, 0, org.hotrod.runtime.livesql.queries.typesolver.TypeHandler.of(java.sql.Date.class));
    public final StringColumn type = new StringColumn(this, "TYPE", "type", "CHARACTER VARYING", 10, 0, org.hotrod.runtime.livesql.queries.typesolver.TypeHandler.of(java.lang.String.class));
    public final NumberColumn unpaidBalance = new NumberColumn(this, "UNPAID_BALANCE", "unpaidBalance", "INTEGER", 32, 0, org.hotrod.runtime.livesql.queries.typesolver.TypeHandler.of(java.lang.Integer.class));
    public final StringColumn status = new StringColumn(this, "STATUS", "status", "CHARACTER VARYING", 10, 0, org.hotrod.runtime.livesql.queries.typesolver.TypeHandler.of(java.lang.String.class));

    // Getters

    public AllColumns star() {
      return new AllColumns(this.id, this.accountId, this.amount, this.branchId, this.orderDate, this.type, this.unpaidBalance, this.status);
    }

    // Constructors

    InvoiceTable() {
      super(null, null, Name.of("INVOICE", false), "Table", null);
      initializeColumns();
    }

    InvoiceTable(final String alias) {
      super(null, null, Name.of("INVOICE", false), "Table", alias);
      initializeColumns();
    }

    // Initialization

    private void initializeColumns() {
      super.add(this.id);
      super.add(this.accountId);
      super.add(this.amount);
      super.add(this.branchId);
      super.add(this.orderDate);
      super.add(this.type);
      super.add(this.unpaidBalance);
      super.add(this.status);
    }

  }

}
