// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractBinariesVO;
import app.daos.BinariesVO;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.LiveSQLMapper;
import org.hotrod.runtime.livesql.util.CastUtil;
import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.Name;
import org.hotrod.runtime.livesql.metadata.View;

import org.hotrod.runtime.livesql.queries.LiveSQLContext;
import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class BinariesDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private LiveSQLMapper liveSQLMapper;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  @Autowired
  private DataSource dataSource;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  private LiveSQLContext context;

  @Value("${use.plain.jdbc:false}")
  private boolean usePlainJDBC;

  @PostConstruct
  public void initializeContext() {
    this.context = new LiveSQLContext(this.liveSQLDialect, this.sqlSession, this.liveSQLMapper, this.usePlainJDBC, this.dataSource);
  }

  // Row Parser

  public app.daos.BinariesVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.BinariesVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.BinariesVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.BinariesVO mo = this.applicationContext.getBean(app.daos.BinariesVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setId(CastUtil.toInteger((Number) m.get(p + "id" + s)));
    mo.setBin1((byte[]) m.get(p + "bin1" + s));
    mo.setBin2((byte[]) m.get(p + "bin2" + s));
    mo.setBin3((byte[]) m.get(p + "bin3" + s));
    mo.setBin4((byte[]) m.get(p + "bin4" + s));
    mo.setBin5((byte[]) m.get(p + "bin5" + s));
    mo.setBlo1((byte[]) m.get(p + "blo1" + s));
    mo.setBlo2((byte[]) m.get(p + "blo2" + s));
    mo.setBlo3((byte[]) m.get(p + "blo3" + s));
    mo.setBlo4((byte[]) m.get(p + "blo4" + s));
    mo.setBlo5((byte[]) m.get(p + "blo5" + s));
    return mo;
  }

  // select by primary key

  public app.daos.BinariesVO select(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.BinariesVO vo = new app.daos.BinariesVO();
    vo.setId(id);
    return this.sqlSession.selectOne("mappers.binaries.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.BinariesVO> select(final app.daos.primitives.AbstractBinariesVO example, final BinariesOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractBinariesVO, BinariesOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.binaries.selectByExample", dwo);
  }

  public Cursor<app.daos.BinariesVO> selectCursor(final app.daos.primitives.AbstractBinariesVO example, final BinariesOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractBinariesVO, BinariesOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.BinariesVO>(this.sqlSession.selectCursor("mappers.binaries.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.BinariesVO> select(final BinariesDAO.BinariesTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.BinariesVO>(this.context, "mappers.binaries.selectByCriteria",
        from, predicate);
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.BinariesVO insert(final app.daos.primitives.AbstractBinariesVO vo) {
    String id = "mappers.binaries.insert";
    this.sqlSession.insert(id, vo);
    app.daos.BinariesVO mo = springBeanObjectFactory.create(app.daos.BinariesVO.class);
    mo.setId(vo.getId());
    mo.setBin1(vo.getBin1());
    mo.setBin2(vo.getBin2());
    mo.setBin3(vo.getBin3());
    mo.setBin4(vo.getBin4());
    mo.setBin5(vo.getBin5());
    mo.setBlo1(vo.getBlo1());
    mo.setBlo2(vo.getBlo2());
    mo.setBlo3(vo.getBlo3());
    mo.setBlo4(vo.getBlo4());
    mo.setBlo5(vo.getBlo5());
    return mo;
  }

  // update by PK

  public int update(final app.daos.BinariesVO vo) {
    if (vo.getId() == null) return 0;
    return this.sqlSession.update("mappers.binaries.updateByPK", vo);
  }

  // delete by PK

  public int delete(final java.lang.Integer id) {
    if (id == null) return 0;
    app.daos.BinariesVO vo = new app.daos.BinariesVO();
    vo.setId(id);
    if (vo.getId() == null) return 0;
    return this.sqlSession.delete("mappers.binaries.deleteByPK", vo);
  }

  // update by example

  public int update(final app.daos.primitives.AbstractBinariesVO example, final app.daos.primitives.AbstractBinariesVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractBinariesVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractBinariesVO>(example, updateValues);
    return this.sqlSession.update("mappers.binaries.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractBinariesVO updateValues, final BinariesDAO.BinariesTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("\"ID\"", updateValues.getId());
    if (updateValues.getBin1() != null) values.put("\"BIN1\"", updateValues.getBin1());
    if (updateValues.getBin2() != null) values.put("\"BIN2\"", updateValues.getBin2());
    if (updateValues.getBin3() != null) values.put("\"BIN3\"", updateValues.getBin3());
    if (updateValues.getBin4() != null) values.put("\"BIN4\"", updateValues.getBin4());
    if (updateValues.getBin5() != null) values.put("\"BIN5\"", updateValues.getBin5());
    if (updateValues.getBlo1() != null) values.put("\"BLO1\"", updateValues.getBlo1());
    if (updateValues.getBlo2() != null) values.put("\"BLO2\"", updateValues.getBlo2());
    if (updateValues.getBlo3() != null) values.put("\"BLO3\"", updateValues.getBlo3());
    if (updateValues.getBlo4() != null) values.put("\"BLO4\"", updateValues.getBlo4());
    if (updateValues.getBlo5() != null) values.put("\"BLO5\"", updateValues.getBlo5());
    return new UpdateSetCompletePhase(this.context, "mappers.binaries.updateByCriteria", tableOrView,  predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractBinariesVO example) {
    return this.sqlSession.delete("mappers.binaries.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final BinariesDAO.BinariesTable from, final Predicate predicate) {
    return new DeleteWherePhase(this.context, "mappers.binaries.deleteByCriteria", from, predicate);
  }

  // DAO ordering

  public enum BinariesOrderBy implements OrderBy {

    ID("binaries", "\"ID\"", true), //
    ID$DESC("binaries", "\"ID\"", false), //
    BIN1("binaries", "\"BIN1\"", true), //
    BIN1$DESC("binaries", "\"BIN1\"", false), //
    BIN2("binaries", "\"BIN2\"", true), //
    BIN2$DESC("binaries", "\"BIN2\"", false), //
    BIN3("binaries", "\"BIN3\"", true), //
    BIN3$DESC("binaries", "\"BIN3\"", false), //
    BIN4("binaries", "\"BIN4\"", true), //
    BIN4$DESC("binaries", "\"BIN4\"", false), //
    BIN5("binaries", "\"BIN5\"", true), //
    BIN5$DESC("binaries", "\"BIN5\"", false), //
    BLO1("binaries", "\"BLO1\"", true), //
    BLO1$DESC("binaries", "\"BLO1\"", false), //
    BLO2("binaries", "\"BLO2\"", true), //
    BLO2$DESC("binaries", "\"BLO2\"", false), //
    BLO3("binaries", "\"BLO3\"", true), //
    BLO3$DESC("binaries", "\"BLO3\"", false), //
    BLO4("binaries", "\"BLO4\"", true), //
    BLO4$DESC("binaries", "\"BLO4\"", false), //
    BLO5("binaries", "\"BLO5\"", true), //
    BLO5$DESC("binaries", "\"BLO5\"", false);

    private BinariesOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static BinariesTable newTable() {
    return new BinariesTable();
  }

  public static BinariesTable newTable(final String alias) {
    return new BinariesTable(alias);
  }

  public static class BinariesTable extends Table {

    // Properties

    public final NumberColumn id = new NumberColumn(this, "ID", "id", "INTEGER", 32, 0, java.lang.Integer.class, null, null);
    public final ByteArrayColumn bin1 = new ByteArrayColumn(this, "BIN1", "bin1", "BINARY", 100, 0, byte[].class, null, null);
    public final ByteArrayColumn bin2 = new ByteArrayColumn(this, "BIN2", "bin2", "BINARY VARYING", 100, 0, byte[].class, null, null);
    public final ByteArrayColumn bin3 = new ByteArrayColumn(this, "BIN3", "bin3", "BINARY VARYING", 100, 0, byte[].class, null, null);
    public final ByteArrayColumn bin4 = new ByteArrayColumn(this, "BIN4", "bin4", "BINARY VARYING", 100, 0, byte[].class, null, null);
    public final ByteArrayColumn bin5 = new ByteArrayColumn(this, "BIN5", "bin5", "BINARY VARYING", 100, 0, byte[].class, null, null);
    public final ByteArrayColumn blo1 = new ByteArrayColumn(this, "BLO1", "blo1", "BINARY LARGE OBJECT", 1000000, 0, byte[].class, null, null);
    public final ByteArrayColumn blo2 = new ByteArrayColumn(this, "BLO2", "blo2", "BINARY LARGE OBJECT", 1000000, 0, byte[].class, null, null);
    public final ByteArrayColumn blo3 = new ByteArrayColumn(this, "BLO3", "blo3", "BINARY LARGE OBJECT", 1000000, 0, byte[].class, null, null);
    public final ByteArrayColumn blo4 = new ByteArrayColumn(this, "BLO4", "blo4", "BINARY LARGE OBJECT", 1000000, 0, byte[].class, null, null);
    public final ByteArrayColumn blo5 = new ByteArrayColumn(this, "BLO5", "blo5", "BINARY LARGE OBJECT", 1000000, 0, byte[].class, null, null);

    // Getters

    public AllColumns star() {
      return new AllColumns(this.id, this.bin1, this.bin2, this.bin3, this.bin4, this.bin5, this.blo1, this.blo2, this.blo3, this.blo4, this.blo5);
    }

    // Constructors

    BinariesTable() {
      super(null, null, Name.of("BINARIES", false), "Table", null);
      initialize();
    }

    BinariesTable(final String alias) {
      super(null, null, Name.of("BINARIES", false), "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      super.columns.add(this.id);
      super.columns.add(this.bin1);
      super.columns.add(this.bin2);
      super.columns.add(this.bin3);
      super.columns.add(this.bin4);
      super.columns.add(this.bin5);
      super.columns.add(this.blo1);
      super.columns.add(this.blo2);
      super.columns.add(this.blo3);
      super.columns.add(this.blo4);
      super.columns.add(this.blo5);
    }

  }

}
