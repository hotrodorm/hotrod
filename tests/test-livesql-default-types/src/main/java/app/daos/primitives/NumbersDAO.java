// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractNumbersVO;
import app.daos.NumbersVO;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.LiveSQLMapper;
import org.hotrod.runtime.livesql.util.CastUtil;
import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.Name;
import org.hotrod.runtime.livesql.metadata.View;

import org.hotrod.runtime.livesql.queries.LiveSQLContext;
import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class NumbersDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private LiveSQLMapper liveSQLMapper;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  @Autowired
  private DataSource dataSource;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  private LiveSQLContext context;

  @Value("${use.plain.jdbc:false}")
  private boolean usePlainJDBC;

  @PostConstruct
  public void initializeContext() {
    this.context = new LiveSQLContext(this.liveSQLDialect, this.sqlSession, this.liveSQLMapper, this.usePlainJDBC, this.dataSource);
  }

  // Row Parser

  public app.daos.NumbersVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.NumbersVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.NumbersVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.NumbersVO mo = this.applicationContext.getBean(app.daos.NumbersVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setId(CastUtil.toInteger((Number) m.get(p + "id" + s)));
    mo.setNum1(CastUtil.toByte((Number) m.get(p + "num1" + s)));
    mo.setNum2(CastUtil.toShort((Number) m.get(p + "num2" + s)));
    mo.setNum3(CastUtil.toInteger((Number) m.get(p + "num3" + s)));
    mo.setNum4(CastUtil.toLong((Number) m.get(p + "num4" + s)));
    mo.setNum5(CastUtil.toBigInteger((Number) m.get(p + "num5" + s)));
    mo.setNum6(CastUtil.toBigDecimal((Number) m.get(p + "num6" + s)));
    mo.setNum7(CastUtil.toBigDecimal((Number) m.get(p + "num7" + s)));
    mo.setNum8(CastUtil.toFloat((Number) m.get(p + "num8" + s)));
    mo.setNum9(CastUtil.toDouble((Number) m.get(p + "num9" + s)));
    mo.setNum10(CastUtil.toBigDecimal((Number) m.get(p + "num10" + s)));
    mo.setNum11(CastUtil.toBigDecimal((Number) m.get(p + "num11" + s)));
    mo.setNum12(CastUtil.toBigDecimal((Number) m.get(p + "num12" + s)));
    mo.setNum20(CastUtil.toBigInteger((Number) m.get(p + "num20" + s)));
    mo.setNum21(CastUtil.toBigInteger((Number) m.get(p + "num21" + s)));
    mo.setNum22(CastUtil.toBigInteger((Number) m.get(p + "num22" + s)));
    return mo;
  }

  // select by primary key

  public app.daos.NumbersVO select(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.NumbersVO vo = new app.daos.NumbersVO();
    vo.setId(id);
    return this.sqlSession.selectOne("mappers.numbers.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.NumbersVO> select(final app.daos.primitives.AbstractNumbersVO example, final NumbersOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractNumbersVO, NumbersOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.numbers.selectByExample", dwo);
  }

  public Cursor<app.daos.NumbersVO> selectCursor(final app.daos.primitives.AbstractNumbersVO example, final NumbersOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractNumbersVO, NumbersOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.NumbersVO>(this.sqlSession.selectCursor("mappers.numbers.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.NumbersVO> select(final NumbersDAO.NumbersTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.NumbersVO>(this.context, "mappers.numbers.selectByCriteria",
        from, predicate);
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.NumbersVO insert(final app.daos.primitives.AbstractNumbersVO vo) {
    String id = "mappers.numbers.insert";
    this.sqlSession.insert(id, vo);
    app.daos.NumbersVO mo = springBeanObjectFactory.create(app.daos.NumbersVO.class);
    mo.setId(vo.getId());
    mo.setNum1(vo.getNum1());
    mo.setNum2(vo.getNum2());
    mo.setNum3(vo.getNum3());
    mo.setNum4(vo.getNum4());
    mo.setNum5(vo.getNum5());
    mo.setNum6(vo.getNum6());
    mo.setNum7(vo.getNum7());
    mo.setNum8(vo.getNum8());
    mo.setNum9(vo.getNum9());
    mo.setNum10(vo.getNum10());
    mo.setNum11(vo.getNum11());
    mo.setNum12(vo.getNum12());
    mo.setNum20(vo.getNum20());
    mo.setNum21(vo.getNum21());
    mo.setNum22(vo.getNum22());
    return mo;
  }

  // update by PK

  public int update(final app.daos.NumbersVO vo) {
    if (vo.getId() == null) return 0;
    return this.sqlSession.update("mappers.numbers.updateByPK", vo);
  }

  // delete by PK

  public int delete(final java.lang.Integer id) {
    if (id == null) return 0;
    app.daos.NumbersVO vo = new app.daos.NumbersVO();
    vo.setId(id);
    if (vo.getId() == null) return 0;
    return this.sqlSession.delete("mappers.numbers.deleteByPK", vo);
  }

  // update by example

  public int update(final app.daos.primitives.AbstractNumbersVO example, final app.daos.primitives.AbstractNumbersVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractNumbersVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractNumbersVO>(example, updateValues);
    return this.sqlSession.update("mappers.numbers.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractNumbersVO updateValues, final NumbersDAO.NumbersTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("\"ID\"", updateValues.getId());
    if (updateValues.getNum1() != null) values.put("\"NUM1\"", updateValues.getNum1());
    if (updateValues.getNum2() != null) values.put("\"NUM2\"", updateValues.getNum2());
    if (updateValues.getNum3() != null) values.put("\"NUM3\"", updateValues.getNum3());
    if (updateValues.getNum4() != null) values.put("\"NUM4\"", updateValues.getNum4());
    if (updateValues.getNum5() != null) values.put("\"NUM5\"", updateValues.getNum5());
    if (updateValues.getNum6() != null) values.put("\"NUM6\"", updateValues.getNum6());
    if (updateValues.getNum7() != null) values.put("\"NUM7\"", updateValues.getNum7());
    if (updateValues.getNum8() != null) values.put("\"NUM8\"", updateValues.getNum8());
    if (updateValues.getNum9() != null) values.put("\"NUM9\"", updateValues.getNum9());
    if (updateValues.getNum10() != null) values.put("\"NUM10\"", updateValues.getNum10());
    if (updateValues.getNum11() != null) values.put("\"NUM11\"", updateValues.getNum11());
    if (updateValues.getNum12() != null) values.put("\"NUM12\"", updateValues.getNum12());
    if (updateValues.getNum20() != null) values.put("\"NUM20\"", updateValues.getNum20());
    if (updateValues.getNum21() != null) values.put("\"NUM21\"", updateValues.getNum21());
    if (updateValues.getNum22() != null) values.put("\"NUM22\"", updateValues.getNum22());
    return new UpdateSetCompletePhase(this.context, "mappers.numbers.updateByCriteria", tableOrView,  predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractNumbersVO example) {
    return this.sqlSession.delete("mappers.numbers.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final NumbersDAO.NumbersTable from, final Predicate predicate) {
    return new DeleteWherePhase(this.context, "mappers.numbers.deleteByCriteria", from, predicate);
  }

  // DAO ordering

  public enum NumbersOrderBy implements OrderBy {

    ID("numbers", "\"ID\"", true), //
    ID$DESC("numbers", "\"ID\"", false), //
    NUM1("numbers", "\"NUM1\"", true), //
    NUM1$DESC("numbers", "\"NUM1\"", false), //
    NUM2("numbers", "\"NUM2\"", true), //
    NUM2$DESC("numbers", "\"NUM2\"", false), //
    NUM3("numbers", "\"NUM3\"", true), //
    NUM3$DESC("numbers", "\"NUM3\"", false), //
    NUM4("numbers", "\"NUM4\"", true), //
    NUM4$DESC("numbers", "\"NUM4\"", false), //
    NUM5("numbers", "\"NUM5\"", true), //
    NUM5$DESC("numbers", "\"NUM5\"", false), //
    NUM6("numbers", "\"NUM6\"", true), //
    NUM6$DESC("numbers", "\"NUM6\"", false), //
    NUM7("numbers", "\"NUM7\"", true), //
    NUM7$DESC("numbers", "\"NUM7\"", false), //
    NUM8("numbers", "\"NUM8\"", true), //
    NUM8$DESC("numbers", "\"NUM8\"", false), //
    NUM9("numbers", "\"NUM9\"", true), //
    NUM9$DESC("numbers", "\"NUM9\"", false), //
    NUM10("numbers", "\"NUM10\"", true), //
    NUM10$DESC("numbers", "\"NUM10\"", false), //
    NUM11("numbers", "\"NUM11\"", true), //
    NUM11$DESC("numbers", "\"NUM11\"", false), //
    NUM12("numbers", "\"NUM12\"", true), //
    NUM12$DESC("numbers", "\"NUM12\"", false), //
    NUM20("numbers", "\"NUM20\"", true), //
    NUM20$DESC("numbers", "\"NUM20\"", false), //
    NUM21("numbers", "\"NUM21\"", true), //
    NUM21$DESC("numbers", "\"NUM21\"", false), //
    NUM22("numbers", "\"NUM22\"", true), //
    NUM22$DESC("numbers", "\"NUM22\"", false);

    private NumbersOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static NumbersTable newTable() {
    return new NumbersTable();
  }

  public static NumbersTable newTable(final String alias) {
    return new NumbersTable(alias);
  }

  public static class NumbersTable extends Table {

    // Properties

    public final NumberColumn id = new NumberColumn(this, "ID", "id", "NUMBER", 9, 0, java.lang.Integer.class, null, null);
    public final NumberColumn num1 = new NumberColumn(this, "NUM1", "num1", "NUMBER", 2, 0, java.lang.Byte.class, null, null);
    public final NumberColumn num2 = new NumberColumn(this, "NUM2", "num2", "NUMBER", 4, 0, java.lang.Short.class, null, null);
    public final NumberColumn num3 = new NumberColumn(this, "NUM3", "num3", "NUMBER", 9, 0, java.lang.Integer.class, null, null);
    public final NumberColumn num4 = new NumberColumn(this, "NUM4", "num4", "NUMBER", 18, 0, java.lang.Long.class, null, null);
    public final NumberColumn num5 = new NumberColumn(this, "NUM5", "num5", "NUMBER", 38, 0, java.math.BigInteger.class, null, null);
    public final NumberColumn num6 = new NumberColumn(this, "NUM6", "num6", "NUMBER", 10, 2, java.math.BigDecimal.class, null, null);
    public final NumberColumn num7 = new NumberColumn(this, "NUM7", "num7", "NUMBER", 0, -127, java.math.BigDecimal.class, null, null);
    public final NumberColumn num8 = new NumberColumn(this, "NUM8", "num8", "BINARY_FLOAT", 4, null, java.lang.Float.class, null, null);
    public final NumberColumn num9 = new NumberColumn(this, "NUM9", "num9", "BINARY_DOUBLE", 8, null, java.lang.Double.class, null, null);
    public final NumberColumn num10 = new NumberColumn(this, "NUM10", "num10", "FLOAT", 126, null, java.math.BigDecimal.class, null, null);
    public final NumberColumn num11 = new NumberColumn(this, "NUM11", "num11", "FLOAT", 63, null, java.math.BigDecimal.class, null, null);
    public final NumberColumn num12 = new NumberColumn(this, "NUM12", "num12", "FLOAT", 126, null, java.math.BigDecimal.class, null, null);
    public final NumberColumn num20 = new NumberColumn(this, "NUM20", "num20", "NUMBER", 38, 0, java.math.BigInteger.class, null, null);
    public final NumberColumn num21 = new NumberColumn(this, "NUM21", "num21", "NUMBER", 38, 0, java.math.BigInteger.class, null, null);
    public final NumberColumn num22 = new NumberColumn(this, "NUM22", "num22", "NUMBER", 38, 0, java.math.BigInteger.class, null, null);

    // Getters

    public AllColumns star() {
      return new AllColumns(this.id, this.num1, this.num2, this.num3, this.num4, this.num5, this.num6, this.num7, this.num8, this.num9, this.num10, this.num11, this.num12, this.num20, this.num21, this.num22);
    }

    // Constructors

    NumbersTable() {
      super(null, null, Name.of("NUMBERS", false), "Table", null);
      initialize();
    }

    NumbersTable(final String alias) {
      super(null, null, Name.of("NUMBERS", false), "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      super.columns.add(this.id);
      super.columns.add(this.num1);
      super.columns.add(this.num2);
      super.columns.add(this.num3);
      super.columns.add(this.num4);
      super.columns.add(this.num5);
      super.columns.add(this.num6);
      super.columns.add(this.num7);
      super.columns.add(this.num8);
      super.columns.add(this.num9);
      super.columns.add(this.num10);
      super.columns.add(this.num11);
      super.columns.add(this.num12);
      super.columns.add(this.num20);
      super.columns.add(this.num21);
      super.columns.add(this.num22);
    }

  }

}
