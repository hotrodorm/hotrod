// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractNumbersVO;
import app.daos.NumbersVO;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.util.CastUtil;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class NumbersDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  // Row Parser

  public app.daos.NumbersVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.NumbersVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.NumbersVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.NumbersVO mo = this.applicationContext.getBean(app.daos.NumbersVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setId(CastUtil.toInteger((Number) m.get(p + "id" + s)));
    mo.setInt1(CastUtil.toInteger((Number) m.get(p + "int1" + s)));
    mo.setInt2(CastUtil.toInteger((Number) m.get(p + "int2" + s)));
    mo.setInt3(CastUtil.toInteger((Number) m.get(p + "int3" + s)));
    mo.setInt4(CastUtil.toInteger((Number) m.get(p + "int4" + s)));
    mo.setInt5(CastUtil.toInteger((Number) m.get(p + "int5" + s)));
    mo.setInt10(CastUtil.toByte((Number) m.get(p + "int10" + s)));
    mo.setInt20(CastUtil.toShort((Number) m.get(p + "int20" + s)));
    mo.setInt21(CastUtil.toShort((Number) m.get(p + "int21" + s)));
    mo.setInt30(CastUtil.toLong((Number) m.get(p + "int30" + s)));
    mo.setInt31(CastUtil.toLong((Number) m.get(p + "int31" + s)));
    mo.setDec1(CastUtil.toBigDecimal((Number) m.get(p + "dec1" + s)));
    mo.setDec2(CastUtil.toBigDecimal((Number) m.get(p + "dec2" + s)));
    mo.setDec3(m.get(p + "dec3" + s));
    mo.setDec4(m.get(p + "dec4" + s));
    mo.setDec5(CastUtil.toBigDecimal((Number) m.get(p + "dec5" + s)));
    mo.setDou1(CastUtil.toDouble((Number) m.get(p + "dou1" + s)));
    mo.setDou2(CastUtil.toDouble((Number) m.get(p + "dou2" + s)));
    mo.setDou3(m.get(p + "dou3" + s));
    mo.setDou4(CastUtil.toDouble((Number) m.get(p + "dou4" + s)));
    mo.setRea1(CastUtil.toFloat((Number) m.get(p + "rea1" + s)));
    mo.setRea2(CastUtil.toFloat((Number) m.get(p + "rea2" + s)));
    return mo;
  }

  // select by primary key

  public app.daos.NumbersVO select(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.NumbersVO vo = new app.daos.NumbersVO();
    vo.setId(id);
    return this.sqlSession.selectOne("mappers.numbers.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.NumbersVO> select(final app.daos.primitives.AbstractNumbersVO example, final NumbersOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractNumbersVO, NumbersOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.numbers.selectByExample", dwo);
  }

  public Cursor<app.daos.NumbersVO> selectCursor(final app.daos.primitives.AbstractNumbersVO example, final NumbersOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractNumbersVO, NumbersOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.NumbersVO>(this.sqlSession.selectCursor("mappers.numbers.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.NumbersVO> select(final NumbersDAO.NumbersTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.NumbersVO>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "mappers.numbers.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.NumbersVO insert(final app.daos.primitives.AbstractNumbersVO vo) {
    String id = "mappers.numbers.insert";
    this.sqlSession.insert(id, vo);
    app.daos.NumbersVO mo = new app.daos.NumbersVO();
    mo.setId(vo.getId());
    mo.setInt1(vo.getInt1());
    mo.setInt2(vo.getInt2());
    mo.setInt3(vo.getInt3());
    mo.setInt4(vo.getInt4());
    mo.setInt5(vo.getInt5());
    mo.setInt10(vo.getInt10());
    mo.setInt20(vo.getInt20());
    mo.setInt21(vo.getInt21());
    mo.setInt30(vo.getInt30());
    mo.setInt31(vo.getInt31());
    mo.setDec1(vo.getDec1());
    mo.setDec2(vo.getDec2());
    mo.setDec3(vo.getDec3());
    mo.setDec4(vo.getDec4());
    mo.setDec5(vo.getDec5());
    mo.setDou1(vo.getDou1());
    mo.setDou2(vo.getDou2());
    mo.setDou3(vo.getDou3());
    mo.setDou4(vo.getDou4());
    mo.setRea1(vo.getRea1());
    mo.setRea2(vo.getRea2());
    return mo;
  }

  // update by PK

  public int update(final app.daos.NumbersVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("mappers.numbers.updateByPK", vo);
  }

  // delete by PK

  public int delete(final java.lang.Integer id) {
    if (id == null) return 0;
    app.daos.NumbersVO vo = new app.daos.NumbersVO();
    vo.setId(id);
    if (vo.id == null) return 0;
    return this.sqlSession.delete("mappers.numbers.deleteByPK", vo);
  }

  // update by example

  public int update(final app.daos.primitives.AbstractNumbersVO example, final app.daos.primitives.AbstractNumbersVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractNumbersVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractNumbersVO>(example, updateValues);
    return this.sqlSession.update("mappers.numbers.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractNumbersVO updateValues, final NumbersDAO.NumbersTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("id", updateValues.getId());
    if (updateValues.getInt1() != null) values.put("int1", updateValues.getInt1());
    if (updateValues.getInt2() != null) values.put("int2", updateValues.getInt2());
    if (updateValues.getInt3() != null) values.put("int3", updateValues.getInt3());
    if (updateValues.getInt4() != null) values.put("int4", updateValues.getInt4());
    if (updateValues.getInt5() != null) values.put("int5", updateValues.getInt5());
    if (updateValues.getInt10() != null) values.put("int10", updateValues.getInt10());
    if (updateValues.getInt20() != null) values.put("int20", updateValues.getInt20());
    if (updateValues.getInt21() != null) values.put("int21", updateValues.getInt21());
    if (updateValues.getInt30() != null) values.put("int30", updateValues.getInt30());
    if (updateValues.getInt31() != null) values.put("int31", updateValues.getInt31());
    if (updateValues.getDec1() != null) values.put("dec1", updateValues.getDec1());
    if (updateValues.getDec2() != null) values.put("dec2", updateValues.getDec2());
    if (updateValues.getDec3() != null) values.put("dec3", updateValues.getDec3());
    if (updateValues.getDec4() != null) values.put("dec4", updateValues.getDec4());
    if (updateValues.getDec5() != null) values.put("dec5", updateValues.getDec5());
    if (updateValues.getDou1() != null) values.put("dou1", updateValues.getDou1());
    if (updateValues.getDou2() != null) values.put("dou2", updateValues.getDou2());
    if (updateValues.getDou3() != null) values.put("dou3", updateValues.getDou3());
    if (updateValues.getDou4() != null) values.put("dou4", updateValues.getDou4());
    if (updateValues.getRea1() != null) values.put("rea1", updateValues.getRea1());
    if (updateValues.getRea2() != null) values.put("rea2", updateValues.getRea2());
    return new UpdateSetCompletePhase(tableOrView, this.liveSQLDialect, this.sqlSession,
      "mappers.numbers.updateByCriteria", predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractNumbersVO example) {
    return this.sqlSession.delete("mappers.numbers.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final NumbersDAO.NumbersTable from, final Predicate predicate) {
    return new DeleteWherePhase(from, this.liveSQLDialect, this.sqlSession,
      "mappers.numbers.deleteByCriteria", predicate);
  }

  // DAO ordering

  public enum NumbersOrderBy implements OrderBy {

    ID("public.numbers", "id", true), //
    ID$DESC("public.numbers", "id", false), //
    INT1("public.numbers", "int1", true), //
    INT1$DESC("public.numbers", "int1", false), //
    INT2("public.numbers", "int2", true), //
    INT2$DESC("public.numbers", "int2", false), //
    INT3("public.numbers", "int3", true), //
    INT3$DESC("public.numbers", "int3", false), //
    INT4("public.numbers", "int4", true), //
    INT4$DESC("public.numbers", "int4", false), //
    INT5("public.numbers", "int5", true), //
    INT5$DESC("public.numbers", "int5", false), //
    INT10("public.numbers", "int10", true), //
    INT10$DESC("public.numbers", "int10", false), //
    INT20("public.numbers", "int20", true), //
    INT20$DESC("public.numbers", "int20", false), //
    INT21("public.numbers", "int21", true), //
    INT21$DESC("public.numbers", "int21", false), //
    INT30("public.numbers", "int30", true), //
    INT30$DESC("public.numbers", "int30", false), //
    INT31("public.numbers", "int31", true), //
    INT31$DESC("public.numbers", "int31", false), //
    DEC1("public.numbers", "dec1", true), //
    DEC1$DESC("public.numbers", "dec1", false), //
    DEC2("public.numbers", "dec2", true), //
    DEC2$DESC("public.numbers", "dec2", false), //
    DEC3("public.numbers", "dec3", true), //
    DEC3$DESC("public.numbers", "dec3", false), //
    DEC4("public.numbers", "dec4", true), //
    DEC4$DESC("public.numbers", "dec4", false), //
    DEC5("public.numbers", "dec5", true), //
    DEC5$DESC("public.numbers", "dec5", false), //
    DOU1("public.numbers", "dou1", true), //
    DOU1$DESC("public.numbers", "dou1", false), //
    DOU2("public.numbers", "dou2", true), //
    DOU2$DESC("public.numbers", "dou2", false), //
    DOU3("public.numbers", "dou3", true), //
    DOU3$DESC("public.numbers", "dou3", false), //
    DOU4("public.numbers", "dou4", true), //
    DOU4$DESC("public.numbers", "dou4", false), //
    REA1("public.numbers", "rea1", true), //
    REA1$DESC("public.numbers", "rea1", false), //
    REA2("public.numbers", "rea2", true), //
    REA2$DESC("public.numbers", "rea2", false);

    private NumbersOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static NumbersTable newTable() {
    return new NumbersTable();
  }

  public static NumbersTable newTable(final String alias) {
    return new NumbersTable(alias);
  }

  public static class NumbersTable extends Table {

    // Properties

    public NumberColumn id;
    public NumberColumn int1;
    public NumberColumn int2;
    public NumberColumn int3;
    public NumberColumn int4;
    public NumberColumn int5;
    public NumberColumn int10;
    public NumberColumn int20;
    public NumberColumn int21;
    public NumberColumn int30;
    public NumberColumn int31;
    public NumberColumn dec1;
    public NumberColumn dec2;
    public ObjectColumn dec3;
    public ObjectColumn dec4;
    public NumberColumn dec5;
    public NumberColumn dou1;
    public NumberColumn dou2;
    public ObjectColumn dou3;
    public NumberColumn dou4;
    public NumberColumn rea1;
    public NumberColumn rea2;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.id, this.int1, this.int2, this.int3, this.int4, this.int5, this.int10, this.int20, this.int21, this.int30, this.int31, this.dec1, this.dec2, this.dec3, this.dec4, this.dec5, this.dou1, this.dou2, this.dou3, this.dou4, this.rea1, this.rea2);
    }

    // Constructors

    NumbersTable() {
      super(null, "PUBLIC", "NUMBERS", "Table", null);
      initialize();
    }

    NumbersTable(final String alias) {
      super(null, "PUBLIC", "NUMBERS", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      this.id = new NumberColumn(this, "ID", "id", "INTEGER", 32, 0);
      super.columns.add(this.id);
      this.int1 = new NumberColumn(this, "INT1", "int1", "INTEGER", 32, 0);
      super.columns.add(this.int1);
      this.int2 = new NumberColumn(this, "INT2", "int2", "INTEGER", 32, 0);
      super.columns.add(this.int2);
      this.int3 = new NumberColumn(this, "INT3", "int3", "INTEGER", 32, 0);
      super.columns.add(this.int3);
      this.int4 = new NumberColumn(this, "INT4", "int4", "INTEGER", 32, 0);
      super.columns.add(this.int4);
      this.int5 = new NumberColumn(this, "INT5", "int5", "INTEGER", 32, 0);
      super.columns.add(this.int5);
      this.int10 = new NumberColumn(this, "INT10", "int10", "TINYINT", 8, 0);
      super.columns.add(this.int10);
      this.int20 = new NumberColumn(this, "INT20", "int20", "SMALLINT", 16, 0);
      super.columns.add(this.int20);
      this.int21 = new NumberColumn(this, "INT21", "int21", "SMALLINT", 16, 0);
      super.columns.add(this.int21);
      this.int30 = new NumberColumn(this, "INT30", "int30", "BIGINT", 64, 0);
      super.columns.add(this.int30);
      this.int31 = new NumberColumn(this, "INT31", "int31", "BIGINT", 64, 0);
      super.columns.add(this.int31);
      this.dec1 = new NumberColumn(this, "DEC1", "dec1", "DECIMAL", 10, 2);
      super.columns.add(this.dec1);
      this.dec2 = new NumberColumn(this, "DEC2", "dec2", "DECIMAL", 19, 4);
      super.columns.add(this.dec2);
      this.dec3 = new ObjectColumn(this, "DEC3", "dec3", "NUMERIC", 10, 2);
      super.columns.add(this.dec3);
      this.dec4 = new ObjectColumn(this, "DEC4", "dec4", "NUMERIC", 10, 2);
      super.columns.add(this.dec4);
      this.dec5 = new NumberColumn(this, "DEC5", "dec5", "DECIMAL", 10, 2);
      super.columns.add(this.dec5);
      this.dou1 = new NumberColumn(this, "DOU1", "dou1", "DOUBLE PRECISION", 53, 0);
      super.columns.add(this.dou1);
      this.dou2 = new NumberColumn(this, "DOU2", "dou2", "DOUBLE PRECISION", 53, 0);
      super.columns.add(this.dou2);
      this.dou3 = new ObjectColumn(this, "DOU3", "dou3", "DOUBLE PRECISION", 53, 0);
      super.columns.add(this.dou3);
      this.dou4 = new NumberColumn(this, "DOU4", "dou4", "DOUBLE PRECISION", 53, 0);
      super.columns.add(this.dou4);
      this.rea1 = new NumberColumn(this, "REA1", "rea1", "REAL", 24, 0);
      super.columns.add(this.rea1);
      this.rea2 = new NumberColumn(this, "REA2", "rea2", "REAL", 24, 0);
      super.columns.add(this.rea2);
    }

  }

}
