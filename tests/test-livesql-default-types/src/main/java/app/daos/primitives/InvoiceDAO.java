// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractInvoiceVO;
import app.daos.InvoiceVO;
import app.daos.BranchVO;
import app.daos.primitives.BranchDAO;

import java.lang.Override;
import java.util.ArrayList;
import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.util.CastUtil;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class InvoiceDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Lazy
  @Autowired
  private BranchDAO branchDAO;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // Row Parser

  public app.daos.InvoiceVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.InvoiceVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.InvoiceVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.InvoiceVO mo = this.applicationContext.getBean(app.daos.InvoiceVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setId(CastUtil.toInteger((Number)  m.get(p + "id" + s)));
    mo.setAmount(CastUtil.toInteger((Number)  m.get(p + "amount" + s)));
    mo.setBranchId(CastUtil.toInteger((Number)  m.get(p + "branchId" + s)));
    return mo;
  }

  // select by primary key

  public app.daos.InvoiceVO selectByPK(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.InvoiceVO vo = new app.daos.InvoiceVO();
    vo.setId(id);
    return this.sqlSession.selectOne("bc.invoice.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.InvoiceVO> selectByExample(final app.daos.primitives.AbstractInvoiceVO example, final InvoiceOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractInvoiceVO, InvoiceOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("bc.invoice.selectByExample", dwo);
  }

  public Cursor<app.daos.InvoiceVO> selectByExampleCursor(final app.daos.primitives.AbstractInvoiceVO example, final InvoiceOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractInvoiceVO, InvoiceOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.InvoiceVO>(this.sqlSession.selectCursor("bc.invoice.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.InvoiceVO> selectByCriteria(final InvoiceDAO.InvoiceTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.InvoiceVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "bc.invoice.selectByCriteria");
  }

  // select parent(s) by FKs

  public SelectParentBranchPhase selectParentBranchOf(final InvoiceVO vo) {
    return new SelectParentBranchPhase(vo);
  }

  public class SelectParentBranchPhase {

    private InvoiceVO vo;

    SelectParentBranchPhase(final InvoiceVO vo) {
      this.vo = vo;
    }

    public SelectParentBranchFromBranchIdPhase fromBranchId() {
      return new SelectParentBranchFromBranchIdPhase(this.vo);
    }

  }

  public class SelectParentBranchFromBranchIdPhase {

    private InvoiceVO vo;

    SelectParentBranchFromBranchIdPhase(final InvoiceVO vo) {
      this.vo = vo;
    }

    public BranchVO toId() {
      return branchDAO.selectByPK(this.vo.branchId);
    }

  }

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.InvoiceVO insert(final app.daos.primitives.AbstractInvoiceVO vo) {
    String id = "bc.invoice.insert";
    this.sqlSession.insert(id, vo);
    app.daos.InvoiceVO mo = new app.daos.InvoiceVO();
    mo.setId(vo.getId());
    mo.setAmount(vo.getAmount());
    mo.setBranchId(vo.getBranchId());
    return mo;
  }

  // update by PK

  public int update(final app.daos.InvoiceVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("bc.invoice.updateByPK", vo);
  }

  // delete by PK

  public int delete(final app.daos.InvoiceVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.delete("bc.invoice.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final app.daos.primitives.AbstractInvoiceVO example, final app.daos.primitives.AbstractInvoiceVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractInvoiceVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractInvoiceVO>(example, updateValues);
    return this.sqlSession.update("bc.invoice.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final app.daos.primitives.AbstractInvoiceVO example) {
    return this.sqlSession.delete("bc.invoice.deleteByExample", example);
  }

  // DAO ordering

  public enum InvoiceOrderBy implements OrderBy {

    ID("invoice", "id", true), //
    ID$DESC("invoice", "id", false), //
    AMOUNT("invoice", "amount", true), //
    AMOUNT$DESC("invoice", "amount", false), //
    BRANCH_ID("invoice", "branch_id", true), //
    BRANCH_ID$DESC("invoice", "branch_id", false);

    private InvoiceOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static InvoiceTable newTable() {
    return new InvoiceTable();
  }

  public static InvoiceTable newTable(final String alias) {
    return new InvoiceTable(alias);
  }

  public static class InvoiceTable extends Table {

    // Properties

    public NumberColumn id;
    public NumberColumn amount;
    public NumberColumn branchId;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.id, this.amount, this.branchId);
    }

    // Constructors

    InvoiceTable() {
      super(null, null, "invoice", "Table", null);
      initialize();
    }

    InvoiceTable(final String alias) {
      super(null, null, "invoice", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      this.id = new NumberColumn(this, "id", "id", "int4", 10, 0);
      super.columns.add(this.id);
      this.amount = new NumberColumn(this, "amount", "amount", "int4", 10, 0);
      super.columns.add(this.amount);
      this.branchId = new NumberColumn(this, "branch_id", "branchId", "int4", 10, 0);
      super.columns.add(this.branchId);
    }

  }

}
