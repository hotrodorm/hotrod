// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractCharsVO;
import app.daos.CharsVO;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.LiveSQLMapper;
import org.hotrod.runtime.livesql.util.CastUtil;
import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.Name;
import org.hotrod.runtime.livesql.metadata.View;

import org.hotrod.runtime.livesql.queries.LiveSQLContext;
import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class CharsDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private LiveSQLMapper liveSQLMapper;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  @Autowired
  private DataSource dataSource;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  private LiveSQLContext context;

  @Value("${use.plain.jdbc:false}")
  private boolean usePlainJDBC;

  @PostConstruct
  public void initializeContext() {
    this.context = new LiveSQLContext(this.liveSQLDialect, this.sqlSession, this.liveSQLMapper, this.usePlainJDBC, this.dataSource);
  }

  // Row Parser

  public app.daos.CharsVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.CharsVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.CharsVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.CharsVO mo = this.applicationContext.getBean(app.daos.CharsVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setId(CastUtil.toInteger((Number) m.get(p + "id" + s)));
    mo.setVc1((java.lang.String) m.get(p + "vc1" + s));
    mo.setVc2((java.lang.String) m.get(p + "vc2" + s));
    mo.setVc3((java.lang.String) m.get(p + "vc3" + s));
    mo.setVc4((java.lang.String) m.get(p + "vc4" + s));
    mo.setVc5((java.lang.String) m.get(p + "vc5" + s));
    mo.setVc6((java.lang.String) m.get(p + "vc6" + s));
    mo.setVc7((java.lang.String) m.get(p + "vc7" + s));
    mo.setCha1((java.lang.String) m.get(p + "cha1" + s));
    mo.setCha2((java.lang.String) m.get(p + "cha2" + s));
    mo.setCha3((java.lang.String) m.get(p + "cha3" + s));
    mo.setClo1((java.lang.String) m.get(p + "clo1" + s));
    mo.setClo2((java.lang.String) m.get(p + "clo2" + s));
    mo.setClo3((java.lang.String) m.get(p + "clo3" + s));
    mo.setClo4((java.lang.String) m.get(p + "clo4" + s));
    mo.setClo5((java.lang.String) m.get(p + "clo5" + s));
    mo.setClo6((java.lang.String) m.get(p + "clo6" + s));
    mo.setClo7((java.lang.String) m.get(p + "clo7" + s));
    return mo;
  }

  // select by primary key

  public app.daos.CharsVO select(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.CharsVO vo = new app.daos.CharsVO();
    vo.setId(id);
    return this.sqlSession.selectOne("mappers.chars.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.CharsVO> select(final app.daos.primitives.AbstractCharsVO example, final CharsOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractCharsVO, CharsOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.chars.selectByExample", dwo);
  }

  public Cursor<app.daos.CharsVO> selectCursor(final app.daos.primitives.AbstractCharsVO example, final CharsOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractCharsVO, CharsOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.CharsVO>(this.sqlSession.selectCursor("mappers.chars.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.CharsVO> select(final CharsDAO.CharsTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.CharsVO>(this.context, "mappers.chars.selectByCriteria",
        from, predicate);
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.CharsVO insert(final app.daos.primitives.AbstractCharsVO vo) {
    String id = "mappers.chars.insert";
    this.sqlSession.insert(id, vo);
    app.daos.CharsVO mo = springBeanObjectFactory.create(app.daos.CharsVO.class);
    mo.setId(vo.getId());
    mo.setVc1(vo.getVc1());
    mo.setVc2(vo.getVc2());
    mo.setVc3(vo.getVc3());
    mo.setVc4(vo.getVc4());
    mo.setVc5(vo.getVc5());
    mo.setVc6(vo.getVc6());
    mo.setVc7(vo.getVc7());
    mo.setCha1(vo.getCha1());
    mo.setCha2(vo.getCha2());
    mo.setCha3(vo.getCha3());
    mo.setClo1(vo.getClo1());
    mo.setClo2(vo.getClo2());
    mo.setClo3(vo.getClo3());
    mo.setClo4(vo.getClo4());
    mo.setClo5(vo.getClo5());
    mo.setClo6(vo.getClo6());
    mo.setClo7(vo.getClo7());
    return mo;
  }

  // update by PK

  public int update(final app.daos.CharsVO vo) {
    if (vo.getId() == null) return 0;
    return this.sqlSession.update("mappers.chars.updateByPK", vo);
  }

  // delete by PK

  public int delete(final java.lang.Integer id) {
    if (id == null) return 0;
    app.daos.CharsVO vo = new app.daos.CharsVO();
    vo.setId(id);
    if (vo.getId() == null) return 0;
    return this.sqlSession.delete("mappers.chars.deleteByPK", vo);
  }

  // update by example

  public int update(final app.daos.primitives.AbstractCharsVO example, final app.daos.primitives.AbstractCharsVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractCharsVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractCharsVO>(example, updateValues);
    return this.sqlSession.update("mappers.chars.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractCharsVO updateValues, final CharsDAO.CharsTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("\"ID\"", updateValues.getId());
    if (updateValues.getVc1() != null) values.put("\"VC1\"", updateValues.getVc1());
    if (updateValues.getVc2() != null) values.put("\"VC2\"", updateValues.getVc2());
    if (updateValues.getVc3() != null) values.put("\"VC3\"", updateValues.getVc3());
    if (updateValues.getVc4() != null) values.put("\"VC4\"", updateValues.getVc4());
    if (updateValues.getVc5() != null) values.put("\"VC5\"", updateValues.getVc5());
    if (updateValues.getVc6() != null) values.put("\"VC6\"", updateValues.getVc6());
    if (updateValues.getVc7() != null) values.put("\"VC7\"", updateValues.getVc7());
    if (updateValues.getCha1() != null) values.put("\"CHA1\"", updateValues.getCha1());
    if (updateValues.getCha2() != null) values.put("\"CHA2\"", updateValues.getCha2());
    if (updateValues.getCha3() != null) values.put("\"CHA3\"", updateValues.getCha3());
    if (updateValues.getClo1() != null) values.put("\"CLO1\"", updateValues.getClo1());
    if (updateValues.getClo2() != null) values.put("\"CLO2\"", updateValues.getClo2());
    if (updateValues.getClo3() != null) values.put("\"CLO3\"", updateValues.getClo3());
    if (updateValues.getClo4() != null) values.put("\"CLO4\"", updateValues.getClo4());
    if (updateValues.getClo5() != null) values.put("\"CLO5\"", updateValues.getClo5());
    if (updateValues.getClo6() != null) values.put("\"CLO6\"", updateValues.getClo6());
    if (updateValues.getClo7() != null) values.put("\"CLO7\"", updateValues.getClo7());
    return new UpdateSetCompletePhase(this.context, "mappers.chars.updateByCriteria", tableOrView,  predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractCharsVO example) {
    return this.sqlSession.delete("mappers.chars.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final CharsDAO.CharsTable from, final Predicate predicate) {
    return new DeleteWherePhase(this.context, "mappers.chars.deleteByCriteria", from, predicate);
  }

  // DAO ordering

  public enum CharsOrderBy implements OrderBy {

    ID("chars", "\"ID\"", true), //
    ID$DESC("chars", "\"ID\"", false), //
    VC1("chars", "\"VC1\"", true), //
    VC1$DESC("chars", "\"VC1\"", false), //
    VC1$CASEINSENSITIVE("chars", "lower(\"VC1\")", true), //
    VC1$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC1\"), \"VC1\"", true), //
    VC1$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC1\"), \"VC1\"", false), //
    VC1$DESC_CASEINSENSITIVE("chars", "lower(\"VC1\")", false), //
    VC1$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC1\"), \"VC1\"", false), //
    VC1$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC1\"), \"VC1\"", true), //
    VC2("chars", "\"VC2\"", true), //
    VC2$DESC("chars", "\"VC2\"", false), //
    VC2$CASEINSENSITIVE("chars", "lower(\"VC2\")", true), //
    VC2$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC2\"), \"VC2\"", true), //
    VC2$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC2\"), \"VC2\"", false), //
    VC2$DESC_CASEINSENSITIVE("chars", "lower(\"VC2\")", false), //
    VC2$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC2\"), \"VC2\"", false), //
    VC2$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC2\"), \"VC2\"", true), //
    VC3("chars", "\"VC3\"", true), //
    VC3$DESC("chars", "\"VC3\"", false), //
    VC3$CASEINSENSITIVE("chars", "lower(\"VC3\")", true), //
    VC3$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC3\"), \"VC3\"", true), //
    VC3$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC3\"), \"VC3\"", false), //
    VC3$DESC_CASEINSENSITIVE("chars", "lower(\"VC3\")", false), //
    VC3$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC3\"), \"VC3\"", false), //
    VC3$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC3\"), \"VC3\"", true), //
    VC4("chars", "\"VC4\"", true), //
    VC4$DESC("chars", "\"VC4\"", false), //
    VC4$CASEINSENSITIVE("chars", "lower(\"VC4\")", true), //
    VC4$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC4\"), \"VC4\"", true), //
    VC4$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC4\"), \"VC4\"", false), //
    VC4$DESC_CASEINSENSITIVE("chars", "lower(\"VC4\")", false), //
    VC4$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC4\"), \"VC4\"", false), //
    VC4$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC4\"), \"VC4\"", true), //
    VC5("chars", "\"VC5\"", true), //
    VC5$DESC("chars", "\"VC5\"", false), //
    VC5$CASEINSENSITIVE("chars", "lower(\"VC5\")", true), //
    VC5$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC5\"), \"VC5\"", true), //
    VC5$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC5\"), \"VC5\"", false), //
    VC5$DESC_CASEINSENSITIVE("chars", "lower(\"VC5\")", false), //
    VC5$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC5\"), \"VC5\"", false), //
    VC5$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC5\"), \"VC5\"", true), //
    VC6("chars", "\"VC6\"", true), //
    VC6$DESC("chars", "\"VC6\"", false), //
    VC6$CASEINSENSITIVE("chars", "lower(\"VC6\")", true), //
    VC6$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC6\"), \"VC6\"", true), //
    VC6$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC6\"), \"VC6\"", false), //
    VC6$DESC_CASEINSENSITIVE("chars", "lower(\"VC6\")", false), //
    VC6$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"VC6\"), \"VC6\"", false), //
    VC6$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"VC6\"), \"VC6\"", true), //
    VC7("chars", "\"VC7\"", true), //
    VC7$DESC("chars", "\"VC7\"", false), //
    CHA1("chars", "\"CHA1\"", true), //
    CHA1$DESC("chars", "\"CHA1\"", false), //
    CHA1$CASEINSENSITIVE("chars", "lower(\"CHA1\")", true), //
    CHA1$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CHA1\"), \"CHA1\"", true), //
    CHA1$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CHA1\"), \"CHA1\"", false), //
    CHA1$DESC_CASEINSENSITIVE("chars", "lower(\"CHA1\")", false), //
    CHA1$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CHA1\"), \"CHA1\"", false), //
    CHA1$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CHA1\"), \"CHA1\"", true), //
    CHA2("chars", "\"CHA2\"", true), //
    CHA2$DESC("chars", "\"CHA2\"", false), //
    CHA2$CASEINSENSITIVE("chars", "lower(\"CHA2\")", true), //
    CHA2$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CHA2\"), \"CHA2\"", true), //
    CHA2$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CHA2\"), \"CHA2\"", false), //
    CHA2$DESC_CASEINSENSITIVE("chars", "lower(\"CHA2\")", false), //
    CHA2$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CHA2\"), \"CHA2\"", false), //
    CHA2$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CHA2\"), \"CHA2\"", true), //
    CHA3("chars", "\"CHA3\"", true), //
    CHA3$DESC("chars", "\"CHA3\"", false), //
    CHA3$CASEINSENSITIVE("chars", "lower(\"CHA3\")", true), //
    CHA3$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CHA3\"), \"CHA3\"", true), //
    CHA3$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CHA3\"), \"CHA3\"", false), //
    CHA3$DESC_CASEINSENSITIVE("chars", "lower(\"CHA3\")", false), //
    CHA3$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CHA3\"), \"CHA3\"", false), //
    CHA3$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CHA3\"), \"CHA3\"", true), //
    CLO1("chars", "\"CLO1\"", true), //
    CLO1$DESC("chars", "\"CLO1\"", false), //
    CLO1$CASEINSENSITIVE("chars", "lower(\"CLO1\")", true), //
    CLO1$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO1\"), \"CLO1\"", true), //
    CLO1$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO1\"), \"CLO1\"", false), //
    CLO1$DESC_CASEINSENSITIVE("chars", "lower(\"CLO1\")", false), //
    CLO1$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO1\"), \"CLO1\"", false), //
    CLO1$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO1\"), \"CLO1\"", true), //
    CLO2("chars", "\"CLO2\"", true), //
    CLO2$DESC("chars", "\"CLO2\"", false), //
    CLO2$CASEINSENSITIVE("chars", "lower(\"CLO2\")", true), //
    CLO2$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO2\"), \"CLO2\"", true), //
    CLO2$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO2\"), \"CLO2\"", false), //
    CLO2$DESC_CASEINSENSITIVE("chars", "lower(\"CLO2\")", false), //
    CLO2$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO2\"), \"CLO2\"", false), //
    CLO2$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO2\"), \"CLO2\"", true), //
    CLO3("chars", "\"CLO3\"", true), //
    CLO3$DESC("chars", "\"CLO3\"", false), //
    CLO3$CASEINSENSITIVE("chars", "lower(\"CLO3\")", true), //
    CLO3$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO3\"), \"CLO3\"", true), //
    CLO3$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO3\"), \"CLO3\"", false), //
    CLO3$DESC_CASEINSENSITIVE("chars", "lower(\"CLO3\")", false), //
    CLO3$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO3\"), \"CLO3\"", false), //
    CLO3$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO3\"), \"CLO3\"", true), //
    CLO4("chars", "\"CLO4\"", true), //
    CLO4$DESC("chars", "\"CLO4\"", false), //
    CLO4$CASEINSENSITIVE("chars", "lower(\"CLO4\")", true), //
    CLO4$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO4\"), \"CLO4\"", true), //
    CLO4$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO4\"), \"CLO4\"", false), //
    CLO4$DESC_CASEINSENSITIVE("chars", "lower(\"CLO4\")", false), //
    CLO4$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO4\"), \"CLO4\"", false), //
    CLO4$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO4\"), \"CLO4\"", true), //
    CLO5("chars", "\"CLO5\"", true), //
    CLO5$DESC("chars", "\"CLO5\"", false), //
    CLO5$CASEINSENSITIVE("chars", "lower(\"CLO5\")", true), //
    CLO5$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO5\"), \"CLO5\"", true), //
    CLO5$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO5\"), \"CLO5\"", false), //
    CLO5$DESC_CASEINSENSITIVE("chars", "lower(\"CLO5\")", false), //
    CLO5$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO5\"), \"CLO5\"", false), //
    CLO5$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO5\"), \"CLO5\"", true), //
    CLO6("chars", "\"CLO6\"", true), //
    CLO6$DESC("chars", "\"CLO6\"", false), //
    CLO6$CASEINSENSITIVE("chars", "lower(\"CLO6\")", true), //
    CLO6$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO6\"), \"CLO6\"", true), //
    CLO6$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO6\"), \"CLO6\"", false), //
    CLO6$DESC_CASEINSENSITIVE("chars", "lower(\"CLO6\")", false), //
    CLO6$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO6\"), \"CLO6\"", false), //
    CLO6$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO6\"), \"CLO6\"", true), //
    CLO7("chars", "\"CLO7\"", true), //
    CLO7$DESC("chars", "\"CLO7\"", false), //
    CLO7$CASEINSENSITIVE("chars", "lower(\"CLO7\")", true), //
    CLO7$CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO7\"), \"CLO7\"", true), //
    CLO7$CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO7\"), \"CLO7\"", false), //
    CLO7$DESC_CASEINSENSITIVE("chars", "lower(\"CLO7\")", false), //
    CLO7$DESC_CASEINSENSITIVE_STABLE_FORWARD("chars", "lower(\"CLO7\"), \"CLO7\"", false), //
    CLO7$DESC_CASEINSENSITIVE_STABLE_REVERSE("chars", "lower(\"CLO7\"), \"CLO7\"", true);

    private CharsOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static CharsTable newTable() {
    return new CharsTable();
  }

  public static CharsTable newTable(final String alias) {
    return new CharsTable(alias);
  }

  public static class CharsTable extends Table {

    // Properties

    public final NumberColumn id = new NumberColumn(this, "ID", "id", "INTEGER", 32, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.Integer.class, null, null));
    public final StringColumn vc1 = new StringColumn(this, "VC1", "vc1", "CHARACTER VARYING", 100, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn vc2 = new StringColumn(this, "VC2", "vc2", "CHARACTER VARYING", 100, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn vc3 = new StringColumn(this, "VC3", "vc3", "CHARACTER VARYING", 100, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn vc4 = new StringColumn(this, "VC4", "vc4", "CHARACTER VARYING", 100, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn vc5 = new StringColumn(this, "VC5", "vc5", "CHARACTER VARYING", 100, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn vc6 = new StringColumn(this, "VC6", "vc6", "CHARACTER VARYING", 100, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn vc7 = new StringColumn(this, "VC7", "vc7", "VARCHAR_IGNORECASE", 100, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn cha1 = new StringColumn(this, "CHA1", "cha1", "CHARACTER", 100, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn cha2 = new StringColumn(this, "CHA2", "cha2", "CHARACTER", 100, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn cha3 = new StringColumn(this, "CHA3", "cha3", "CHARACTER", 100, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn clo1 = new StringColumn(this, "CLO1", "clo1", "CHARACTER LARGE OBJECT", 1000000, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn clo2 = new StringColumn(this, "CLO2", "clo2", "CHARACTER VARYING", 1000000, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn clo3 = new StringColumn(this, "CLO3", "clo3", "CHARACTER VARYING", 1000000, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn clo4 = new StringColumn(this, "CLO4", "clo4", "CHARACTER VARYING", 1000000, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn clo5 = new StringColumn(this, "CLO5", "clo5", "CHARACTER VARYING", 1000000, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn clo6 = new StringColumn(this, "CLO6", "clo6", "CHARACTER VARYING", 1000000, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));
    public final StringColumn clo7 = new StringColumn(this, "CLO7", "clo7", "CHARACTER LARGE OBJECT", 1000000, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.String.class, null, null));

    // Getters

    public AllColumns star() {
      return new AllColumns(this.id, this.vc1, this.vc2, this.vc3, this.vc4, this.vc5, this.vc6, this.vc7, this.cha1, this.cha2, this.cha3, this.clo1, this.clo2, this.clo3, this.clo4, this.clo5, this.clo6, this.clo7);
    }

    // Constructors

    CharsTable() {
      super(null, null, Name.of("CHARS", false), "Table", null);
      initialize();
    }

    CharsTable(final String alias) {
      super(null, null, Name.of("CHARS", false), "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      super.columns.add(this.id);
      super.columns.add(this.vc1);
      super.columns.add(this.vc2);
      super.columns.add(this.vc3);
      super.columns.add(this.vc4);
      super.columns.add(this.vc5);
      super.columns.add(this.vc6);
      super.columns.add(this.vc7);
      super.columns.add(this.cha1);
      super.columns.add(this.cha2);
      super.columns.add(this.cha3);
      super.columns.add(this.clo1);
      super.columns.add(this.clo2);
      super.columns.add(this.clo3);
      super.columns.add(this.clo4);
      super.columns.add(this.clo5);
      super.columns.add(this.clo6);
      super.columns.add(this.clo7);
    }

  }

}
