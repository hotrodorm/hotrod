// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractBranchVO;
import app.daos.BranchVO;
import app.daos.AccountVO;
import app.daos.primitives.AccountDAO.AccountOrderBy;
import app.daos.primitives.AccountDAO;

import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.TypeHandler;
import org.hotrod.runtime.converter.TypeConverter;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.LiveSQLMapper;
import org.hotrod.runtime.livesql.util.CastUtil;
import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.Name;
import org.hotrod.runtime.livesql.metadata.View;

import org.hotrod.runtime.livesql.queries.LiveSQLContext;
import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class BranchDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Lazy
  @Autowired
  private AccountDAO accountDAO;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private LiveSQLMapper liveSQLMapper;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  @Autowired
  private DataSource dataSource;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  private LiveSQLContext context;

  @Value("${use.plain.jdbc:false}")
  private boolean usePlainJDBC;

  @PostConstruct
  public void initializeContext() {
    this.context = new LiveSQLContext(this.liveSQLDialect, this.sqlSession, this.liveSQLMapper, this.usePlainJDBC, this.dataSource);
  }

  // Row Parser

  public app.daos.BranchVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.BranchVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.BranchVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.BranchVO mo = this.applicationContext.getBean(app.daos.BranchVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setId(CastUtil.toInteger((Number) m.get(p + "id" + s)));
    mo.setName((java.lang.String) m.get(p + "name" + s));
    mo.setRegion((java.lang.String) m.get(p + "region" + s));
    mo.setIsVip(new app.IntegerBooleanConverter().decode((java.lang.Integer) m.get(p + "isVip" + s), this.sqlSession.getConnection()));
    return mo;
  }

  // select by primary key

  public app.daos.BranchVO select(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.BranchVO vo = new app.daos.BranchVO();
    vo.setId(id);
    return this.sqlSession.selectOne("mappers.branch.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.BranchVO> select(final app.daos.primitives.AbstractBranchVO example, final BranchOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractBranchVO, BranchOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.branch.selectByExample", dwo);
  }

  public Cursor<app.daos.BranchVO> selectCursor(final app.daos.primitives.AbstractBranchVO example, final BranchOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractBranchVO, BranchOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.BranchVO>(this.sqlSession.selectCursor("mappers.branch.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.BranchVO> select(final BranchDAO.BranchTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.BranchVO>(this.context, "mappers.branch.selectByCriteria",
        from, predicate);
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs

  public SelectChildrenAccountPhase selectChildrenAccountOf(final BranchVO vo) {
    return new SelectChildrenAccountPhase(vo);
  }

  public class SelectChildrenAccountPhase {

    private BranchVO vo;

    SelectChildrenAccountPhase(final BranchVO vo) {
      this.vo = vo;
    }

    public SelectChildrenAccountFromIdPhase fromId() {
      return new SelectChildrenAccountFromIdPhase(this.vo);
    }

  }

  public class SelectChildrenAccountFromIdPhase {

    private BranchVO vo;

    SelectChildrenAccountFromIdPhase(final BranchVO vo) {
      this.vo = vo;
    }

    public List<AccountVO> toBranchId(final AccountOrderBy... orderBies) {
      AccountVO example = new AccountVO();
      example.setBranchId(this.vo.getId());
      return accountDAO.select(example, orderBies);
    }

    public Cursor<AccountVO> cursorToBranchId(final AccountOrderBy... orderBies) {
      AccountVO example = new AccountVO();
      example.setBranchId(this.vo.getId());
      return accountDAO.selectCursor(example, orderBies);
    }

  }

  // insert

  public app.daos.BranchVO insert(final app.daos.primitives.AbstractBranchVO vo) {
    return insert(vo, false);
  }

  public app.daos.BranchVO insert(final app.daos.primitives.AbstractBranchVO vo, final boolean retrieveDefaults) {
    String id = retrieveDefaults ? "mappers.branch.insertRetrievingDefaults" : "mappers.branch.insert";
    int rows = this.sqlSession.insert(id, vo);
    app.daos.BranchVO mo = springBeanObjectFactory.create(app.daos.BranchVO.class);
    mo.setId(vo.getId());
    mo.setName(vo.getName());
    mo.setRegion(vo.getRegion());
    mo.setIsVip(vo.getIsVip());
    return mo;
  }

  // update by PK

  public int update(final app.daos.BranchVO vo) {
    if (vo.getId() == null) return 0;
    return this.sqlSession.update("mappers.branch.updateByPK", vo);
  }

  // delete by PK

  public int delete(final java.lang.Integer id) {
    if (id == null) return 0;
    app.daos.BranchVO vo = new app.daos.BranchVO();
    vo.setId(id);
    if (vo.getId() == null) return 0;
    return this.sqlSession.delete("mappers.branch.deleteByPK", vo);
  }

  // update by example

  public int update(final app.daos.primitives.AbstractBranchVO example, final app.daos.primitives.AbstractBranchVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractBranchVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractBranchVO>(example, updateValues);
    return this.sqlSession.update("mappers.branch.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractBranchVO updateValues, final BranchDAO.BranchTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("\"ID\"", updateValues.getId());
    if (updateValues.getName() != null) values.put("\"NaMe\"", updateValues.getName());
    if (updateValues.getRegion() != null) values.put("\"REGION\"", updateValues.getRegion());
    if (updateValues.getIsVip() != null) values.put("\"IS_VIP\"", updateValues.getIsVip());
    return new UpdateSetCompletePhase(this.context, "mappers.branch.updateByCriteria", tableOrView,  predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractBranchVO example) {
    return this.sqlSession.delete("mappers.branch.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final BranchDAO.BranchTable from, final Predicate predicate) {
    return new DeleteWherePhase(this.context, "mappers.branch.deleteByCriteria", from, predicate);
  }

  // DAO ordering

  public enum BranchOrderBy implements OrderBy {

    ID("branch", "\"ID\"", true), //
    ID$DESC("branch", "\"ID\"", false), //
    NAME("branch", "\"NaMe\"", true), //
    NAME$DESC("branch", "\"NaMe\"", false), //
    NAME$CASEINSENSITIVE("branch", "lower(\"NaMe\")", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("branch", "lower(\"NaMe\"), \"NaMe\"", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("branch", "lower(\"NaMe\"), \"NaMe\"", false), //
    NAME$DESC_CASEINSENSITIVE("branch", "lower(\"NaMe\")", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("branch", "lower(\"NaMe\"), \"NaMe\"", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("branch", "lower(\"NaMe\"), \"NaMe\"", true), //
    REGION("branch", "\"REGION\"", true), //
    REGION$DESC("branch", "\"REGION\"", false), //
    REGION$CASEINSENSITIVE("branch", "lower(\"REGION\")", true), //
    REGION$CASEINSENSITIVE_STABLE_FORWARD("branch", "lower(\"REGION\"), \"REGION\"", true), //
    REGION$CASEINSENSITIVE_STABLE_REVERSE("branch", "lower(\"REGION\"), \"REGION\"", false), //
    REGION$DESC_CASEINSENSITIVE("branch", "lower(\"REGION\")", false), //
    REGION$DESC_CASEINSENSITIVE_STABLE_FORWARD("branch", "lower(\"REGION\"), \"REGION\"", false), //
    REGION$DESC_CASEINSENSITIVE_STABLE_REVERSE("branch", "lower(\"REGION\"), \"REGION\"", true), //
    IS_VIP("branch", "\"IS_VIP\"", true), //
    IS_VIP$DESC("branch", "\"IS_VIP\"", false);

    private BranchOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static BranchTable newTable() {
    return new BranchTable();
  }

  public static BranchTable newTable(final String alias) {
    return new BranchTable(alias);
  }

  public static class BranchTable extends Table {

    // Properties

    public final NumberColumn id = new NumberColumn(this, "ID", "id", "NUMBER", 6, 0, java.lang.Integer.class, null, null);
    public final StringColumn name = new StringColumn(this, "NaMe", "name", "VARCHAR2", 20, null, java.lang.String.class, null, null);
    public final StringColumn region = new StringColumn(this, "REGION", "region", "VARCHAR2", 10, null, java.lang.String.class, null, null);
    public final BooleanColumn isVip = new BooleanColumn(this, "IS_VIP", "isVip", "NUMBER", 6, 0, java.lang.Boolean.class, java.lang.Integer.class, new app.IntegerBooleanConverter());

    // Getters

    public AllColumns star() {
      return new AllColumns(this.id, this.name, this.region, this.isVip);
    }

    // Constructors

    BranchTable() {
      super(null, null, Name.of("BRANCH", false), "Table", null);
      initialize();
    }

    BranchTable(final String alias) {
      super(null, null, Name.of("BRANCH", false), "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      super.columns.add(this.id);
      super.columns.add(this.name);
      super.columns.add(this.region);
      super.columns.add(this.isVip);
    }

  }

  // TypeHandler for column IS_VIP using Converter app.IntegerBooleanConverter.

  public static class IsVipTypeHandler implements TypeHandler<java.lang.Boolean> {

    private static final TypeConverter<java.lang.Integer, java.lang.Boolean> CONVERTER = new app.IntegerBooleanConverter();

    @Override
    public java.lang.Boolean getResult(final ResultSet rs, final String columnName) throws SQLException {
      java.lang.Integer raw = rs.getInt(columnName);
      if (rs.wasNull()) {
        raw = null;
      }
      return CONVERTER.decode(raw, rs.getStatement().getConnection());
    }

    @Override
    public java.lang.Boolean getResult(final ResultSet rs, final int columnIndex) throws SQLException {
      java.lang.Integer raw = rs.getInt(columnIndex);
      if (rs.wasNull()) {
        raw = null;
      }
      return CONVERTER.decode(raw, rs.getStatement().getConnection());
    }

    @Override
    public java.lang.Boolean getResult(final CallableStatement cs, final int columnIndex) throws SQLException {
      java.lang.Integer raw = cs.getInt(columnIndex);
      if (cs.wasNull()) {
        raw = null;
      }
      return CONVERTER.decode(raw, cs.getConnection());
    }

    @Override
    public void setParameter(final PreparedStatement ps, final int columnIndex, final java.lang.Boolean value, final JdbcType jdbcType)
        throws SQLException {
      java.lang.Integer raw = CONVERTER.encode(value, ps.getConnection());
      if (raw == null) {
        ps.setNull(columnIndex, jdbcType.TYPE_CODE);
      } else {
        ps.setInt(columnIndex, raw);
      }
    }

  }

}
