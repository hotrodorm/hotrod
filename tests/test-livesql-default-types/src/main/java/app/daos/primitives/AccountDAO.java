// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractAccountVO;
import app.daos.AccountVO;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.LiveSQLMapper;
import org.hotrod.runtime.livesql.util.CastUtil;
import javax.annotation.PostConstruct;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.Name;
import org.hotrod.runtime.livesql.metadata.View;

import org.hotrod.runtime.livesql.queries.LiveSQLContext;
import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class AccountDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private LiveSQLMapper liveSQLMapper;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  private LiveSQLContext context;

  @PostConstruct
  public void initializeContext() {
    this.context = new LiveSQLContext(this.liveSQLDialect, this.sqlSession, this.liveSQLMapper);
  }

  // Row Parser

  public app.daos.AccountVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.AccountVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.AccountVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.AccountVO mo = this.applicationContext.getBean(app.daos.AccountVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setPaymentNumber(CastUtil.toDouble((Number) m.get(p + "paymentNumber" + s)));
    mo.setDateGranted((java.sql.Date) m.get(p + "dateGranted" + s));
    mo.setAmountGranted(CastUtil.toDouble((Number) m.get(p + "amountGranted" + s)));
    mo.setInterestRate(CastUtil.toDouble((Number) m.get(p + "interestRate" + s)));
    mo.setPaymentDate((java.sql.Date) m.get(p + "paymentDate" + s));
    mo.setPaymentAmount(CastUtil.toDouble((Number) m.get(p + "paymentAmount" + s)));
    return mo;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<app.daos.AccountVO> select(final app.daos.primitives.AbstractAccountVO example, final AccountOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractAccountVO, AccountOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.account.selectByExample", dwo);
  }

  public Cursor<app.daos.AccountVO> selectCursor(final app.daos.primitives.AbstractAccountVO example, final AccountOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractAccountVO, AccountOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.AccountVO>(this.sqlSession.selectCursor("mappers.account.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.AccountVO> select(final AccountDAO.AccountTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.AccountVO>(this.context, "mappers.account.selectByCriteria",
        from, predicate);
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.AccountVO insert(final app.daos.primitives.AbstractAccountVO vo) {
    String id = "mappers.account.insert";
    this.sqlSession.insert(id, vo);
    app.daos.AccountVO mo = springBeanObjectFactory.create(app.daos.AccountVO.class);
    mo.setPaymentNumber(vo.getPaymentNumber());
    mo.setDateGranted(vo.getDateGranted());
    mo.setAmountGranted(vo.getAmountGranted());
    mo.setInterestRate(vo.getInterestRate());
    mo.setPaymentDate(vo.getPaymentDate());
    mo.setPaymentAmount(vo.getPaymentAmount());
    return mo;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int update(final app.daos.primitives.AbstractAccountVO example, final app.daos.primitives.AbstractAccountVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractAccountVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractAccountVO>(example, updateValues);
    return this.sqlSession.update("mappers.account.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractAccountVO updateValues, final AccountDAO.AccountTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getPaymentNumber() != null) values.put("\"payment_number\"", updateValues.getPaymentNumber());
    if (updateValues.getDateGranted() != null) values.put("\"date_granted\"", updateValues.getDateGranted());
    if (updateValues.getAmountGranted() != null) values.put("\"amount_granted\"", updateValues.getAmountGranted());
    if (updateValues.getInterestRate() != null) values.put("\"interest_rate\"", updateValues.getInterestRate());
    if (updateValues.getPaymentDate() != null) values.put("\"payment_date\"", updateValues.getPaymentDate());
    if (updateValues.getPaymentAmount() != null) values.put("\"payment_amount\"", updateValues.getPaymentAmount());
    return new UpdateSetCompletePhase(this.context, "mappers.account.updateByCriteria", tableOrView,  predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractAccountVO example) {
    return this.sqlSession.delete("mappers.account.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final AccountDAO.AccountTable from, final Predicate predicate) {
    return new DeleteWherePhase(this.context, "mappers.account.deleteByCriteria", from, predicate);
  }

  // DAO ordering

  public enum AccountOrderBy implements OrderBy {

    PAYMENT_NUMBER("account", "\"payment_number\"", true), //
    PAYMENT_NUMBER$DESC("account", "\"payment_number\"", false), //
    DATE_GRANTED("account", "\"date_granted\"", true), //
    DATE_GRANTED$DESC("account", "\"date_granted\"", false), //
    AMOUNT_GRANTED("account", "\"amount_granted\"", true), //
    AMOUNT_GRANTED$DESC("account", "\"amount_granted\"", false), //
    INTEREST_RATE("account", "\"interest_rate\"", true), //
    INTEREST_RATE$DESC("account", "\"interest_rate\"", false), //
    PAYMENT_DATE("account", "\"payment_date\"", true), //
    PAYMENT_DATE$DESC("account", "\"payment_date\"", false), //
    PAYMENT_AMOUNT("account", "\"payment_amount\"", true), //
    PAYMENT_AMOUNT$DESC("account", "\"payment_amount\"", false);

    private AccountOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static AccountTable newTable() {
    return new AccountTable();
  }

  public static AccountTable newTable(final String alias) {
    return new AccountTable(alias);
  }

  public static class AccountTable extends Table {

    // Properties

    public NumberColumn paymentNumber;
    public DateTimeColumn dateGranted;
    public NumberColumn amountGranted;
    public NumberColumn interestRate;
    public DateTimeColumn paymentDate;
    public NumberColumn paymentAmount;

    // Getters

    public AllColumns star() {
      return new AllColumns(this.paymentNumber, this.dateGranted, this.amountGranted, this.interestRate, this.paymentDate, this.paymentAmount);
    }

    // Constructors

    AccountTable() {
      super(null, null, Name.of("account", false), "Table", null);
      initialize();
    }

    AccountTable(final String alias) {
      super(null, null, Name.of("account", false), "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      this.paymentNumber = new NumberColumn(this, "payment_number", "paymentNumber", "float", 53, null);
      super.columns.add(this.paymentNumber);
      this.dateGranted = new DateTimeColumn(this, "date_granted", "dateGranted", "date", 10, 0);
      super.columns.add(this.dateGranted);
      this.amountGranted = new NumberColumn(this, "amount_granted", "amountGranted", "float", 53, null);
      super.columns.add(this.amountGranted);
      this.interestRate = new NumberColumn(this, "interest_rate", "interestRate", "float", 53, null);
      super.columns.add(this.interestRate);
      this.paymentDate = new DateTimeColumn(this, "payment_date", "paymentDate", "date", 10, 0);
      super.columns.add(this.paymentDate);
      this.paymentAmount = new NumberColumn(this, "payment_amount", "paymentAmount", "float", 53, null);
      super.columns.add(this.paymentAmount);
    }

  }

}
