// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractAccountVO;
import app.daos.AccountVO;
import app.daos.BranchVO;
import app.daos.primitives.BranchDAO;
import app.daos.primitives.AccountDAO;
import app.daos.primitives.AccountDAO.AccountOrderBy;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.LiveSQLMapper;
import org.hotrod.runtime.livesql.util.CastUtil;
import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.Name;
import org.hotrod.runtime.livesql.metadata.View;

import org.hotrod.runtime.livesql.queries.LiveSQLContext;
import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class AccountDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Lazy
  @Autowired
  private BranchDAO branchDAO;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private LiveSQLMapper liveSQLMapper;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  @Autowired
  private DataSource dataSource;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  private LiveSQLContext context;

  @Value("${use.plain.jdbc:false}")
  private boolean usePlainJDBC;

  @PostConstruct
  public void initializeContext() {
    this.context = new LiveSQLContext(this.liveSQLDialect, this.sqlSession, this.liveSQLMapper, this.usePlainJDBC, this.dataSource);
  }

  // Row Parser

  public app.daos.AccountVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.AccountVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.AccountVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.AccountVO mo = this.applicationContext.getBean(app.daos.AccountVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setId(CastUtil.toInteger((Number) m.get(p + "id" + s)));
    mo.setParentId(CastUtil.toInteger((Number) m.get(p + "parentId" + s)));
    mo.setBranchId(CastUtil.toInteger((Number) m.get(p + "branchId" + s)));
    return mo;
  }

  // select by primary key

  public app.daos.AccountVO select(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.AccountVO vo = new app.daos.AccountVO();
    vo.setId(id);
    return this.sqlSession.selectOne("mappers.account.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.AccountVO> select(final app.daos.primitives.AbstractAccountVO example, final AccountOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractAccountVO, AccountOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.account.selectByExample", dwo);
  }

  public Cursor<app.daos.AccountVO> selectCursor(final app.daos.primitives.AbstractAccountVO example, final AccountOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractAccountVO, AccountOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.AccountVO>(this.sqlSession.selectCursor("mappers.account.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.AccountVO> select(final AccountDAO.AccountTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.AccountVO>(this.context, "mappers.account.selectByCriteria",
        from, predicate);
  }

  // select parent(s) by FKs

  public SelectParentBranchPhase selectParentBranchOf(final AccountVO vo) {
    return new SelectParentBranchPhase(vo);
  }

  public class SelectParentBranchPhase {

    private AccountVO vo;

    SelectParentBranchPhase(final AccountVO vo) {
      this.vo = vo;
    }

    public SelectParentBranchFromBranchIdPhase fromBranchId() {
      return new SelectParentBranchFromBranchIdPhase(this.vo);
    }

  }

  public class SelectParentBranchFromBranchIdPhase {

    private AccountVO vo;

    SelectParentBranchFromBranchIdPhase(final AccountVO vo) {
      this.vo = vo;
    }

    public BranchVO toId() {
      return branchDAO.select(this.vo.branchId);
    }

  }

  public SelectParentAccountPhase selectParentAccountOf(final AccountVO vo) {
    return new SelectParentAccountPhase(vo);
  }

  public class SelectParentAccountPhase {

    private AccountVO vo;

    SelectParentAccountPhase(final AccountVO vo) {
      this.vo = vo;
    }

    public SelectParentAccountFromParentIdPhase fromParentId() {
      return new SelectParentAccountFromParentIdPhase(this.vo);
    }

  }

  public class SelectParentAccountFromParentIdPhase {

    private AccountVO vo;

    SelectParentAccountFromParentIdPhase(final AccountVO vo) {
      this.vo = vo;
    }

    public AccountVO toId() {
      return select(this.vo.parentId);
    }

  }

  // select children by FKs

  public SelectChildrenAccountPhase selectChildrenAccountOf(final AccountVO vo) {
    return new SelectChildrenAccountPhase(vo);
  }

  public class SelectChildrenAccountPhase {

    private AccountVO vo;

    SelectChildrenAccountPhase(final AccountVO vo) {
      this.vo = vo;
    }

    public SelectChildrenAccountFromIdPhase fromId() {
      return new SelectChildrenAccountFromIdPhase(this.vo);
    }

  }

  public class SelectChildrenAccountFromIdPhase {

    private AccountVO vo;

    SelectChildrenAccountFromIdPhase(final AccountVO vo) {
      this.vo = vo;
    }

    public List<AccountVO> toParentId(final AccountOrderBy... orderBies) {
      AccountVO example = new AccountVO();
      example.setParentId(this.vo.getId());
      return select(example, orderBies);
    }

    public Cursor<AccountVO> cursorToParentId(final AccountOrderBy... orderBies) {
      AccountVO example = new AccountVO();
      example.setParentId(this.vo.getId());
      return selectCursor(example, orderBies);
    }

  }

  // insert

  public app.daos.AccountVO insert(final app.daos.primitives.AbstractAccountVO vo) {
    String id = "mappers.account.insert";
    this.sqlSession.insert(id, vo);
    app.daos.AccountVO mo = springBeanObjectFactory.create(app.daos.AccountVO.class);
    mo.setId(vo.getId());
    mo.setParentId(vo.getParentId());
    mo.setBranchId(vo.getBranchId());
    return mo;
  }

  // update by PK

  public int update(final app.daos.AccountVO vo) {
    if (vo.getId() == null) return 0;
    return this.sqlSession.update("mappers.account.updateByPK", vo);
  }

  // delete by PK

  public int delete(final java.lang.Integer id) {
    if (id == null) return 0;
    app.daos.AccountVO vo = new app.daos.AccountVO();
    vo.setId(id);
    if (vo.getId() == null) return 0;
    return this.sqlSession.delete("mappers.account.deleteByPK", vo);
  }

  // update by example

  public int update(final app.daos.primitives.AbstractAccountVO example, final app.daos.primitives.AbstractAccountVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractAccountVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractAccountVO>(example, updateValues);
    return this.sqlSession.update("mappers.account.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractAccountVO updateValues, final AccountDAO.AccountTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("\"ID\"", updateValues.getId());
    if (updateValues.getParentId() != null) values.put("\"PARENT_ID\"", updateValues.getParentId());
    if (updateValues.getBranchId() != null) values.put("\"BRANCH_ID\"", updateValues.getBranchId());
    return new UpdateSetCompletePhase(this.context, "mappers.account.updateByCriteria", tableOrView,  predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractAccountVO example) {
    return this.sqlSession.delete("mappers.account.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final AccountDAO.AccountTable from, final Predicate predicate) {
    return new DeleteWherePhase(this.context, "mappers.account.deleteByCriteria", from, predicate);
  }

  // DAO ordering

  public enum AccountOrderBy implements OrderBy {

    ID("account", "\"ID\"", true), //
    ID$DESC("account", "\"ID\"", false), //
    PARENT_ID("account", "\"PARENT_ID\"", true), //
    PARENT_ID$DESC("account", "\"PARENT_ID\"", false), //
    BRANCH_ID("account", "\"BRANCH_ID\"", true), //
    BRANCH_ID$DESC("account", "\"BRANCH_ID\"", false);

    private AccountOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static AccountTable newTable() {
    return new AccountTable();
  }

  public static AccountTable newTable(final String alias) {
    return new AccountTable(alias);
  }

  public static class AccountTable extends Table {

    // Properties

    public final NumberColumn id = new NumberColumn(this, "ID", "id", "INTEGER", 32, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.Integer.class, null, null));
    public final NumberColumn parentId = new NumberColumn(this, "PARENT_ID", "parentId", "INTEGER", 32, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.Integer.class, null, null));
    public final NumberColumn branchId = new NumberColumn(this, "BRANCH_ID", "branchId", "INTEGER", 32, 0, new org.hotrod.runtime.livesql.expressions.TypeHandler(java.lang.Integer.class, null, null));

    // Getters

    public AllColumns star() {
      return new AllColumns(this.id, this.parentId, this.branchId);
    }

    // Constructors

    AccountTable() {
      super(null, null, Name.of("ACCOUNT", false), "Table", null);
      initialize();
    }

    AccountTable(final String alias) {
      super(null, null, Name.of("ACCOUNT", false), "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      super.columns.add(this.id);
      super.columns.add(this.parentId);
      super.columns.add(this.branchId);
    }

  }

}
