// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractOtherVO;
import app.daos.OtherVO;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.util.CastUtil;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class OtherDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  // Row Parser

  public app.daos.OtherVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.OtherVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.OtherVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.OtherVO mo = this.applicationContext.getBean(app.daos.OtherVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setId(CastUtil.toInteger((Number) m.get(p + "id" + s)));
    mo.setBoo1((java.lang.Boolean) m.get(p + "boo1" + s));
    mo.setBoo2((java.lang.Boolean) m.get(p + "boo2" + s));
    mo.setBoo3((java.lang.Boolean) m.get(p + "boo3" + s));
    mo.setOth1(m.get(p + "oth1" + s));
    mo.setIdn1((byte[]) m.get(p + "idn1" + s));
    mo.setGeo1((byte[]) m.get(p + "geo1" + s));
    return mo;
  }

  // select by primary key

  public app.daos.OtherVO select(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.OtherVO vo = new app.daos.OtherVO();
    vo.setId(id);
    return this.sqlSession.selectOne("mappers.other.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.OtherVO> select(final app.daos.primitives.AbstractOtherVO example, final OtherOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractOtherVO, OtherOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.other.selectByExample", dwo);
  }

  public Cursor<app.daos.OtherVO> selectCursor(final app.daos.primitives.AbstractOtherVO example, final OtherOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractOtherVO, OtherOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.OtherVO>(this.sqlSession.selectCursor("mappers.other.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.OtherVO> select(final OtherDAO.OtherTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.OtherVO>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "mappers.other.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.OtherVO insert(final app.daos.primitives.AbstractOtherVO vo) {
    String id = "mappers.other.insert";
    this.sqlSession.insert(id, vo);
    app.daos.OtherVO mo = new app.daos.OtherVO();
    mo.setId(vo.getId());
    mo.setBoo1(vo.getBoo1());
    mo.setBoo2(vo.getBoo2());
    mo.setBoo3(vo.getBoo3());
    mo.setOth1(vo.getOth1());
    mo.setIdn1(vo.getIdn1());
    mo.setGeo1(vo.getGeo1());
    return mo;
  }

  // update by PK

  public int update(final app.daos.OtherVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("mappers.other.updateByPK", vo);
  }

  // delete by PK

  public int delete(final java.lang.Integer id) {
    if (id == null) return 0;
    app.daos.OtherVO vo = new app.daos.OtherVO();
    vo.setId(id);
    if (vo.id == null) return 0;
    return this.sqlSession.delete("mappers.other.deleteByPK", vo);
  }

  // update by example

  public int update(final app.daos.primitives.AbstractOtherVO example, final app.daos.primitives.AbstractOtherVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractOtherVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractOtherVO>(example, updateValues);
    return this.sqlSession.update("mappers.other.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractOtherVO updateValues, final OtherDAO.OtherTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("id", updateValues.getId());
    if (updateValues.getBoo1() != null) values.put("boo1", updateValues.getBoo1());
    if (updateValues.getBoo2() != null) values.put("boo2", updateValues.getBoo2());
    if (updateValues.getBoo3() != null) values.put("boo3", updateValues.getBoo3());
    if (updateValues.getOth1() != null) values.put("oth1", updateValues.getOth1());
    if (updateValues.getIdn1() != null) values.put("idn1", updateValues.getIdn1());
    if (updateValues.getGeo1() != null) values.put("geo1", updateValues.getGeo1());
    return new UpdateSetCompletePhase(tableOrView, this.liveSQLDialect, this.sqlSession,
      "mappers.other.updateByCriteria", predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractOtherVO example) {
    return this.sqlSession.delete("mappers.other.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final OtherDAO.OtherTable from, final Predicate predicate) {
    return new DeleteWherePhase(from, this.liveSQLDialect, this.sqlSession,
      "mappers.other.deleteByCriteria", predicate);
  }

  // DAO ordering

  public enum OtherOrderBy implements OrderBy {

    ID("public.other", "id", true), //
    ID$DESC("public.other", "id", false), //
    BOO1("public.other", "boo1", true), //
    BOO1$DESC("public.other", "boo1", false), //
    BOO2("public.other", "boo2", true), //
    BOO2$DESC("public.other", "boo2", false), //
    BOO3("public.other", "boo3", true), //
    BOO3$DESC("public.other", "boo3", false), //
    OTH1("public.other", "oth1", true), //
    OTH1$DESC("public.other", "oth1", false), //
    IDN1("public.other", "idn1", true), //
    IDN1$DESC("public.other", "idn1", false), //
    GEO1("public.other", "geo1", true), //
    GEO1$DESC("public.other", "geo1", false);

    private OtherOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static OtherTable newTable() {
    return new OtherTable();
  }

  public static OtherTable newTable(final String alias) {
    return new OtherTable(alias);
  }

  public static class OtherTable extends Table {

    // Properties

    public NumberColumn id;
    public BooleanColumn boo1;
    public BooleanColumn boo2;
    public BooleanColumn boo3;
    public ObjectColumn oth1;
    public ByteArrayColumn idn1;
    public ByteArrayColumn geo1;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.id, this.boo1, this.boo2, this.boo3, this.oth1, this.idn1, this.geo1);
    }

    // Constructors

    OtherTable() {
      super(null, "PUBLIC", "OTHER", "Table", null);
      initialize();
    }

    OtherTable(final String alias) {
      super(null, "PUBLIC", "OTHER", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      this.id = new NumberColumn(this, "ID", "id", "INTEGER", 32, 0);
      super.columns.add(this.id);
      this.boo1 = new BooleanColumn(this, "BOO1", "boo1", "BOOLEAN", 1, 0);
      super.columns.add(this.boo1);
      this.boo2 = new BooleanColumn(this, "BOO2", "boo2", "BOOLEAN", 1, 0);
      super.columns.add(this.boo2);
      this.boo3 = new BooleanColumn(this, "BOO3", "boo3", "BOOLEAN", 1, 0);
      super.columns.add(this.boo3);
      this.oth1 = new ObjectColumn(this, "OTH1", "oth1", "JAVA_OBJECT", 1048576, 0);
      super.columns.add(this.oth1);
      this.idn1 = new ByteArrayColumn(this, "IDN1", "idn1", "UUID", 16, 0);
      super.columns.add(this.idn1);
      this.geo1 = new ByteArrayColumn(this, "GEO1", "geo1", "GEOMETRY", 1048576, 0);
      super.columns.add(this.geo1);
    }

  }

}
