// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractOtherVO;
import app.daos.OtherVO;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.util.CastUtil;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class OtherDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // Row Parser

  public app.daos.OtherVO parseRow(Map<String, Object> m) {
    app.daos.OtherVO mo = this.applicationContext.getBean(app.daos.OtherVO.class);
    mo.setGeo1(m.get("geo1"));
    mo.setGeo2(m.get("geo2"));
    mo.setGeo3(m.get("geo3"));
    mo.setGeo4(m.get("geo4"));
    mo.setGeo5(m.get("geo5"));
    mo.setGeo6(m.get("geo6"));
    mo.setGeo7(m.get("geo7"));
    mo.setNet1(m.get("net1"));
    mo.setNet2(m.get("net2"));
    mo.setNet3(m.get("net3"));
    mo.setUui1(m.get("uui1"));
    mo.setJso1(m.get("jso1"));
    mo.setJso2(m.get("jso2"));
    mo.setArr1(m.get("arr1"));
    mo.setArr2(m.get("arr2"));
    mo.setArr3(m.get("arr3"));
    mo.setCom1(m.get("com1"));
    mo.setRan1(m.get("ran1"));
    mo.setRan2(m.get("ran2"));
    mo.setRan3(m.get("ran3"));
    mo.setRan4(m.get("ran4"));
    mo.setRan5(m.get("ran5"));
    mo.setRan6(m.get("ran6"));
    return mo;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<app.daos.OtherVO> select(final app.daos.primitives.AbstractOtherVO example, final OtherOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractOtherVO, OtherOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.other.selectByExample", dwo);
  }

  public Cursor<app.daos.OtherVO> selectCursor(final app.daos.primitives.AbstractOtherVO example, final OtherOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractOtherVO, OtherOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.OtherVO>(this.sqlSession.selectCursor("mappers.other.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.OtherVO> select(final OtherDAO.OtherTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.OtherVO>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "mappers.other.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.OtherVO insert(final app.daos.primitives.AbstractOtherVO vo) {
    String id = "mappers.other.insert";
    this.sqlSession.insert(id, vo);
    app.daos.OtherVO mo = new app.daos.OtherVO();
    mo.setGeo1(vo.getGeo1());
    mo.setGeo2(vo.getGeo2());
    mo.setGeo3(vo.getGeo3());
    mo.setGeo4(vo.getGeo4());
    mo.setGeo5(vo.getGeo5());
    mo.setGeo6(vo.getGeo6());
    mo.setGeo7(vo.getGeo7());
    mo.setNet1(vo.getNet1());
    mo.setNet2(vo.getNet2());
    mo.setNet3(vo.getNet3());
    mo.setUui1(vo.getUui1());
    mo.setJso1(vo.getJso1());
    mo.setJso2(vo.getJso2());
    mo.setArr1(vo.getArr1());
    mo.setArr2(vo.getArr2());
    mo.setArr3(vo.getArr3());
    mo.setCom1(vo.getCom1());
    mo.setRan1(vo.getRan1());
    mo.setRan2(vo.getRan2());
    mo.setRan3(vo.getRan3());
    mo.setRan4(vo.getRan4());
    mo.setRan5(vo.getRan5());
    mo.setRan6(vo.getRan6());
    return mo;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int update(final app.daos.primitives.AbstractOtherVO example, final app.daos.primitives.AbstractOtherVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractOtherVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractOtherVO>(example, updateValues);
    return this.sqlSession.update("mappers.other.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractOtherVO updateValues, final OtherDAO.OtherTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getGeo1() != null) values.put("geo1", updateValues.getGeo1());
    if (updateValues.getGeo2() != null) values.put("geo2", updateValues.getGeo2());
    if (updateValues.getGeo3() != null) values.put("geo3", updateValues.getGeo3());
    if (updateValues.getGeo4() != null) values.put("geo4", updateValues.getGeo4());
    if (updateValues.getGeo5() != null) values.put("geo5", updateValues.getGeo5());
    if (updateValues.getGeo6() != null) values.put("geo6", updateValues.getGeo6());
    if (updateValues.getGeo7() != null) values.put("geo7", updateValues.getGeo7());
    if (updateValues.getNet1() != null) values.put("net1", updateValues.getNet1());
    if (updateValues.getNet2() != null) values.put("net2", updateValues.getNet2());
    if (updateValues.getNet3() != null) values.put("net3", updateValues.getNet3());
    if (updateValues.getUui1() != null) values.put("uui1", updateValues.getUui1());
    if (updateValues.getJso1() != null) values.put("jso1", updateValues.getJso1());
    if (updateValues.getJso2() != null) values.put("jso2", updateValues.getJso2());
    if (updateValues.getArr1() != null) values.put("arr1", updateValues.getArr1());
    if (updateValues.getArr2() != null) values.put("arr2", updateValues.getArr2());
    if (updateValues.getArr3() != null) values.put("arr3", updateValues.getArr3());
    if (updateValues.getCom1() != null) values.put("com1", updateValues.getCom1());
    if (updateValues.getRan1() != null) values.put("ran1", updateValues.getRan1());
    if (updateValues.getRan2() != null) values.put("ran2", updateValues.getRan2());
    if (updateValues.getRan3() != null) values.put("ran3", updateValues.getRan3());
    if (updateValues.getRan4() != null) values.put("ran4", updateValues.getRan4());
    if (updateValues.getRan5() != null) values.put("ran5", updateValues.getRan5());
    if (updateValues.getRan6() != null) values.put("ran6", updateValues.getRan6());
    return new UpdateSetCompletePhase(tableOrView, this.liveSQLDialect, this.sqlSession,
      "mappers.other.updateByCriteria", predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractOtherVO example) {
    return this.sqlSession.delete("mappers.other.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final OtherDAO.OtherTable from, final Predicate predicate) {
    return new DeleteWherePhase(from, this.liveSQLDialect, this.sqlSession,
      "mappers.other.deleteByCriteria", predicate);
  }

  // DAO ordering

  public enum OtherOrderBy implements OrderBy {

    GEO1("public.other", "geo1", true), //
    GEO1$DESC("public.other", "geo1", false), //
    GEO2("public.other", "geo2", true), //
    GEO2$DESC("public.other", "geo2", false), //
    GEO3("public.other", "geo3", true), //
    GEO3$DESC("public.other", "geo3", false), //
    GEO4("public.other", "geo4", true), //
    GEO4$DESC("public.other", "geo4", false), //
    GEO5("public.other", "geo5", true), //
    GEO5$DESC("public.other", "geo5", false), //
    GEO6("public.other", "geo6", true), //
    GEO6$DESC("public.other", "geo6", false), //
    GEO7("public.other", "geo7", true), //
    GEO7$DESC("public.other", "geo7", false), //
    NET1("public.other", "net1", true), //
    NET1$DESC("public.other", "net1", false), //
    NET2("public.other", "net2", true), //
    NET2$DESC("public.other", "net2", false), //
    NET3("public.other", "net3", true), //
    NET3$DESC("public.other", "net3", false), //
    UUI1("public.other", "uui1", true), //
    UUI1$DESC("public.other", "uui1", false), //
    JSO1("public.other", "jso1", true), //
    JSO1$DESC("public.other", "jso1", false), //
    JSO2("public.other", "jso2", true), //
    JSO2$DESC("public.other", "jso2", false), //
    ARR1("public.other", "arr1", true), //
    ARR1$DESC("public.other", "arr1", false), //
    ARR2("public.other", "arr2", true), //
    ARR2$DESC("public.other", "arr2", false), //
    ARR3("public.other", "arr3", true), //
    ARR3$DESC("public.other", "arr3", false), //
    COM1("public.other", "com1", true), //
    COM1$DESC("public.other", "com1", false), //
    RAN1("public.other", "ran1", true), //
    RAN1$DESC("public.other", "ran1", false), //
    RAN2("public.other", "ran2", true), //
    RAN2$DESC("public.other", "ran2", false), //
    RAN3("public.other", "ran3", true), //
    RAN3$DESC("public.other", "ran3", false), //
    RAN4("public.other", "ran4", true), //
    RAN4$DESC("public.other", "ran4", false), //
    RAN5("public.other", "ran5", true), //
    RAN5$DESC("public.other", "ran5", false), //
    RAN6("public.other", "ran6", true), //
    RAN6$DESC("public.other", "ran6", false);

    private OtherOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static OtherTable newTable() {
    return new OtherTable();
  }

  public static OtherTable newTable(final String alias) {
    return new OtherTable(alias);
  }

  public static class OtherTable extends Table {

    // Properties

    public ObjectColumn geo1;
    public ObjectColumn geo2;
    public ObjectColumn geo3;
    public ObjectColumn geo4;
    public ObjectColumn geo5;
    public ObjectColumn geo6;
    public ObjectColumn geo7;
    public ObjectColumn net1;
    public ObjectColumn net2;
    public ObjectColumn net3;
    public ObjectColumn uui1;
    public ObjectColumn jso1;
    public ObjectColumn jso2;
    public ObjectColumn arr1;
    public ObjectColumn arr2;
    public ObjectColumn arr3;
    public ObjectColumn com1;
    public ObjectColumn ran1;
    public ObjectColumn ran2;
    public ObjectColumn ran3;
    public ObjectColumn ran4;
    public ObjectColumn ran5;
    public ObjectColumn ran6;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.geo1, this.geo2, this.geo3, this.geo4, this.geo5, this.geo6, this.geo7, this.net1, this.net2, this.net3, this.uui1, this.jso1, this.jso2, this.arr1, this.arr2, this.arr3, this.com1, this.ran1, this.ran2, this.ran3, this.ran4, this.ran5, this.ran6);
    }

    // Constructors

    OtherTable() {
      super(null, "public", "other", "Table", null);
      initialize();
    }

    OtherTable(final String alias) {
      super(null, "public", "other", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      this.geo1 = new ObjectColumn(this, "geo1", "geo1", "point", 2147483647, 0);
      super.columns.add(this.geo1);
      this.geo2 = new ObjectColumn(this, "geo2", "geo2", "line", 2147483647, 0);
      super.columns.add(this.geo2);
      this.geo3 = new ObjectColumn(this, "geo3", "geo3", "lseg", 2147483647, 0);
      super.columns.add(this.geo3);
      this.geo4 = new ObjectColumn(this, "geo4", "geo4", "box", 2147483647, 0);
      super.columns.add(this.geo4);
      this.geo5 = new ObjectColumn(this, "geo5", "geo5", "path", 2147483647, 0);
      super.columns.add(this.geo5);
      this.geo6 = new ObjectColumn(this, "geo6", "geo6", "polygon", 2147483647, 0);
      super.columns.add(this.geo6);
      this.geo7 = new ObjectColumn(this, "geo7", "geo7", "circle", 2147483647, 0);
      super.columns.add(this.geo7);
      this.net1 = new ObjectColumn(this, "net1", "net1", "cidr", 2147483647, 0);
      super.columns.add(this.net1);
      this.net2 = new ObjectColumn(this, "net2", "net2", "inet", 2147483647, 0);
      super.columns.add(this.net2);
      this.net3 = new ObjectColumn(this, "net3", "net3", "macaddr", 2147483647, 0);
      super.columns.add(this.net3);
      this.uui1 = new ObjectColumn(this, "uui1", "uui1", "uuid", 2147483647, 0);
      super.columns.add(this.uui1);
      this.jso1 = new ObjectColumn(this, "jso1", "jso1", "json", 2147483647, 0);
      super.columns.add(this.jso1);
      this.jso2 = new ObjectColumn(this, "jso2", "jso2", "jsonb", 2147483647, 0);
      super.columns.add(this.jso2);
      this.arr1 = new ObjectColumn(this, "arr1", "arr1", "_int4", 10, 0);
      super.columns.add(this.arr1);
      this.arr2 = new ObjectColumn(this, "arr2", "arr2", "_bpchar", 1, 0);
      super.columns.add(this.arr2);
      this.arr3 = new ObjectColumn(this, "arr3", "arr3", "_int4", 10, 0);
      super.columns.add(this.arr3);
      this.com1 = new ObjectColumn(this, "com1", "com1", "complex", 2147483647, 0);
      super.columns.add(this.com1);
      this.ran1 = new ObjectColumn(this, "ran1", "ran1", "int4range", 2147483647, 0);
      super.columns.add(this.ran1);
      this.ran2 = new ObjectColumn(this, "ran2", "ran2", "int8range", 2147483647, 0);
      super.columns.add(this.ran2);
      this.ran3 = new ObjectColumn(this, "ran3", "ran3", "numrange", 2147483647, 0);
      super.columns.add(this.ran3);
      this.ran4 = new ObjectColumn(this, "ran4", "ran4", "tsrange", 2147483647, 0);
      super.columns.add(this.ran4);
      this.ran5 = new ObjectColumn(this, "ran5", "ran5", "tstzrange", 2147483647, 0);
      super.columns.add(this.ran5);
      this.ran6 = new ObjectColumn(this, "ran6", "ran6", "daterange", 2147483647, 0);
      super.columns.add(this.ran6);
    }

  }

}
