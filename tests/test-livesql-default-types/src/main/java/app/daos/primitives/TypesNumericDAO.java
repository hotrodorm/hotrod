// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractTypesNumericVO;
import app.daos.TypesNumericVO;

import java.lang.Override;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.spring.SpringBeanObjectFactory;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.LiveSQLMapper;
import org.hotrod.runtime.livesql.util.CastUtil;
import javax.annotation.PostConstruct;
import org.hotrod.runtime.livesql.metadata.Column;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.hotrod.runtime.livesql.queries.LiveSQLContext;
import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class TypesNumericDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  @Autowired
  private LiveSQLMapper liveSQLMapper;

  @Autowired
  private SpringBeanObjectFactory springBeanObjectFactory;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
    this.sqlSession.getConfiguration().setObjectFactory(this.springBeanObjectFactory);
  }

  private LiveSQLContext context;

  @PostConstruct
  public void initializeContext() {
    this.context = new LiveSQLContext(this.liveSQLDialect, this.sqlSession, this.liveSQLMapper);
  }

  // Row Parser

  public app.daos.TypesNumericVO parseRow(Map<String, Object> m) {
    return parseRow(m, null, null);
  }

  public app.daos.TypesNumericVO parseRow(Map<String, Object> m, String prefix) {
    return parseRow(m, prefix, null);
  }

  public app.daos.TypesNumericVO parseRow(Map<String, Object> m, String prefix, String suffix) {
    app.daos.TypesNumericVO mo = this.applicationContext.getBean(app.daos.TypesNumericVO.class);
    String p = prefix == null ? "": prefix;
    String s = suffix == null ? "": suffix;
    mo.setInt1(CastUtil.toShort((Number) m.get(p + "int1" + s)));
    mo.setInt2(CastUtil.toInteger((Number) m.get(p + "int2" + s)));
    mo.setInt3(CastUtil.toLong((Number) m.get(p + "int3" + s)));
    mo.setInt4(m.get(p + "int4" + s));
    mo.setInt5(CastUtil.toInteger((Number) m.get(p + "int5" + s)));
    mo.setInt6(CastUtil.toLong((Number) m.get(p + "int6" + s)));
    mo.setDec1(CastUtil.toBigDecimal((Number) m.get(p + "dec1" + s)));
    mo.setDec2(CastUtil.toBigDecimal((Number) m.get(p + "dec2" + s)));
    mo.setDec3(CastUtil.toByte((Number) m.get(p + "dec3" + s)));
    mo.setDec4(CastUtil.toShort((Number) m.get(p + "dec4" + s)));
    mo.setDec5(CastUtil.toInteger((Number) m.get(p + "dec5" + s)));
    mo.setDec6(CastUtil.toLong((Number) m.get(p + "dec6" + s)));
    mo.setDec7(CastUtil.toBigInteger((Number) m.get(p + "dec7" + s)));
    mo.setFlo1(CastUtil.toFloat((Number) m.get(p + "flo1" + s)));
    mo.setFlo2(CastUtil.toDouble((Number) m.get(p + "flo2" + s)));
    return mo;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<app.daos.TypesNumericVO> select(final app.daos.primitives.AbstractTypesNumericVO example, final TypesNumericOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractTypesNumericVO, TypesNumericOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.typesNumeric.selectByExample", dwo);
  }

  public Cursor<app.daos.TypesNumericVO> selectCursor(final app.daos.primitives.AbstractTypesNumericVO example, final TypesNumericOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractTypesNumericVO, TypesNumericOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.TypesNumericVO>(this.sqlSession.selectCursor("mappers.typesNumeric.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.TypesNumericVO> select(final TypesNumericDAO.TypesNumericTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.TypesNumericVO>(this.context, "mappers.typesNumeric.selectByCriteria",
        from, predicate);
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.TypesNumericVO insert(final app.daos.primitives.AbstractTypesNumericVO vo) {
    return insert(vo, false);
  }

  public app.daos.TypesNumericVO insert(final app.daos.primitives.AbstractTypesNumericVO vo, final boolean retrieveDefaults) {
    String id = retrieveDefaults ? "mappers.typesNumeric.insertRetrievingDefaults" : "mappers.typesNumeric.insert";
    int rows = this.sqlSession.insert(id, vo);
    app.daos.TypesNumericVO mo = springBeanObjectFactory.create(app.daos.TypesNumericVO.class);
    mo.setInt1(vo.getInt1());
    mo.setInt2(vo.getInt2());
    mo.setInt3(vo.getInt3());
    mo.setInt4(vo.getInt4());
    mo.setInt5(vo.getInt5());
    mo.setInt6(vo.getInt6());
    mo.setDec1(vo.getDec1());
    mo.setDec2(vo.getDec2());
    mo.setDec3(vo.getDec3());
    mo.setDec4(vo.getDec4());
    mo.setDec5(vo.getDec5());
    mo.setDec6(vo.getDec6());
    mo.setDec7(vo.getDec7());
    mo.setFlo1(vo.getFlo1());
    mo.setFlo2(vo.getFlo2());
    return mo;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int update(final app.daos.primitives.AbstractTypesNumericVO example, final app.daos.primitives.AbstractTypesNumericVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractTypesNumericVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractTypesNumericVO>(example, updateValues);
    return this.sqlSession.update("mappers.typesNumeric.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractTypesNumericVO updateValues, final TypesNumericDAO.TypesNumericTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getInt1() != null) values.put("int1", updateValues.getInt1());
    if (updateValues.getInt2() != null) values.put("int2", updateValues.getInt2());
    if (updateValues.getInt3() != null) values.put("int3", updateValues.getInt3());
    if (updateValues.getInt4() != null) values.put("int4", updateValues.getInt4());
    if (updateValues.getInt5() != null) values.put("int5", updateValues.getInt5());
    if (updateValues.getInt6() != null) values.put("int6", updateValues.getInt6());
    if (updateValues.getDec1() != null) values.put("dec1", updateValues.getDec1());
    if (updateValues.getDec2() != null) values.put("dec2", updateValues.getDec2());
    if (updateValues.getDec3() != null) values.put("dec3", updateValues.getDec3());
    if (updateValues.getDec4() != null) values.put("dec4", updateValues.getDec4());
    if (updateValues.getDec5() != null) values.put("dec5", updateValues.getDec5());
    if (updateValues.getDec6() != null) values.put("dec6", updateValues.getDec6());
    if (updateValues.getDec7() != null) values.put("dec7", updateValues.getDec7());
    if (updateValues.getFlo1() != null) values.put("flo1", updateValues.getFlo1());
    if (updateValues.getFlo2() != null) values.put("flo2", updateValues.getFlo2());
    return new UpdateSetCompletePhase(this.context, "mappers.typesNumeric.updateByCriteria", tableOrView,  predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractTypesNumericVO example) {
    return this.sqlSession.delete("mappers.typesNumeric.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final TypesNumericDAO.TypesNumericTable from, final Predicate predicate) {
    return new DeleteWherePhase(this.context, "mappers.typesNumeric.deleteByCriteria", from, predicate);
  }

  // DAO ordering

  public enum TypesNumericOrderBy implements OrderBy {

    INT1("types_numeric", "int1", true), //
    INT1$DESC("types_numeric", "int1", false), //
    INT2("types_numeric", "int2", true), //
    INT2$DESC("types_numeric", "int2", false), //
    INT3("types_numeric", "int3", true), //
    INT3$DESC("types_numeric", "int3", false), //
    INT4("types_numeric", "int4", true), //
    INT4$DESC("types_numeric", "int4", false), //
    INT5("types_numeric", "int5", true), //
    INT5$DESC("types_numeric", "int5", false), //
    INT6("types_numeric", "int6", true), //
    INT6$DESC("types_numeric", "int6", false), //
    DEC1("types_numeric", "dec1", true), //
    DEC1$DESC("types_numeric", "dec1", false), //
    DEC2("types_numeric", "dec2", true), //
    DEC2$DESC("types_numeric", "dec2", false), //
    DEC3("types_numeric", "dec3", true), //
    DEC3$DESC("types_numeric", "dec3", false), //
    DEC4("types_numeric", "dec4", true), //
    DEC4$DESC("types_numeric", "dec4", false), //
    DEC5("types_numeric", "dec5", true), //
    DEC5$DESC("types_numeric", "dec5", false), //
    DEC6("types_numeric", "dec6", true), //
    DEC6$DESC("types_numeric", "dec6", false), //
    DEC7("types_numeric", "dec7", true), //
    DEC7$DESC("types_numeric", "dec7", false), //
    FLO1("types_numeric", "flo1", true), //
    FLO1$DESC("types_numeric", "flo1", false), //
    FLO2("types_numeric", "flo2", true), //
    FLO2$DESC("types_numeric", "flo2", false);

    private TypesNumericOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static TypesNumericTable newTable() {
    return new TypesNumericTable();
  }

  public static TypesNumericTable newTable(final String alias) {
    return new TypesNumericTable(alias);
  }

  public static class TypesNumericTable extends Table {

    // Properties

    public NumberColumn int1;
    public NumberColumn int2;
    public NumberColumn int3;
    public ObjectColumn int4;
    public NumberColumn int5;
    public NumberColumn int6;
    public NumberColumn dec1;
    public NumberColumn dec2;
    public NumberColumn dec3;
    public NumberColumn dec4;
    public NumberColumn dec5;
    public NumberColumn dec6;
    public NumberColumn dec7;
    public NumberColumn flo1;
    public NumberColumn flo2;

    // Getters

    public AllColumns star() {
      return new AllColumns(this.int1, this.int2, this.int3, this.int4, this.int5, this.int6, this.dec1, this.dec2, this.dec3, this.dec4, this.dec5, this.dec6, this.dec7, this.flo1, this.flo2);
    }

    // Constructors

    TypesNumericTable() {
      super(null, null, "types_numeric", "Table", null);
      initialize();
    }

    TypesNumericTable(final String alias) {
      super(null, null, "types_numeric", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      super.columns = new ArrayList<>();
      this.int1 = new NumberColumn(this, "int1", "int1", "int2", 5, 0);
      super.columns.add(this.int1);
      this.int2 = new NumberColumn(this, "int2", "int2", "int4", 10, 0);
      super.columns.add(this.int2);
      this.int3 = new NumberColumn(this, "int3", "int3", "int8", 19, 0);
      super.columns.add(this.int3);
      this.int4 = new ObjectColumn(this, "int4", "int4", "smallserial", 5, 0);
      super.columns.add(this.int4);
      this.int5 = new NumberColumn(this, "int5", "int5", "serial", 10, 0);
      super.columns.add(this.int5);
      this.int6 = new NumberColumn(this, "int6", "int6", "bigserial", 19, 0);
      super.columns.add(this.int6);
      this.dec1 = new NumberColumn(this, "dec1", "dec1", "numeric", 12, 2);
      super.columns.add(this.dec1);
      this.dec2 = new NumberColumn(this, "dec2", "dec2", "numeric", 12, 2);
      super.columns.add(this.dec2);
      this.dec3 = new NumberColumn(this, "dec3", "dec3", "numeric", 2, 0);
      super.columns.add(this.dec3);
      this.dec4 = new NumberColumn(this, "dec4", "dec4", "numeric", 4, 0);
      super.columns.add(this.dec4);
      this.dec5 = new NumberColumn(this, "dec5", "dec5", "numeric", 8, 0);
      super.columns.add(this.dec5);
      this.dec6 = new NumberColumn(this, "dec6", "dec6", "numeric", 18, 0);
      super.columns.add(this.dec6);
      this.dec7 = new NumberColumn(this, "dec7", "dec7", "numeric", 100, 0);
      super.columns.add(this.dec7);
      this.flo1 = new NumberColumn(this, "flo1", "flo1", "float4", 8, 8);
      super.columns.add(this.flo1);
      this.flo2 = new NumberColumn(this, "flo2", "flo2", "float8", 17, 17);
      super.columns.add(this.flo2);
    }

  }

}
