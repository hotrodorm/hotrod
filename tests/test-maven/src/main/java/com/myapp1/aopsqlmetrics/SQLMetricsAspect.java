package com.myapp1.aopsqlmetrics;

import java.sql.PreparedStatement;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.nocrala.tools.lang.collector.listcollector.ListCollector;
import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class SQLMetricsAspect {

  private ThreadLocal<String> sql = new ThreadLocal<String>();

  @Autowired
  private SQLMetrics sqlMetrics;

  @Around(value = "execution(* org.apache.commons.dbcp.BasicDataSource.getConnection())")
  public Object measureGetConnection(final ProceedingJoinPoint joinPoint) throws Throwable {
    try {
      Object conn = joinPoint.proceed();

      AspectJProxyFactory proxyFactory = new AspectJProxyFactory(conn);
      proxyFactory.addAspect(this);
      Object proxyConn = proxyFactory.getProxy();

      return proxyConn;

    } catch (Throwable e) {
      throw e;
    }
  }

  @Around(value = "execution(* java.sql.Connection.prepareStatement(..)) && args(sql)")
  public Object measurePrepareStatement(final ProceedingJoinPoint joinPoint, final String sql) throws Throwable {
    try {
      this.sql.set(sql);
      Object ps = joinPoint.proceed();

      AspectJProxyFactory proxyFactory = new AspectJProxyFactory(ps);
      proxyFactory.addAspect(this);
      PreparedStatement proxyPS = proxyFactory.getProxy();

      return proxyPS;

    } catch (Throwable e) {
      throw e;
    }
  }

  // java.sql.PreparedStatement declared methods

  @Around(value = "execution(* java.sql.PreparedStatement.execute(..))")
  public Object adviceExecute(final ProceedingJoinPoint joinPoint) throws Throwable {
    return measureSQLExecution(joinPoint, this.sql.get());
  }

  @Around(value = "execution(* java.sql.PreparedStatement.executeLargeUpdate(..))")
  public Object adviceExecuteLargeUpdate(final ProceedingJoinPoint joinPoint) throws Throwable {
    return measureSQLExecution(joinPoint, this.sql.get());
  }

  @Around(value = "execution(* java.sql.PreparedStatement.executeQuery(..))")
  public Object adviceExecExecuteQuery(final ProceedingJoinPoint joinPoint) throws Throwable {
    return measureSQLExecution(joinPoint, this.sql.get());
  }

  @Around(value = "execution(* java.sql.PreparedStatement.executeUpdate(..))")
  public Object adviceExecuteUpdate(final ProceedingJoinPoint joinPoint) throws Throwable {
    return measureSQLExecution(joinPoint, this.sql.get());
  }

  // java.sql.Statement declared methods

  @Around(value = "execution(* java.sql.Statement.execute(..)) && args(sql)")
  public Object adviceExecute(final ProceedingJoinPoint joinPoint, final String sql) throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.execute(..)) && args(sql, autoGeneratedKeys)")
  public Object adviceExecute(final ProceedingJoinPoint joinPoint, final String sql, final int autoGeneratedKeys)
      throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.execute(..)) && args(sql, columnIndexes)")
  public Object adviceExecute(final ProceedingJoinPoint joinPoint, final String sql, final int[] columnIndexes)
      throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.execute(..)) && args(sql, columnNames)")
  public Object adviceExecute(final ProceedingJoinPoint joinPoint, final String sql, final String[] columnNames)
      throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  // TODO Check how batches work
  @Around(value = "execution(* java.sql.Statement.executeBatch(..))")
  public Object adviceExecuteBatch(final ProceedingJoinPoint joinPoint) throws Throwable {
    return measureSQLExecution(joinPoint, this.sql.get());
  }

  // TODO Check how batches work
  @Around(value = "execution(* java.sql.Statement.executeLargeBatch(..))")
  public Object adviceExecuteLargeBatch(final ProceedingJoinPoint joinPoint) throws Throwable {
    return measureSQLExecution(joinPoint, this.sql.get());
  }

  @Around(value = "execution(* java.sql.Statement.executeLargeUpdate(..)) && args(sql)")
  public Object adviceExecuteLargeUpdate(final ProceedingJoinPoint joinPoint, final String sql) throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.executeLargeUpdate(..)) && args(sql, autoGeneratedKeys)")
  public Object adviceExecuteLargeUpdateAK(final ProceedingJoinPoint joinPoint, final String sql,
      final int autoGeneratedKeys) throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.executeLargeUpdate(..)) && args(sql, columnIndexes)")
  public Object adviceExecuteLargeUpdate(final ProceedingJoinPoint joinPoint, final String sql,
      final int[] columnIndexes) throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.executeLargeUpdate(..)) && args(sql, columnNames)")
  public Object adviceExecuteLargeUpdate(final ProceedingJoinPoint joinPoint, final String sql,
      final String[] columnNames) throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.executeQuery(..)) && args(sql)")
  public Object adviceExecuteQuery(final ProceedingJoinPoint joinPoint, final String sql) throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.executeUpdate(..)) && args(sql)")
  public Object adviceExecuteUpdate(final ProceedingJoinPoint joinPoint, final String sql) throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.executeUpdate(..)) && args(sql, autoGeneratedKeys)")
  public Object adviceExecuteUpdateAK(final ProceedingJoinPoint joinPoint, final String sql,
      final int autoGeneratedKeys) throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.executeUpdate(..)) && args(sql, columnIndexes)")
  public Object adviceExecuteUpdate(final ProceedingJoinPoint joinPoint, final String sql, final int[] columnIndexes)
      throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  @Around(value = "execution(* java.sql.Statement.executeUpdate(..)) && args(sql, columnNames)")
  public Object adviceExecuteUpdate(final ProceedingJoinPoint joinPoint, final String sql, final String[] columnNames)
      throws Throwable {
    return measureSQLExecution(joinPoint, sql);
  }

  private Object measureSQLExecution(final ProceedingJoinPoint joinPoint, final String sql) throws Throwable {
    long start = System.currentTimeMillis();
    try {
      Object ps = joinPoint.proceed();
      long end = System.currentTimeMillis();
      this.sqlMetrics.record(sql, end - start, true);
      return ps;

    } catch (Throwable e) {
      long end = System.currentTimeMillis();
      this.sqlMetrics.record(sql, end - start, false);
      throw e;
    }
  }

  // Helpers

  public String toString() {
    return this.getClass().getName() + "[" + System.identityHashCode(this) + "]";
  }

  // Inner classes

  @Component("sqlMetrics")
  public static class SQLMetrics {

    private Map<String, StatementMetrics> metrics = new HashMap<String, StatementMetrics>();

    public synchronized void record(final String sql, final long elapsedTime, final boolean succeeded) {
      StatementMetrics sm = this.metrics.get(sql);
      if (sm == null) {
        sm = new StatementMetrics(sql);
        this.metrics.put(sql, sm);
      }
      sm.record(elapsedTime, succeeded);
    }

    public synchronized String render() {
      return this.metrics.values().stream().sorted((a, b) -> -Long.compare(a.getTimeAverage(), b.getTimeAverage()))
          .map(s -> "> " + s).collect(ListCollector.concat("\n"));
    }

  }

  public static class StatementMetrics {

    private String actualSQL;
    private String compactedSQL;

    private long minTime;
    private long maxTime;

    private long totalExecutions;
    private long executionErrors;
    private long sum;
    private long sumSQ;

    public StatementMetrics(final String sql) {
      this.actualSQL = sql;
      this.compactedSQL = compact(sql);

      this.minTime = 0;
      this.maxTime = 0;

      this.totalExecutions = 0;
      this.executionErrors = 0;
      this.sum = 0;
      this.sumSQ = 0;
    }

    public void record(final long elapsedTime, final boolean succeeded) {
      if (this.totalExecutions == 0 || elapsedTime < this.minTime) {
        this.minTime = elapsedTime;
      }
      if (this.totalExecutions == 0 || elapsedTime > this.maxTime) {
        this.maxTime = elapsedTime;
      }
      this.totalExecutions++;
      if (!succeeded) {
        this.executionErrors++;
      }
      this.sum += elapsedTime;
      this.sumSQ += elapsedTime * elapsedTime;
    }

    public String toString() {
      return "" + this.totalExecutions + " exe"
          + (this.executionErrors != 0 ? (" (" + this.executionErrors + " errors)") : "") + ", avg "
          + (this.sum / this.totalExecutions) + " ms, \u03c3 " + Math.round(this.getTimeStandardDeviation()) + " ["
          + this.minTime + "-" + this.maxTime + " ms] -- " + this.compactedSQL;
    }

    // Getters

    public String getActualSQL() {
      return actualSQL;
    }

    public String getCompactedSQL() {
      return compactedSQL;
    }

    public long getMinTime() {
      return minTime;
    }

    public long getMaxTime() {
      return maxTime;
    }

    public long getTotalExecutions() {
      return totalExecutions;
    }

    public long getExecutionErrors() {
      return executionErrors;
    }

    // Extra getters

    public long getTimeAverage() {
      return this.totalExecutions == 0 ? -1 : this.sum / this.totalExecutions;
    }

    public double getTimeStandardDeviation() {
      // https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm
      return this.totalExecutions < 2 ? 0
          : Math.sqrt( //
              (this.sumSQ - 1.0 * this.sum * this.sum / this.totalExecutions) //
                  / //
                  (this.totalExecutions - 0));
    }

    // Utility

    private String compact(final String txt) {
      return txt == null ? null
          : Arrays.stream(txt.split("\n")).map(s -> s.trim()).filter(s -> !s.isEmpty())
              .collect(Collectors.joining(" "));
    }

  }

}
