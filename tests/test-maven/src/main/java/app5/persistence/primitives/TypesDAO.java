// Autogenerated by HotRod -- Do not edit.

package app5.persistence.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app5.persistence.TypesVO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class TypesDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public app5.persistence.TypesVO selectByPK(final java.lang.Integer id) {
    if (id == null)
      return null;
    app5.persistence.TypesVO vo = new app5.persistence.TypesVO();
    vo.setId(id);
    return this.sqlSession.selectOne("app5.persistence.primitives.types.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app5.persistence.TypesVO> selectByExample(final app5.persistence.TypesVO example, final TypesOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.TypesVO, TypesOrderBy> dwo = //
        new DaoWithOrder<app5.persistence.TypesVO, TypesOrderBy>(example, orderBies);
    return this.sqlSession.selectList("app5.persistence.primitives.types.selectByExample", dwo);
  }

  public Cursor<app5.persistence.TypesVO> selectByExampleCursor(final app5.persistence.TypesVO example, final TypesOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.TypesVO, TypesOrderBy> dwo = //
        new DaoWithOrder<app5.persistence.TypesVO, TypesOrderBy>(example, orderBies);
    return new MyBatisCursor<app5.persistence.TypesVO>(this.sqlSession.selectCursor("app5.persistence.primitives.types.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app5.persistence.TypesVO> selectByCriteria(final TypesDAO.TypesTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app5.persistence.TypesVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "app5.persistence.primitives.types.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public int insert(final app5.persistence.TypesVO vo) {
    String id = "app5.persistence.primitives.types.insert";
    return this.sqlSession.insert(id, vo);
  }

  // update by PK

  public int update(final app5.persistence.TypesVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("app5.persistence.primitives.types.updateByPK", vo);
  }

  // delete by PK

  public int delete(final app5.persistence.TypesVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.delete("app5.persistence.primitives.types.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final app5.persistence.TypesVO example, final app5.persistence.TypesVO updateValues) {
    UpdateByExampleDao<app5.persistence.TypesVO> fvd = //
      new UpdateByExampleDao<app5.persistence.TypesVO>(example, updateValues);
    return this.sqlSession.update("app5.persistence.primitives.types.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final app5.persistence.TypesVO example) {
    return this.sqlSession.delete("app5.persistence.primitives.types.deleteByExample", example);
  }

  // DAO ordering

  public enum TypesOrderBy implements OrderBy {

    ID("types", "id", true), //
    ID$DESC("types", "id", false), //
    NUM1("types", "num1", true), //
    NUM1$DESC("types", "num1", false), //
    NUM2("types", "num2", true), //
    NUM2$DESC("types", "num2", false), //
    NUM3("types", "num3", true), //
    NUM3$DESC("types", "num3", false), //
    NUM4("types", "num4", true), //
    NUM4$DESC("types", "num4", false), //
    NUM5("types", "num5", true), //
    NUM5$DESC("types", "num5", false), //
    NUM6("types", "num6", true), //
    NUM6$DESC("types", "num6", false), //
    NUM7("types", "num7", true), //
    NUM7$DESC("types", "num7", false), //
    NUM8("types", "num8", true), //
    NUM8$DESC("types", "num8", false), //
    NUM9("types", "num9", true), //
    NUM9$DESC("types", "num9", false), //
    NUM10("types", "num10", true), //
    NUM10$DESC("types", "num10", false), //
    NUM11("types", "num11", true), //
    NUM11$DESC("types", "num11", false), //
    NUM12("types", "num12", true), //
    NUM12$DESC("types", "num12", false), //
    NUM20("types", "num20", true), //
    NUM20$DESC("types", "num20", false), //
    NUM21("types", "num21", true), //
    NUM21$DESC("types", "num21", false), //
    NUM22("types", "num22", true), //
    NUM22$DESC("types", "num22", false), //
    CHA1("types", "cha1", true), //
    CHA1$DESC("types", "cha1", false), //
    CHA1$CASEINSENSITIVE("types", "lower(cha1)", true), //
    CHA1$CASEINSENSITIVE_STABLE_FORWARD("types", "lower(cha1), cha1", true), //
    CHA1$CASEINSENSITIVE_STABLE_REVERSE("types", "lower(cha1), cha1", false), //
    CHA1$DESC_CASEINSENSITIVE("types", "lower(cha1)", false), //
    CHA1$DESC_CASEINSENSITIVE_STABLE_FORWARD("types", "lower(cha1), cha1", false), //
    CHA1$DESC_CASEINSENSITIVE_STABLE_REVERSE("types", "lower(cha1), cha1", true), //
    CHA2("types", "cha2", true), //
    CHA2$DESC("types", "cha2", false), //
    CHA2$CASEINSENSITIVE("types", "lower(cha2)", true), //
    CHA2$CASEINSENSITIVE_STABLE_FORWARD("types", "lower(cha2), cha2", true), //
    CHA2$CASEINSENSITIVE_STABLE_REVERSE("types", "lower(cha2), cha2", false), //
    CHA2$DESC_CASEINSENSITIVE("types", "lower(cha2)", false), //
    CHA2$DESC_CASEINSENSITIVE_STABLE_FORWARD("types", "lower(cha2), cha2", false), //
    CHA2$DESC_CASEINSENSITIVE_STABLE_REVERSE("types", "lower(cha2), cha2", true), //
    CHA3("types", "cha3", true), //
    CHA3$DESC("types", "cha3", false), //
    CHA3$CASEINSENSITIVE("types", "lower(cha3)", true), //
    CHA3$CASEINSENSITIVE_STABLE_FORWARD("types", "lower(cha3), cha3", true), //
    CHA3$CASEINSENSITIVE_STABLE_REVERSE("types", "lower(cha3), cha3", false), //
    CHA3$DESC_CASEINSENSITIVE("types", "lower(cha3)", false), //
    CHA3$DESC_CASEINSENSITIVE_STABLE_FORWARD("types", "lower(cha3), cha3", false), //
    CHA3$DESC_CASEINSENSITIVE_STABLE_REVERSE("types", "lower(cha3), cha3", true), //
    CHA4("types", "cha4", true), //
    CHA4$DESC("types", "cha4", false), //
    CHA4$CASEINSENSITIVE("types", "lower(cha4)", true), //
    CHA4$CASEINSENSITIVE_STABLE_FORWARD("types", "lower(cha4), cha4", true), //
    CHA4$CASEINSENSITIVE_STABLE_REVERSE("types", "lower(cha4), cha4", false), //
    CHA4$DESC_CASEINSENSITIVE("types", "lower(cha4)", false), //
    CHA4$DESC_CASEINSENSITIVE_STABLE_FORWARD("types", "lower(cha4), cha4", false), //
    CHA4$DESC_CASEINSENSITIVE_STABLE_REVERSE("types", "lower(cha4), cha4", true), //
    CHA5("types", "cha5", true), //
    CHA5$DESC("types", "cha5", false), //
    CHA5$CASEINSENSITIVE("types", "lower(cha5)", true), //
    CHA5$CASEINSENSITIVE_STABLE_FORWARD("types", "lower(cha5), cha5", true), //
    CHA5$CASEINSENSITIVE_STABLE_REVERSE("types", "lower(cha5), cha5", false), //
    CHA5$DESC_CASEINSENSITIVE("types", "lower(cha5)", false), //
    CHA5$DESC_CASEINSENSITIVE_STABLE_FORWARD("types", "lower(cha5), cha5", false), //
    CHA5$DESC_CASEINSENSITIVE_STABLE_REVERSE("types", "lower(cha5), cha5", true), //
    CHA6("types", "cha6", true), //
    CHA6$DESC("types", "cha6", false), //
    CHA7("types", "cha7", true), //
    CHA7$DESC("types", "cha7", false), //
    DAT1("types", "dat1", true), //
    DAT1$DESC("types", "dat1", false), //
    DAT2("types", "dat2", true), //
    DAT2$DESC("types", "dat2", false), //
    DAT3("types", "dat3", true), //
    DAT3$DESC("types", "dat3", false), //
    DAT4("types", "dat4", true), //
    DAT4$DESC("types", "dat4", false), //
    BIN1("types", "bin1", true), //
    BIN1$DESC("types", "bin1", false), //
    BIN2("types", "bin2", true), //
    BIN2$DESC("types", "bin2", false), //
    BIN3("types", "bin3", true), //
    BIN3$DESC("types", "bin3", false), //
    ITV2("types", "itv2", true), //
    ITV2$DESC("types", "itv2", false), //
    ITV4("types", "itv4", true), //
    ITV4$DESC("types", "itv4", false), //
    OTH2("types", "oth2", true), //
    OTH2$DESC("types", "oth2", false), //
    NAMES("types", "names", true), //
    NAMES$DESC("types", "names", false), //
    STU1("types", "stu1", true), //
    STU1$DESC("types", "stu1", false), //
    REF1("types", "ref1", true), //
    REF1$DESC("types", "ref1", false);

    private TypesOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static TypesTable newTable() {
    return new TypesTable();
  }

  public static TypesTable newTable(final String alias) {
    return new TypesTable(alias);
  }

  public static class TypesTable extends Table {

    // Properties

    public NumberColumn id;
    public NumberColumn num1;
    public NumberColumn num2;
    public NumberColumn num3;
    public NumberColumn num4;
    public NumberColumn num5;
    public NumberColumn num6;
    public NumberColumn num7;
    public NumberColumn num8;
    public NumberColumn num9;
    public NumberColumn num10;
    public NumberColumn num11;
    public NumberColumn num12;
    public NumberColumn num20;
    public NumberColumn num21;
    public NumberColumn num22;
    public StringColumn cha1;
    public StringColumn cha2;
    public StringColumn cha3;
    public ObjectColumn cha4;
    public ObjectColumn cha5;
    public StringColumn cha6;
    public ObjectColumn cha7;
    public DateTimeColumn dat1;
    public DateTimeColumn dat2;
    public DateTimeColumn dat3;
    public DateTimeColumn dat4;
    public ByteArrayColumn bin1;
    public ByteArrayColumn bin2;
    public ByteArrayColumn bin3;
    public ObjectColumn itv2;
    public ObjectColumn itv4;
    public ObjectColumn oth2;
    public ObjectColumn names;
    public ObjectColumn stu1;
    public ObjectColumn ref1;

    // Constructors

    TypesTable() {
      super(null, null, "TYPES", "Table", null);
      initialize();
    }

    TypesTable(final String alias) {
      super(null, null, "TYPES", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "ID", "id");
      this.num1 = new NumberColumn(this, "NUM1", "num1");
      this.num2 = new NumberColumn(this, "NUM2", "num2");
      this.num3 = new NumberColumn(this, "NUM3", "num3");
      this.num4 = new NumberColumn(this, "NUM4", "num4");
      this.num5 = new NumberColumn(this, "NUM5", "num5");
      this.num6 = new NumberColumn(this, "NUM6", "num6");
      this.num7 = new NumberColumn(this, "NUM7", "num7");
      this.num8 = new NumberColumn(this, "NUM8", "num8");
      this.num9 = new NumberColumn(this, "NUM9", "num9");
      this.num10 = new NumberColumn(this, "NUM10", "num10");
      this.num11 = new NumberColumn(this, "NUM11", "num11");
      this.num12 = new NumberColumn(this, "NUM12", "num12");
      this.num20 = new NumberColumn(this, "NUM20", "num20");
      this.num21 = new NumberColumn(this, "NUM21", "num21");
      this.num22 = new NumberColumn(this, "NUM22", "num22");
      this.cha1 = new StringColumn(this, "CHA1", "cha1");
      this.cha2 = new StringColumn(this, "CHA2", "cha2");
      this.cha3 = new StringColumn(this, "CHA3", "cha3");
      this.cha4 = new ObjectColumn(this, "CHA4", "cha4");
      this.cha5 = new ObjectColumn(this, "CHA5", "cha5");
      this.cha6 = new StringColumn(this, "CHA6", "cha6");
      this.cha7 = new ObjectColumn(this, "CHA7", "cha7");
      this.dat1 = new DateTimeColumn(this, "DAT1", "dat1");
      this.dat2 = new DateTimeColumn(this, "DAT2", "dat2");
      this.dat3 = new DateTimeColumn(this, "DAT3", "dat3");
      this.dat4 = new DateTimeColumn(this, "DAT4", "dat4");
      this.bin1 = new ByteArrayColumn(this, "BIN1", "bin1");
      this.bin2 = new ByteArrayColumn(this, "BIN2", "bin2");
      this.bin3 = new ByteArrayColumn(this, "BIN3", "bin3");
      this.itv2 = new ObjectColumn(this, "ITV2", "itv2");
      this.itv4 = new ObjectColumn(this, "ITV4", "itv4");
      this.oth2 = new ObjectColumn(this, "OTH2", "oth2");
      this.names = new ObjectColumn(this, "NAMES", "names");
      this.stu1 = new ObjectColumn(this, "STU1", "stu1");
      this.ref1 = new ObjectColumn(this, "REF1", "ref1");
    }

  }

}
