// Autogenerated by HotRod -- Do not edit.

package app5.persistence.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app5.persistence.AbcVO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class AbcDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<app5.persistence.AbcVO> selectByExample(final app5.persistence.AbcVO example, final AbcOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.AbcVO, AbcOrderBy> dwo = //
        new DaoWithOrder<app5.persistence.AbcVO, AbcOrderBy>(example, orderBies);
    return this.sqlSession.selectList("app5.persistence.primitives.abc.selectByExample", dwo);
  }

  public Cursor<app5.persistence.AbcVO> selectByExampleCursor(final app5.persistence.AbcVO example, final AbcOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.AbcVO, AbcOrderBy> dwo = //
        new DaoWithOrder<app5.persistence.AbcVO, AbcOrderBy>(example, orderBies);
    return new MyBatisCursor<app5.persistence.AbcVO>(this.sqlSession.selectCursor("app5.persistence.primitives.abc.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app5.persistence.AbcVO> selectByCriteria(final AbcDAO.AbcTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app5.persistence.AbcVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "app5.persistence.primitives.abc.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public int insert(final app5.persistence.AbcVO vo) {
    String id = "app5.persistence.primitives.abc.insert";
    return this.sqlSession.insert(id, vo);
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int updateByExample(final app5.persistence.AbcVO example, final app5.persistence.AbcVO updateValues) {
    UpdateByExampleDao<app5.persistence.AbcVO> fvd = //
      new UpdateByExampleDao<app5.persistence.AbcVO>(example, updateValues);
    return this.sqlSession.update("app5.persistence.primitives.abc.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final app5.persistence.AbcVO example) {
    return this.sqlSession.delete("app5.persistence.primitives.abc.deleteByExample", example);
  }

  // DAO ordering

  public enum AbcOrderBy implements OrderBy {

    DEF("abc", "def", true), //
    DEF$DESC("abc", "def", false), //
    GHI("abc", "ghi", true), //
    GHI$DESC("abc", "ghi", false), //
    GHI$CASEINSENSITIVE("abc", "lower(ghi)", true), //
    GHI$CASEINSENSITIVE_STABLE_FORWARD("abc", "lower(ghi), ghi", true), //
    GHI$CASEINSENSITIVE_STABLE_REVERSE("abc", "lower(ghi), ghi", false), //
    GHI$DESC_CASEINSENSITIVE("abc", "lower(ghi)", false), //
    GHI$DESC_CASEINSENSITIVE_STABLE_FORWARD("abc", "lower(ghi), ghi", false), //
    GHI$DESC_CASEINSENSITIVE_STABLE_REVERSE("abc", "lower(ghi), ghi", true);

    private AbcOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static AbcTable newTable() {
    return new AbcTable();
  }

  public static AbcTable newTable(final String alias) {
    return new AbcTable(alias);
  }

  public static class AbcTable extends Table {

    // Properties

    public NumberColumn def;
    public StringColumn ghi;

    // Constructors

    AbcTable() {
      super(null, null, "ABC", "Table", null);
      initialize();
    }

    AbcTable(final String alias) {
      super(null, null, "ABC", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.def = new NumberColumn(this, "DEF", "def");
      this.ghi = new StringColumn(this, "GHI", "ghi");
    }

  }

}
