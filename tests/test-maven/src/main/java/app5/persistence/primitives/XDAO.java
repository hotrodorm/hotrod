// Autogenerated by HotRod -- Do not edit.

package app5.persistence.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app5.persistence.XVO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class XDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<app5.persistence.XVO> selectByExample(final app5.persistence.XVO example, final XOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.XVO, XOrderBy> dwo = //
        new DaoWithOrder<app5.persistence.XVO, XOrderBy>(example, orderBies);
    return this.sqlSession.selectList("app5.persistence.primitives.x.selectByExample", dwo);
  }

  public Cursor<app5.persistence.XVO> selectByExampleCursor(final app5.persistence.XVO example, final XOrderBy... orderBies)
      {
    DaoWithOrder<app5.persistence.XVO, XOrderBy> dwo = //
        new DaoWithOrder<app5.persistence.XVO, XOrderBy>(example, orderBies);
    return new MyBatisCursor<app5.persistence.XVO>(this.sqlSession.selectCursor("app5.persistence.primitives.x.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app5.persistence.XVO> selectByCriteria(final XDAO.XTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app5.persistence.XVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "app5.persistence.primitives.x.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public int insert(final app5.persistence.XVO vo) {
    String id = "app5.persistence.primitives.x.insert";
    return this.sqlSession.insert(id, vo);
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int updateByExample(final app5.persistence.XVO example, final app5.persistence.XVO updateValues) {
    UpdateByExampleDao<app5.persistence.XVO> fvd = //
      new UpdateByExampleDao<app5.persistence.XVO>(example, updateValues);
    return this.sqlSession.update("app5.persistence.primitives.x.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final app5.persistence.XVO example) {
    return this.sqlSession.delete("app5.persistence.primitives.x.deleteByExample", example);
  }

  // DAO ordering

  public enum XOrderBy implements OrderBy {

    A("x", "a", true), //
    A$DESC("x", "a", false);

    private XOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static XTable newTable() {
    return new XTable();
  }

  public static XTable newTable(final String alias) {
    return new XTable(alias);
  }

  public static class XTable extends Table {

    // Properties

    public NumberColumn a;

    // Constructors

    XTable() {
      super(null, null, "X", "Table", null);
      initialize();
    }

    XTable(final String alias) {
      super(null, null, "X", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.a = new NumberColumn(this, "A", "a");
    }

  }

}
