// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractBranchVO;
import app.daos.BranchVO;
import app.daos.EmployeeVO;
import app.daos.primitives.EmployeeDAO.EmployeeOrderBy;
import app.daos.primitives.EmployeeDAO;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class BranchDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Lazy
  @Autowired
  private EmployeeDAO employeeDAO;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // Row Parser

  public static app.daos.BranchVO parseRow(Map<String, Object> m) {
    app.daos.BranchVO mo = new app.daos.BranchVO();
    mo.setBranchId((java.lang.Integer) m.get("branchId"));
    mo.setBranchName((java.lang.String) m.get("branchName"));
    return mo;
  }

  // select by primary key

  public app.daos.BranchVO selectByPK(final java.lang.Integer branchId) {
    if (branchId == null)
      return null;
    app.daos.BranchVO vo = new app.daos.BranchVO();
    vo.setBranchId(branchId);
    return this.sqlSession.selectOne("mappers.branch.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.BranchVO> selectByExample(final app.daos.primitives.AbstractBranchVO example, final BranchOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractBranchVO, BranchOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.branch.selectByExample", dwo);
  }

  public Cursor<app.daos.BranchVO> selectByExampleCursor(final app.daos.primitives.AbstractBranchVO example, final BranchOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractBranchVO, BranchOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.BranchVO>(this.sqlSession.selectCursor("mappers.branch.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.BranchVO> selectByCriteria(final BranchDAO.BranchTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.BranchVO>(from, this.sqlDialect, this.sqlSession,
        predicate, "mappers.branch.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs

  public SelectChildrenEmployeePhase selectChildrenEmployeeOf(final BranchVO vo) {
    return new SelectChildrenEmployeePhase(vo);
  }

  public class SelectChildrenEmployeePhase {

    private BranchVO vo;

    SelectChildrenEmployeePhase(final BranchVO vo) {
      this.vo = vo;
    }

    public SelectChildrenEmployeeFromBranchIdPhase fromBranchId() {
      return new SelectChildrenEmployeeFromBranchIdPhase(this.vo);
    }

  }

  public class SelectChildrenEmployeeFromBranchIdPhase {

    private BranchVO vo;

    SelectChildrenEmployeeFromBranchIdPhase(final BranchVO vo) {
      this.vo = vo;
    }

    public List<EmployeeVO> toBranchId(final EmployeeOrderBy... orderBies) {
      EmployeeVO example = new EmployeeVO();
      example.setBranchId(this.vo.getBranchId());
      return employeeDAO.selectByExample(example, orderBies);
    }

    public Cursor<EmployeeVO> cursorToBranchId(final EmployeeOrderBy... orderBies) {
      EmployeeVO example = new EmployeeVO();
      example.setBranchId(this.vo.getBranchId());
      return employeeDAO.selectByExampleCursor(example, orderBies);
    }

  }

  // insert

  public app.daos.BranchVO insert(final app.daos.primitives.AbstractBranchVO vo) {
    String id = "mappers.branch.insert";
    int rows = this.sqlSession.insert(id, vo);
    app.daos.BranchVO mo = new app.daos.BranchVO();
    mo.setBranchId(vo.getBranchId());
    mo.setBranchName(vo.getBranchName());
    return mo;
  }

  // update by PK

  public int update(final app.daos.BranchVO vo) {
    if (vo.branchId == null) return 0;
    return this.sqlSession.update("mappers.branch.updateByPK", vo);
  }

  // delete by PK

  public int delete(final app.daos.BranchVO vo) {
    if (vo.branchId == null) return 0;
    return this.sqlSession.delete("mappers.branch.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final app.daos.primitives.AbstractBranchVO example, final app.daos.primitives.AbstractBranchVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractBranchVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractBranchVO>(example, updateValues);
    return this.sqlSession.update("mappers.branch.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final app.daos.primitives.AbstractBranchVO example) {
    return this.sqlSession.delete("mappers.branch.deleteByExample", example);
  }

  // DAO ordering

  public enum BranchOrderBy implements OrderBy {

    BRANCH_ID("branch", "branch_id", true), //
    BRANCH_ID$DESC("branch", "branch_id", false), //
    BRANCH_NAME("branch", "branch_name", true), //
    BRANCH_NAME$DESC("branch", "branch_name", false), //
    BRANCH_NAME$CASEINSENSITIVE("branch", "lower(branch_name)", true), //
    BRANCH_NAME$CASEINSENSITIVE_STABLE_FORWARD("branch", "lower(branch_name), branch_name", true), //
    BRANCH_NAME$CASEINSENSITIVE_STABLE_REVERSE("branch", "lower(branch_name), branch_name", false), //
    BRANCH_NAME$DESC_CASEINSENSITIVE("branch", "lower(branch_name)", false), //
    BRANCH_NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("branch", "lower(branch_name), branch_name", false), //
    BRANCH_NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("branch", "lower(branch_name), branch_name", true);

    private BranchOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static BranchTable newTable() {
    return new BranchTable();
  }

  public static BranchTable newTable(final String alias) {
    return new BranchTable(alias);
  }

  public static class BranchTable extends Table {

    // Properties

    public NumberColumn branchId;
    public StringColumn branchName;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.branchId, this.branchName);
    }

    // Constructors

    BranchTable() {
      super(null, null, "BRANCH", "Table", null);
      initialize();
    }

    BranchTable(final String alias) {
      super(null, null, "BRANCH", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.branchId = new NumberColumn(this, "BRANCH_ID", "branchId", "INTEGER", 32, 0);
      this.branchName = new StringColumn(this, "BRANCH_NAME", "branchName", "CHARACTER VARYING", 20, 0);
    }

  }

}
