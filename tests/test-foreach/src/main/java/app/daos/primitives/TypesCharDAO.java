// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractTypesCharVO;
import app.daos.TypesCharVO;

import java.util.Map;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class TypesCharDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<app.daos.TypesCharVO> select(final app.daos.primitives.AbstractTypesCharVO example, final TypesCharOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractTypesCharVO, TypesCharOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.typesChar.selectByExample", dwo);
  }

  public Cursor<app.daos.TypesCharVO> selectCursor(final app.daos.primitives.AbstractTypesCharVO example, final TypesCharOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractTypesCharVO, TypesCharOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.TypesCharVO>(this.sqlSession.selectCursor("mappers.typesChar.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.TypesCharVO> select(final TypesCharDAO.TypesCharTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.TypesCharVO>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "mappers.typesChar.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.TypesCharVO insert(final app.daos.primitives.AbstractTypesCharVO vo) {
    String id = "mappers.typesChar.insert";
    this.sqlSession.insert(id, vo);
    app.daos.TypesCharVO mo = new app.daos.TypesCharVO();
    mo.setCha1(vo.getCha1());
    mo.setCha2(vo.getCha2());
    mo.setCha3(vo.getCha3());
    return mo;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int update(final app.daos.primitives.AbstractTypesCharVO example, final app.daos.primitives.AbstractTypesCharVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractTypesCharVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractTypesCharVO>(example, updateValues);
    return this.sqlSession.update("mappers.typesChar.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractTypesCharVO updateValues, final TypesCharDAO.TypesCharTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getCha1() != null) values.put("cha1", updateValues.getCha1());
    if (updateValues.getCha2() != null) values.put("cha2", updateValues.getCha2());
    if (updateValues.getCha3() != null) values.put("cha3", updateValues.getCha3());
    return new UpdateSetCompletePhase(tableOrView, this.liveSQLDialect, this.sqlSession,
      "mappers.typesChar.updateByCriteria", predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractTypesCharVO example) {
    return this.sqlSession.delete("mappers.typesChar.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final TypesCharDAO.TypesCharTable from, final Predicate predicate) {
    return new DeleteWherePhase(from, this.liveSQLDialect, this.sqlSession,
      "mappers.typesChar.deleteByCriteria", predicate);
  }

  // DAO ordering

  public enum TypesCharOrderBy implements OrderBy {

    CHA1("public.types_char", "cha1", true), //
    CHA1$DESC("public.types_char", "cha1", false), //
    CHA1$CASEINSENSITIVE("public.types_char", "lower(cha1)", true), //
    CHA1$CASEINSENSITIVE_STABLE_FORWARD("public.types_char", "lower(cha1), cha1", true), //
    CHA1$CASEINSENSITIVE_STABLE_REVERSE("public.types_char", "lower(cha1), cha1", false), //
    CHA1$DESC_CASEINSENSITIVE("public.types_char", "lower(cha1)", false), //
    CHA1$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.types_char", "lower(cha1), cha1", false), //
    CHA1$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.types_char", "lower(cha1), cha1", true), //
    CHA2("public.types_char", "cha2", true), //
    CHA2$DESC("public.types_char", "cha2", false), //
    CHA2$CASEINSENSITIVE("public.types_char", "lower(cha2)", true), //
    CHA2$CASEINSENSITIVE_STABLE_FORWARD("public.types_char", "lower(cha2), cha2", true), //
    CHA2$CASEINSENSITIVE_STABLE_REVERSE("public.types_char", "lower(cha2), cha2", false), //
    CHA2$DESC_CASEINSENSITIVE("public.types_char", "lower(cha2)", false), //
    CHA2$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.types_char", "lower(cha2), cha2", false), //
    CHA2$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.types_char", "lower(cha2), cha2", true), //
    CHA3("public.types_char", "cha3", true), //
    CHA3$DESC("public.types_char", "cha3", false), //
    CHA3$CASEINSENSITIVE("public.types_char", "lower(cha3)", true), //
    CHA3$CASEINSENSITIVE_STABLE_FORWARD("public.types_char", "lower(cha3), cha3", true), //
    CHA3$CASEINSENSITIVE_STABLE_REVERSE("public.types_char", "lower(cha3), cha3", false), //
    CHA3$DESC_CASEINSENSITIVE("public.types_char", "lower(cha3)", false), //
    CHA3$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.types_char", "lower(cha3), cha3", false), //
    CHA3$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.types_char", "lower(cha3), cha3", true);

    private TypesCharOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static TypesCharTable newTable() {
    return new TypesCharTable();
  }

  public static TypesCharTable newTable(final String alias) {
    return new TypesCharTable(alias);
  }

  public static class TypesCharTable extends Table {

    // Properties

    public StringColumn cha1;
    public StringColumn cha2;
    public StringColumn cha3;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.cha1, this.cha2, this.cha3);
    }

    // Constructors

    TypesCharTable() {
      super(null, "public", "types_char", "Table", null);
      initialize();
    }

    TypesCharTable(final String alias) {
      super(null, "public", "types_char", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.cha1 = new StringColumn(this, "cha1", "cha1", "bpchar", 10, 0);
      this.cha2 = new StringColumn(this, "cha2", "cha2", "varchar", 10, 0);
      this.cha3 = new StringColumn(this, "cha3", "cha3", "text", 2147483647, 0);
    }

  }

}
