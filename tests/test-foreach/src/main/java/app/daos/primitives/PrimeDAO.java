// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.PrimeVO;
import app.daos.PrimeMODEL;

import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.TypeHandler;
import org.hotrod.runtime.converter.TypeConverter;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.SQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class PrimeDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private SQLDialect sqlDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // Row Parser

  public static app.daos.PrimeMODEL parseRow(Map<String, Object> m) {
    app.daos.PrimeMODEL mo = new app.daos.PrimeMODEL();
    mo.setId((java.lang.Integer) m.get("id"));
    mo.setAmount((java.lang.Double) m.get("amount"));
    mo.setN((java.lang.Object) m.get("n"));
    return mo;
  }

  // select by primary key

  public app.daos.PrimeMODEL selectByPK(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.PrimeMODEL vo = new app.daos.PrimeMODEL();
    vo.setId(id);
    return this.sqlSession.selectOne("mappers.prime.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.PrimeMODEL> selectByExample(final app.daos.primitives.PrimeVO example, final PrimeOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.PrimeVO, PrimeOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.prime.selectByExample", dwo);
  }

  public Cursor<app.daos.PrimeMODEL> selectByExampleCursor(final app.daos.primitives.PrimeVO example, final PrimeOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.PrimeVO, PrimeOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.PrimeMODEL>(this.sqlSession.selectCursor("mappers.prime.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.PrimeMODEL> selectByCriteria(final PrimeDAO.PrimeTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.PrimeMODEL>(from, this.sqlDialect, this.sqlSession,
        predicate, "mappers.prime.selectByCriteria");
  }

  // insert

  public app.daos.PrimeMODEL insert(final app.daos.primitives.PrimeVO vo) {
    String id = "mappers.prime.insert";
    this.sqlSession.insert(id, vo);
    app.daos.PrimeMODEL mo = new app.daos.PrimeMODEL();
    mo.setId(vo.getId());
    mo.setAmount(vo.getAmount());
    mo.setN(vo.getN());
    return mo;
  }

  // update by PK

  public int update(final app.daos.PrimeMODEL vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("mappers.prime.updateByPK", vo);
  }

  // delete by PK

  public int delete(final app.daos.PrimeMODEL vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.delete("mappers.prime.deleteByPK", vo);
  }

  // update by example

  public int updateByExample(final app.daos.primitives.PrimeVO example, final app.daos.primitives.PrimeVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.PrimeVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.PrimeVO>(example, updateValues);
    return this.sqlSession.update("mappers.prime.updateByExample", fvd);
  }

  // delete by example

  public int deleteByExample(final app.daos.primitives.PrimeVO example) {
    return this.sqlSession.delete("mappers.prime.deleteByExample", example);
  }

  // DAO ordering

  public enum PrimeOrderBy implements OrderBy {

    ID("prime", "id", true), //
    ID$DESC("prime", "id", false), //
    AMOUNT("prime", "amount", true), //
    AMOUNT$DESC("prime", "amount", false), //
    N("prime", "n", true), //
    N$DESC("prime", "n", false);

    private PrimeOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static PrimeTable newTable() {
    return new PrimeTable();
  }

  public static PrimeTable newTable(final String alias) {
    return new PrimeTable(alias);
  }

  public static class PrimeTable extends Table {

    // Properties

    public NumberColumn id;
    public NumberColumn amount;
    public ObjectColumn n;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.id, this.amount, this.n);
    }

    // Constructors

    PrimeTable() {
      super(null, null, "prime", "Table", null);
      initialize();
    }

    PrimeTable(final String alias) {
      super(null, null, "prime", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id", "int4", 10, 0);
      this.amount = new NumberColumn(this, "amount", "amount", "int4", 10, 0);
      this.n = new ObjectColumn(this, "n", "n", "_int4", 10, 0);
    }

  }

  // TypeHandler for column amount using Converter app.converters.DoubleConverter.

  public static class AmountTypeHandler implements TypeHandler<java.lang.Double> {

    private static TypeConverter<java.lang.Double, java.lang.Double> CONVERTER = new app.converters.DoubleConverter();

    @Override
    public java.lang.Double getResult(final ResultSet rs, final String columnName) throws SQLException {
      java.lang.Double value = rs.getDouble(columnName);
      if (rs.wasNull()) {
        value = null;
      }
      return CONVERTER.decode(value);
    }

    @Override
    public java.lang.Double getResult(final ResultSet rs, final int columnIndex) throws SQLException {
      java.lang.Double value = rs.getDouble(columnIndex);
      if (rs.wasNull()) {
        value = null;
      }
      return CONVERTER.decode(value);
    }

    @Override
    public java.lang.Double getResult(final CallableStatement cs, final int columnIndex) throws SQLException {
      java.lang.Double value = cs.getDouble(columnIndex);
      if (cs.wasNull()) {
        value = null;
      }
      return CONVERTER.decode(value);
    }

    @Override
    public void setParameter(final PreparedStatement ps, final int columnIndex, final java.lang.Double v, final JdbcType jdbcType)
        throws SQLException {
      java.lang.Double value = CONVERTER.encode(v);
      if (value == null) {
        ps.setNull(columnIndex, jdbcType.TYPE_CODE);
      } else {
        ps.setDouble(columnIndex, value);
      }
    }

  }

}
