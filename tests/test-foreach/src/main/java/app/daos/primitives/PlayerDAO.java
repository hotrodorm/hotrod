// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.PlayerVO;
import app.daos.PlayerMODEL;

import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.TypeHandler;
import org.hotrod.runtime.converter.TypeConverter;

import java.util.Map;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class PlayerDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public app.daos.PlayerMODEL select(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.PlayerMODEL vo = new app.daos.PlayerMODEL();
    vo.setId(id);
    return this.sqlSession.selectOne("mappers.player.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.PlayerMODEL> select(final app.daos.primitives.PlayerVO example, final PlayerOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.PlayerVO, PlayerOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.player.selectByExample", dwo);
  }

  public Cursor<app.daos.PlayerMODEL> selectCursor(final app.daos.primitives.PlayerVO example, final PlayerOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.PlayerVO, PlayerOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.PlayerMODEL>(this.sqlSession.selectCursor("mappers.player.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.PlayerMODEL> select(final PlayerDAO.PlayerTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.PlayerMODEL>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "mappers.player.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.PlayerMODEL insert(final app.daos.primitives.PlayerVO vo) {
    String id = "mappers.player.insert";
    this.sqlSession.insert(id, vo);
    app.daos.PlayerMODEL mo = new app.daos.PlayerMODEL();
    mo.setId(vo.getId());
    mo.setCards(vo.getCards());
    return mo;
  }

  // update by PK

  public int update(final app.daos.PlayerMODEL vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("mappers.player.updateByPK", vo);
  }

  // delete by PK

  public int delete(final java.lang.Integer id) {
    if (id == null) return 0;
    app.daos.PlayerMODEL vo = new app.daos.PlayerMODEL();
    vo.setId(id);
    if (vo.id == null) return 0;
    return this.sqlSession.delete("mappers.player.deleteByPK", vo);
  }

  // update by example

  public int update(final app.daos.primitives.PlayerVO example, final app.daos.primitives.PlayerVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.PlayerVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.PlayerVO>(example, updateValues);
    return this.sqlSession.update("mappers.player.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.PlayerVO updateValues, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("id", updateValues.getId());
    if (updateValues.getCards() != null) values.put("cards", updateValues.getCards());
    return new UpdateSetCompletePhase(PlayerDAO.newTable(), this.liveSQLDialect, this.sqlSession,
      "mappers.player.updateByCriteria", predicate, values);
  }

  public UpdateSetCompletePhase update(final app.daos.primitives.PlayerVO updateValues, final PlayerDAO.PlayerTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("id", updateValues.getId());
    if (updateValues.getCards() != null) values.put("cards", updateValues.getCards());
    return new UpdateSetCompletePhase(tableOrView, this.liveSQLDialect, this.sqlSession,
      "mappers.player.updateByCriteria", predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.PlayerVO example) {
    return this.sqlSession.delete("mappers.player.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final Predicate predicate) {
    return new DeleteWherePhase(PlayerDAO.newTable(), this.liveSQLDialect, this.sqlSession,
      "mappers.player.deleteByCriteria", predicate);
  }

  public DeleteWherePhase delete(final PlayerDAO.PlayerTable from, final Predicate predicate) {
    return new DeleteWherePhase(from, this.liveSQLDialect, this.sqlSession,
      "mappers.player.deleteByCriteria", predicate);
  }

  // DAO ordering

  public enum PlayerOrderBy implements OrderBy {

    ID("player", "id", true), //
    ID$DESC("player", "id", false), //
    CARDS("player", "cards", true), //
    CARDS$DESC("player", "cards", false);

    private PlayerOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static PlayerTable newTable() {
    return new PlayerTable();
  }

  public static PlayerTable newTable(final String alias) {
    return new PlayerTable(alias);
  }

  public static class PlayerTable extends Table {

    // Properties

    public NumberColumn id;
    public ObjectColumn cards;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.id, this.cards);
    }

    // Constructors

    PlayerTable() {
      super(null, null, "player", "Table", null);
      initialize();
    }

    PlayerTable(final String alias) {
      super(null, null, "player", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id", "int4", 10, 0);
      this.cards = new ObjectColumn(this, "cards", "cards", "_int4", 10, 0);
    }

  }

  // TypeHandler for column cards using Converter app.IntegerArrayConverter.

  public static class CardsTypeHandler implements TypeHandler<Integer[]> {

    private static final TypeConverter<java.sql.Array, Integer[]> CONVERTER = new app.IntegerArrayConverter();

    @Override
    public Integer[] getResult(final ResultSet rs, final String columnName) throws SQLException {
      java.sql.Array raw = rs.getArray(columnName);
      if (rs.wasNull()) {
        raw = null;
      }
      return CONVERTER.decode(raw, rs.getStatement().getConnection());
    }

    @Override
    public Integer[] getResult(final ResultSet rs, final int columnIndex) throws SQLException {
      java.sql.Array raw = rs.getArray(columnIndex);
      if (rs.wasNull()) {
        raw = null;
      }
      return CONVERTER.decode(raw, rs.getStatement().getConnection());
    }

    @Override
    public Integer[] getResult(final CallableStatement cs, final int columnIndex) throws SQLException {
      java.sql.Array raw = cs.getArray(columnIndex);
      if (cs.wasNull()) {
        raw = null;
      }
      return CONVERTER.decode(raw, cs.getConnection());
    }

    @Override
    public void setParameter(final PreparedStatement ps, final int columnIndex, final Integer[] value, final JdbcType jdbcType)
        throws SQLException {
      java.sql.Array raw = CONVERTER.encode(value, ps.getConnection());
      if (raw == null) {
        ps.setNull(columnIndex, jdbcType.TYPE_CODE);
      } else {
        ps.setArray(columnIndex, raw);
      }
    }

  }

}
