// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractHistoricPriceVO;
import app.daos.HistoricPriceVO;

import java.util.Map;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class HistoricPriceDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public app.daos.HistoricPriceVO select(final java.lang.Integer productId, final java.sql.Date fromDate) {
    if (productId == null)
      return null;
    if (fromDate == null)
      return null;
    app.daos.HistoricPriceVO vo = new app.daos.HistoricPriceVO();
    vo.setProductId(productId);
    vo.setFromDate(fromDate);
    return this.sqlSession.selectOne("mappers.historicPrice.selectByPK", vo);
  }

  // select by unique indexes: no unique indexes found (besides the PK) -- skipped

  // select by example

  public List<app.daos.HistoricPriceVO> select(final app.daos.primitives.AbstractHistoricPriceVO example, final HistoricPriceOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractHistoricPriceVO, HistoricPriceOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.historicPrice.selectByExample", dwo);
  }

  public Cursor<app.daos.HistoricPriceVO> selectCursor(final app.daos.primitives.AbstractHistoricPriceVO example, final HistoricPriceOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractHistoricPriceVO, HistoricPriceOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.HistoricPriceVO>(this.sqlSession.selectCursor("mappers.historicPrice.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.HistoricPriceVO> select(final HistoricPriceDAO.HistoricPriceTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.HistoricPriceVO>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "mappers.historicPrice.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.HistoricPriceVO insert(final app.daos.primitives.AbstractHistoricPriceVO vo) {
    String id = "mappers.historicPrice.insert";
    this.sqlSession.insert(id, vo);
    app.daos.HistoricPriceVO mo = new app.daos.HistoricPriceVO();
    mo.setProductId(vo.getProductId());
    mo.setFromDate(vo.getFromDate());
    mo.setPrice(vo.getPrice());
    mo.setSku(vo.getSku());
    return mo;
  }

  // update by PK

  public int update(final app.daos.HistoricPriceVO vo) {
    if (vo.productId == null) return 0;
    if (vo.fromDate == null) return 0;
    return this.sqlSession.update("mappers.historicPrice.updateByPK", vo);
  }

  // delete by PK

  public int delete(final java.lang.Integer productId, final java.sql.Date fromDate) {
    if (productId == null) return 0;
    if (fromDate == null) return 0;
    app.daos.HistoricPriceVO vo = new app.daos.HistoricPriceVO();
    vo.setProductId(productId);
    vo.setFromDate(fromDate);
    if (vo.productId == null) return 0;
    if (vo.fromDate == null) return 0;
    return this.sqlSession.delete("mappers.historicPrice.deleteByPK", vo);
  }

  // update by example

  public int update(final app.daos.primitives.AbstractHistoricPriceVO example, final app.daos.primitives.AbstractHistoricPriceVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractHistoricPriceVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractHistoricPriceVO>(example, updateValues);
    return this.sqlSession.update("mappers.historicPrice.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractHistoricPriceVO updateValues, final HistoricPriceDAO.HistoricPriceTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getProductId() != null) values.put("product_id", updateValues.getProductId());
    if (updateValues.getFromDate() != null) values.put("from_date", updateValues.getFromDate());
    if (updateValues.getPrice() != null) values.put("price", updateValues.getPrice());
    if (updateValues.getSku() != null) values.put("sku", updateValues.getSku());
    return new UpdateSetCompletePhase(tableOrView, this.liveSQLDialect, this.sqlSession,
      "mappers.historicPrice.updateByCriteria", predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractHistoricPriceVO example) {
    return this.sqlSession.delete("mappers.historicPrice.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final HistoricPriceDAO.HistoricPriceTable from, final Predicate predicate) {
    return new DeleteWherePhase(from, this.liveSQLDialect, this.sqlSession,
      "mappers.historicPrice.deleteByCriteria", predicate);
  }

  // DAO ordering

  public enum HistoricPriceOrderBy implements OrderBy {

    PRODUCT_ID("public.historic_price", "product_id", true), //
    PRODUCT_ID$DESC("public.historic_price", "product_id", false), //
    FROM_DATE("public.historic_price", "from_date", true), //
    FROM_DATE$DESC("public.historic_price", "from_date", false), //
    PRICE("public.historic_price", "price", true), //
    PRICE$DESC("public.historic_price", "price", false), //
    SKU("public.historic_price", "sku", true), //
    SKU$DESC("public.historic_price", "sku", false);

    private HistoricPriceOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static HistoricPriceTable newTable() {
    return new HistoricPriceTable();
  }

  public static HistoricPriceTable newTable(final String alias) {
    return new HistoricPriceTable(alias);
  }

  public static class HistoricPriceTable extends Table {

    // Properties

    public NumberColumn productId;
    public DateTimeColumn fromDate;
    public NumberColumn price;
    public NumberColumn sku;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.productId, this.fromDate, this.price, this.sku);
    }

    // Constructors

    HistoricPriceTable() {
      super(null, "public", "historic_price", "Table", null);
      initialize();
    }

    HistoricPriceTable(final String alias) {
      super(null, "public", "historic_price", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.productId = new NumberColumn(this, "product_id", "productId", "int4", 10, 0);
      this.fromDate = new DateTimeColumn(this, "from_date", "fromDate", "date", 13, 0);
      this.price = new NumberColumn(this, "price", "price", "int4", 10, 0);
      this.sku = new NumberColumn(this, "sku", "sku", "int8", 19, 0);
    }

  }

}
