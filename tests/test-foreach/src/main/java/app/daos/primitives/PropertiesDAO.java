// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractPropertiesVO;
import app.daos.PropertiesVO;

import java.util.Map;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class PropertiesDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes

  public app.daos.PropertiesVO selectByUIName(final java.lang.String name) {
    if (name == null)
      return null;
    app.daos.PropertiesVO vo = new app.daos.PropertiesVO();
    vo.setName(name);
    return this.sqlSession.selectOne("mappers.properties.selectByUIName", vo);
  }

  // select by example

  public List<app.daos.PropertiesVO> select(final app.daos.primitives.AbstractPropertiesVO example, final PropertiesOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractPropertiesVO, PropertiesOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.properties.selectByExample", dwo);
  }

  public Cursor<app.daos.PropertiesVO> selectCursor(final app.daos.primitives.AbstractPropertiesVO example, final PropertiesOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractPropertiesVO, PropertiesOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.PropertiesVO>(this.sqlSession.selectCursor("mappers.properties.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.PropertiesVO> select(final PropertiesDAO.PropertiesTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.PropertiesVO>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "mappers.properties.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.PropertiesVO insert(final app.daos.primitives.AbstractPropertiesVO vo) {
    String id = "mappers.properties.insert";
    this.sqlSession.insert(id, vo);
    app.daos.PropertiesVO mo = new app.daos.PropertiesVO();
    mo.setApplication(vo.getApplication());
    mo.setName(vo.getName());
    mo.setPropValue(vo.getPropValue());
    return mo;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int update(final app.daos.primitives.AbstractPropertiesVO example, final app.daos.primitives.AbstractPropertiesVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractPropertiesVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractPropertiesVO>(example, updateValues);
    return this.sqlSession.update("mappers.properties.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractPropertiesVO updateValues, final PropertiesDAO.PropertiesTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getApplication() != null) values.put("application", updateValues.getApplication());
    if (updateValues.getName() != null) values.put("name", updateValues.getName());
    if (updateValues.getPropValue() != null) values.put("prop_value", updateValues.getPropValue());
    return new UpdateSetCompletePhase(tableOrView, this.liveSQLDialect, this.sqlSession,
      "mappers.properties.updateByCriteria", predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractPropertiesVO example) {
    return this.sqlSession.delete("mappers.properties.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final PropertiesDAO.PropertiesTable from, final Predicate predicate) {
    return new DeleteWherePhase(from, this.liveSQLDialect, this.sqlSession,
      "mappers.properties.deleteByCriteria", predicate);
  }

  // DAO ordering

  public enum PropertiesOrderBy implements OrderBy {

    APPLICATION("public.properties", "application", true), //
    APPLICATION$DESC("public.properties", "application", false), //
    APPLICATION$CASEINSENSITIVE("public.properties", "lower(application)", true), //
    APPLICATION$CASEINSENSITIVE_STABLE_FORWARD("public.properties", "lower(application), application", true), //
    APPLICATION$CASEINSENSITIVE_STABLE_REVERSE("public.properties", "lower(application), application", false), //
    APPLICATION$DESC_CASEINSENSITIVE("public.properties", "lower(application)", false), //
    APPLICATION$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.properties", "lower(application), application", false), //
    APPLICATION$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.properties", "lower(application), application", true), //
    NAME("public.properties", "name", true), //
    NAME$DESC("public.properties", "name", false), //
    NAME$CASEINSENSITIVE("public.properties", "lower(name)", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("public.properties", "lower(name), name", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("public.properties", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE("public.properties", "lower(name)", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.properties", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.properties", "lower(name), name", true), //
    PROP_VALUE("public.properties", "prop_value", true), //
    PROP_VALUE$DESC("public.properties", "prop_value", false), //
    PROP_VALUE$CASEINSENSITIVE("public.properties", "lower(prop_value)", true), //
    PROP_VALUE$CASEINSENSITIVE_STABLE_FORWARD("public.properties", "lower(prop_value), prop_value", true), //
    PROP_VALUE$CASEINSENSITIVE_STABLE_REVERSE("public.properties", "lower(prop_value), prop_value", false), //
    PROP_VALUE$DESC_CASEINSENSITIVE("public.properties", "lower(prop_value)", false), //
    PROP_VALUE$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.properties", "lower(prop_value), prop_value", false), //
    PROP_VALUE$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.properties", "lower(prop_value), prop_value", true);

    private PropertiesOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static PropertiesTable newTable() {
    return new PropertiesTable();
  }

  public static PropertiesTable newTable(final String alias) {
    return new PropertiesTable(alias);
  }

  public static class PropertiesTable extends Table {

    // Properties

    public StringColumn application;
    public StringColumn name;
    public StringColumn propValue;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.application, this.name, this.propValue);
    }

    // Constructors

    PropertiesTable() {
      super(null, "public", "properties", "Table", null);
      initialize();
    }

    PropertiesTable(final String alias) {
      super(null, "public", "properties", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.application = new StringColumn(this, "application", "application", "varchar", 20, 0);
      this.name = new StringColumn(this, "name", "name", "varchar", 50, 0);
      this.propValue = new StringColumn(this, "prop_value", "propValue", "varchar", 80, 0);
    }

  }

}
