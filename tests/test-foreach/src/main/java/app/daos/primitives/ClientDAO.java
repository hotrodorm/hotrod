// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractClientVO;
import app.daos.ClientVO;

import java.util.Map;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class ClientDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by primary key

  public app.daos.ClientVO select(final java.lang.Integer id) {
    if (id == null)
      return null;
    app.daos.ClientVO vo = new app.daos.ClientVO();
    vo.setId(id);
    return this.sqlSession.selectOne("mappers.client.selectByPK", vo);
  }

  // select by unique indexes

  public app.daos.ClientVO selectByUINationalId(final java.lang.Integer nationalId) {
    if (nationalId == null)
      return null;
    app.daos.ClientVO vo = new app.daos.ClientVO();
    vo.setNationalId(nationalId);
    return this.sqlSession.selectOne("mappers.client.selectByUINationalId", vo);
  }

  // select by example

  public List<app.daos.ClientVO> select(final app.daos.primitives.AbstractClientVO example, final ClientOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractClientVO, ClientOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.client.selectByExample", dwo);
  }

  public Cursor<app.daos.ClientVO> selectCursor(final app.daos.primitives.AbstractClientVO example, final ClientOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractClientVO, ClientOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.ClientVO>(this.sqlSession.selectCursor("mappers.client.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.ClientVO> select(final ClientDAO.ClientTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.ClientVO>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "mappers.client.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.ClientVO insert(final app.daos.primitives.AbstractClientVO vo) {
    String id = "mappers.client.insert";
    this.sqlSession.insert(id, vo);
    app.daos.ClientVO mo = new app.daos.ClientVO();
    mo.setId(vo.getId());
    mo.setNationalId(vo.getNationalId());
    mo.setName(vo.getName());
    mo.setPropName(vo.getPropName());
    mo.setReferrerId(vo.getReferrerId());
    mo.setFriendId(vo.getFriendId());
    mo.setGroupAccountId(vo.getGroupAccountId());
    mo.setBranchId(vo.getBranchId());
    return mo;
  }

  // update by PK

  public int update(final app.daos.ClientVO vo) {
    if (vo.id == null) return 0;
    return this.sqlSession.update("mappers.client.updateByPK", vo);
  }

  // delete by PK

  public int delete(final java.lang.Integer id) {
    if (id == null) return 0;
    app.daos.ClientVO vo = new app.daos.ClientVO();
    vo.setId(id);
    if (vo.id == null) return 0;
    return this.sqlSession.delete("mappers.client.deleteByPK", vo);
  }

  // update by example

  public int update(final app.daos.primitives.AbstractClientVO example, final app.daos.primitives.AbstractClientVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractClientVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractClientVO>(example, updateValues);
    return this.sqlSession.update("mappers.client.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractClientVO updateValues, final ClientDAO.ClientTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getId() != null) values.put("id", updateValues.getId());
    if (updateValues.getNationalId() != null) values.put("national_id", updateValues.getNationalId());
    if (updateValues.getName() != null) values.put("name", updateValues.getName());
    if (updateValues.getPropName() != null) values.put("prop_name", updateValues.getPropName());
    if (updateValues.getReferrerId() != null) values.put("referrer_id", updateValues.getReferrerId());
    if (updateValues.getFriendId() != null) values.put("friend_id", updateValues.getFriendId());
    if (updateValues.getGroupAccountId() != null) values.put("group_account_id", updateValues.getGroupAccountId());
    if (updateValues.getBranchId() != null) values.put("branch_id", updateValues.getBranchId());
    return new UpdateSetCompletePhase(tableOrView, this.liveSQLDialect, this.sqlSession,
      "mappers.client.updateByCriteria", predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractClientVO example) {
    return this.sqlSession.delete("mappers.client.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final ClientDAO.ClientTable from, final Predicate predicate) {
    return new DeleteWherePhase(from, this.liveSQLDialect, this.sqlSession,
      "mappers.client.deleteByCriteria", predicate);
  }

  // DAO ordering

  public enum ClientOrderBy implements OrderBy {

    ID("public.client", "id", true), //
    ID$DESC("public.client", "id", false), //
    NATIONAL_ID("public.client", "national_id", true), //
    NATIONAL_ID$DESC("public.client", "national_id", false), //
    NAME("public.client", "name", true), //
    NAME$DESC("public.client", "name", false), //
    NAME$CASEINSENSITIVE("public.client", "lower(name)", true), //
    NAME$CASEINSENSITIVE_STABLE_FORWARD("public.client", "lower(name), name", true), //
    NAME$CASEINSENSITIVE_STABLE_REVERSE("public.client", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE("public.client", "lower(name)", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.client", "lower(name), name", false), //
    NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.client", "lower(name), name", true), //
    PROP_NAME("public.client", "prop_name", true), //
    PROP_NAME$DESC("public.client", "prop_name", false), //
    PROP_NAME$CASEINSENSITIVE("public.client", "lower(prop_name)", true), //
    PROP_NAME$CASEINSENSITIVE_STABLE_FORWARD("public.client", "lower(prop_name), prop_name", true), //
    PROP_NAME$CASEINSENSITIVE_STABLE_REVERSE("public.client", "lower(prop_name), prop_name", false), //
    PROP_NAME$DESC_CASEINSENSITIVE("public.client", "lower(prop_name)", false), //
    PROP_NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.client", "lower(prop_name), prop_name", false), //
    PROP_NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.client", "lower(prop_name), prop_name", true), //
    REFERRER_ID("public.client", "referrer_id", true), //
    REFERRER_ID$DESC("public.client", "referrer_id", false), //
    FRIEND_ID("public.client", "friend_id", true), //
    FRIEND_ID$DESC("public.client", "friend_id", false), //
    GROUP_ACCOUNT_ID("public.client", "group_account_id", true), //
    GROUP_ACCOUNT_ID$DESC("public.client", "group_account_id", false), //
    BRANCH_ID("public.client", "branch_id", true), //
    BRANCH_ID$DESC("public.client", "branch_id", false);

    private ClientOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static ClientTable newTable() {
    return new ClientTable();
  }

  public static ClientTable newTable(final String alias) {
    return new ClientTable(alias);
  }

  public static class ClientTable extends Table {

    // Properties

    public NumberColumn id;
    public NumberColumn nationalId;
    public StringColumn name;
    public StringColumn propName;
    public NumberColumn referrerId;
    public NumberColumn friendId;
    public NumberColumn groupAccountId;
    public NumberColumn branchId;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.id, this.nationalId, this.name, this.propName, this.referrerId, this.friendId, this.groupAccountId, this.branchId);
    }

    // Constructors

    ClientTable() {
      super(null, "public", "client", "Table", null);
      initialize();
    }

    ClientTable(final String alias) {
      super(null, "public", "client", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.id = new NumberColumn(this, "id", "id", "int4", 10, 0);
      this.nationalId = new NumberColumn(this, "national_id", "nationalId", "int4", 10, 0);
      this.name = new StringColumn(this, "name", "name", "varchar", 40, 0);
      this.propName = new StringColumn(this, "prop_name", "propName", "varchar", 20, 0);
      this.referrerId = new NumberColumn(this, "referrer_id", "referrerId", "int4", 10, 0);
      this.friendId = new NumberColumn(this, "friend_id", "friendId", "int4", 10, 0);
      this.groupAccountId = new NumberColumn(this, "group_account_id", "groupAccountId", "int4", 10, 0);
      this.branchId = new NumberColumn(this, "branch_id", "branchId", "int4", 10, 0);
    }

  }

}
