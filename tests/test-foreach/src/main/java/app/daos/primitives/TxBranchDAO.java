// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;
import org.hotrod.runtime.interfaces.Selectable;

import app.daos.primitives.AbstractTxBranchVO;
import app.daos.TxBranchVO;

import java.util.Map;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class TxBranchDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // select by example

  public List<app.daos.TxBranchVO> select(final app.daos.primitives.AbstractTxBranchVO example, final TxBranchOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractTxBranchVO, TxBranchOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("mappers.txBranch.selectByExample", dwo);
  }

  public Cursor<app.daos.TxBranchVO> selectCursor(final app.daos.primitives.AbstractTxBranchVO example, final TxBranchOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractTxBranchVO, TxBranchOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.TxBranchVO>(this.sqlSession.selectCursor("mappers.txBranch.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.TxBranchVO> select(final TxBranchDAO.TxBranchView from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.TxBranchVO>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "mappers.txBranch.selectByCriteria");
  }

  // insert by example

  public int insertByExample(final app.daos.primitives.AbstractTxBranchVO example) {
    return sqlSession.insert("mappers.txBranch.insertByExample", example);
  }

  // update by example

  public int update(final app.daos.primitives.AbstractTxBranchVO example, final app.daos.primitives.AbstractTxBranchVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractTxBranchVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractTxBranchVO>(example, updateValues);
    return this.sqlSession.update("mappers.txBranch.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractTxBranchVO updateValues, final TxBranchDAO.TxBranchView tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getAccountId() != null) values.put("account_id", updateValues.getAccountId());
    if (updateValues.getBranchId() != null) values.put("branch_id", updateValues.getBranchId());
    if (updateValues.getBranchName() != null) values.put("branch_name", updateValues.getBranchName());
    if (updateValues.getAmount() != null) values.put("amount", updateValues.getAmount());
    return new UpdateSetCompletePhase(tableOrView, this.liveSQLDialect, this.sqlSession,
      "mappers.txBranch.updateByCriteria", predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractTxBranchVO example) {
    return this.sqlSession.delete("mappers.txBranch.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final TxBranchDAO.TxBranchView from, final Predicate predicate) {
    return new DeleteWherePhase(from, this.liveSQLDialect, this.sqlSession,
      "mappers.txBranch.deleteByCriteria", predicate);
  }

  // DAO ordering

  public enum TxBranchOrderBy implements OrderBy {

    ACCOUNT_ID("public.tx_branch", "account_id", true), //
    ACCOUNT_ID$DESC("public.tx_branch", "account_id", false), //
    BRANCH_ID("public.tx_branch", "branch_id", true), //
    BRANCH_ID$DESC("public.tx_branch", "branch_id", false), //
    BRANCH_NAME("public.tx_branch", "branch_name", true), //
    BRANCH_NAME$DESC("public.tx_branch", "branch_name", false), //
    BRANCH_NAME$CASEINSENSITIVE("public.tx_branch", "lower(branch_name)", true), //
    BRANCH_NAME$CASEINSENSITIVE_STABLE_FORWARD("public.tx_branch", "lower(branch_name), branch_name", true), //
    BRANCH_NAME$CASEINSENSITIVE_STABLE_REVERSE("public.tx_branch", "lower(branch_name), branch_name", false), //
    BRANCH_NAME$DESC_CASEINSENSITIVE("public.tx_branch", "lower(branch_name)", false), //
    BRANCH_NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.tx_branch", "lower(branch_name), branch_name", false), //
    BRANCH_NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.tx_branch", "lower(branch_name), branch_name", true), //
    AMOUNT("public.tx_branch", "amount", true), //
    AMOUNT$DESC("public.tx_branch", "amount", false);

    private TxBranchOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database View metadata

  public static TxBranchView newView() {
    return new TxBranchView();
  }

  public static TxBranchView newView(final String alias) {
    return new TxBranchView(alias);
  }

  public static class TxBranchView extends View {

    // Properties

    public NumberColumn accountId;
    public NumberColumn branchId;
    public StringColumn branchName;
    public NumberColumn amount;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.accountId, this.branchId, this.branchName, this.amount);
    }

    // Constructors

    TxBranchView() {
      super(null, "public", "tx_branch", "View", null);
      initialize();
    }

    TxBranchView(final String alias) {
      super(null, "public", "tx_branch", "View", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.accountId = new NumberColumn(this, "account_id", "accountId", "int4", 10, 0);
      this.branchId = new NumberColumn(this, "branch_id", "branchId", "int4", 10, 0);
      this.branchName = new StringColumn(this, "branch_name", "branchName", "varchar", 30, 0);
      this.amount = new NumberColumn(this, "amount", "amount", "int4", 10, 0);
    }

  }

}
