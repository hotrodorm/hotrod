// Autogenerated by HotRod -- Do not edit.

package app.daos.primitives;

import java.io.Serializable;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.hotrod.runtime.cursors.Cursor;
import org.hotrod.runtime.livesql.queries.select.MyBatisCursor;

import org.hotrod.runtime.interfaces.DaoWithOrder;
import org.hotrod.runtime.interfaces.UpdateByExampleDao;
import org.hotrod.runtime.interfaces.OrderBy;

import app.daos.primitives.AbstractBatchVO;
import app.daos.BatchVO;

import java.util.Map;
import java.util.HashMap;

import org.hotrod.runtime.livesql.expressions.ResultSetColumn;
import org.hotrod.runtime.livesql.dialects.LiveSQLDialect;
import org.hotrod.runtime.livesql.metadata.NumberColumn;
import org.hotrod.runtime.livesql.metadata.StringColumn;
import org.hotrod.runtime.livesql.metadata.DateTimeColumn;
import org.hotrod.runtime.livesql.metadata.BooleanColumn;
import org.hotrod.runtime.livesql.metadata.ByteArrayColumn;
import org.hotrod.runtime.livesql.metadata.ObjectColumn;
import org.hotrod.runtime.livesql.metadata.Table;
import org.hotrod.runtime.livesql.expressions.predicates.Predicate;
import org.hotrod.runtime.livesql.metadata.AllColumns;
import org.hotrod.runtime.livesql.queries.select.CriteriaWherePhase;
import org.hotrod.runtime.livesql.queries.DeleteWherePhase;
import org.hotrod.runtime.livesql.queries.UpdateSetCompletePhase;
import org.hotrod.runtime.livesql.metadata.View;

import org.springframework.stereotype.Component;
import org.springframework.beans.BeansException;
import org.springframework.context.annotation.Lazy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

@Component
public class BatchDAO implements Serializable, ApplicationContextAware {

  private static final long serialVersionUID = 1L;

  @Autowired
  private SqlSession sqlSession;

  @Autowired
  private LiveSQLDialect liveSQLDialect;

  private ApplicationContext applicationContext;

  @Override
  public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
    this.applicationContext = applicationContext;
  }

  // no select by PK generated, since the table does not have a PK.

  // select by unique indexes: no unique indexes found -- skipped

  // select by example

  public List<app.daos.BatchVO> select(final app.daos.primitives.AbstractBatchVO example, final BatchOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractBatchVO, BatchOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return this.sqlSession.selectList("app.daos.primitives.batch.selectByExample", dwo);
  }

  public Cursor<app.daos.BatchVO> selectCursor(final app.daos.primitives.AbstractBatchVO example, final BatchOrderBy... orderBies)
      {
    DaoWithOrder<app.daos.primitives.AbstractBatchVO, BatchOrderBy> dwo = //
        new DaoWithOrder<>(example, orderBies);
    return new MyBatisCursor<app.daos.BatchVO>(this.sqlSession.selectCursor("app.daos.primitives.batch.selectByExample", dwo));
  }

  // select by criteria

  public CriteriaWherePhase<app.daos.BatchVO> select(final BatchDAO.BatchTable from,
      final Predicate predicate) {
    return new CriteriaWherePhase<app.daos.BatchVO>(from, this.liveSQLDialect, this.sqlSession,
        predicate, "app.daos.primitives.batch.selectByCriteria");
  }

  // select parent(s) by FKs: no imported keys found -- skipped

  // select children by FKs: no exported FKs found -- skipped

  // insert

  public app.daos.BatchVO insert(final app.daos.primitives.AbstractBatchVO vo) {
    String id = "app.daos.primitives.batch.insert";
    this.sqlSession.insert(id, vo);
    app.daos.BatchVO mo = new app.daos.BatchVO();
    mo.setSkuCode(vo.getSkuCode());
    mo.setItemName(vo.getItemName());
    return mo;
  }

  // no update by PK generated, since the table does not have a PK.

  // no delete by PK generated, since the table does not have a PK.

  // update by example

  public int update(final app.daos.primitives.AbstractBatchVO example, final app.daos.primitives.AbstractBatchVO updateValues) {
    UpdateByExampleDao<app.daos.primitives.AbstractBatchVO> fvd = //
      new UpdateByExampleDao<app.daos.primitives.AbstractBatchVO>(example, updateValues);
    return this.sqlSession.update("app.daos.primitives.batch.updateByExample", fvd);
  }

  // update by criteria

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractBatchVO updateValues, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getSkuCode() != null) values.put("sku_code", updateValues.getSkuCode());
    if (updateValues.getItemName() != null) values.put("item_name", updateValues.getItemName());
    return new UpdateSetCompletePhase(BatchDAO.newTable(), this.liveSQLDialect, this.sqlSession,
      "app.daos.primitives.batch.updateByCriteria", predicate, values);
  }

  public UpdateSetCompletePhase update(final app.daos.primitives.AbstractBatchVO updateValues, final BatchDAO.BatchTable tableOrView, final Predicate predicate) {
    Map<String, Object> values = new HashMap<>();
    if (updateValues.getSkuCode() != null) values.put("sku_code", updateValues.getSkuCode());
    if (updateValues.getItemName() != null) values.put("item_name", updateValues.getItemName());
    return new UpdateSetCompletePhase(tableOrView, this.liveSQLDialect, this.sqlSession,
      "app.daos.primitives.batch.updateByCriteria", predicate, values);
  }


  // delete by example

  public int delete(final app.daos.primitives.AbstractBatchVO example) {
    return this.sqlSession.delete("app.daos.primitives.batch.deleteByExample", example);
  }

  // delete by criteria

  public DeleteWherePhase delete(final Predicate predicate) {
    return new DeleteWherePhase(BatchDAO.newTable(), this.liveSQLDialect, this.sqlSession,
      "app.daos.primitives.batch.deleteByCriteria", predicate);
  }

  public DeleteWherePhase delete(final BatchDAO.BatchTable from, final Predicate predicate) {
    return new DeleteWherePhase(from, this.liveSQLDialect, this.sqlSession,
      "app.daos.primitives.batch.deleteByCriteria", predicate);
  }

  // DAO ordering

  public enum BatchOrderBy implements OrderBy {

    SKU_CODE("public.batch", "sku_code", true), //
    SKU_CODE$DESC("public.batch", "sku_code", false), //
    SKU_CODE$CASEINSENSITIVE("public.batch", "lower(sku_code)", true), //
    SKU_CODE$CASEINSENSITIVE_STABLE_FORWARD("public.batch", "lower(sku_code), sku_code", true), //
    SKU_CODE$CASEINSENSITIVE_STABLE_REVERSE("public.batch", "lower(sku_code), sku_code", false), //
    SKU_CODE$DESC_CASEINSENSITIVE("public.batch", "lower(sku_code)", false), //
    SKU_CODE$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.batch", "lower(sku_code), sku_code", false), //
    SKU_CODE$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.batch", "lower(sku_code), sku_code", true), //
    ITEM_NAME("public.batch", "item_name", true), //
    ITEM_NAME$DESC("public.batch", "item_name", false), //
    ITEM_NAME$CASEINSENSITIVE("public.batch", "lower(item_name)", true), //
    ITEM_NAME$CASEINSENSITIVE_STABLE_FORWARD("public.batch", "lower(item_name), item_name", true), //
    ITEM_NAME$CASEINSENSITIVE_STABLE_REVERSE("public.batch", "lower(item_name), item_name", false), //
    ITEM_NAME$DESC_CASEINSENSITIVE("public.batch", "lower(item_name)", false), //
    ITEM_NAME$DESC_CASEINSENSITIVE_STABLE_FORWARD("public.batch", "lower(item_name), item_name", false), //
    ITEM_NAME$DESC_CASEINSENSITIVE_STABLE_REVERSE("public.batch", "lower(item_name), item_name", true);

    private BatchOrderBy(final String tableName, final String columnName,
        boolean ascending) {
      this.tableName = tableName;
      this.columnName = columnName;
      this.ascending = ascending;
    }

    private String tableName;
    private String columnName;
    private boolean ascending;

    public String getTableName() {
      return this.tableName;
    }

    public String getColumnName() {
      return this.columnName;
    }

    public boolean isAscending() {
      return this.ascending;
    }

  }

  // Database Table metadata

  public static BatchTable newTable() {
    return new BatchTable();
  }

  public static BatchTable newTable(final String alias) {
    return new BatchTable(alias);
  }

  public static class BatchTable extends Table {

    // Properties

    public StringColumn skuCode;
    public StringColumn itemName;

    // Getters

    public AllColumns star() {
      return new AllColumns(this, this.skuCode, this.itemName);
    }

    // Constructors

    BatchTable() {
      super(null, "PUBLIC", "BATCH", "Table", null);
      initialize();
    }

    BatchTable(final String alias) {
      super(null, "PUBLIC", "BATCH", "Table", alias);
      initialize();
    }

    // Initialization

    private void initialize() {
      this.skuCode = new StringColumn(this, "SKU_CODE", "skuCode", "CHARACTER VARYING", 10, 0);
      this.itemName = new StringColumn(this, "ITEM_NAME", "itemName", "CHARACTER VARYING", 40, 0);
    }

  }

}
